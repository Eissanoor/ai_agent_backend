
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Bed
 * 
 */
export type Bed = $Result.DefaultSelection<Prisma.$BedPayload>
/**
 * Model Journey
 * 
 */
export type Journey = $Result.DefaultSelection<Prisma.$JourneyPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model PatientCount
 * 
 */
export type PatientCount = $Result.DefaultSelection<Prisma.$PatientCountPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model tblAdmission
 * 
 */
export type tblAdmission = $Result.DefaultSelection<Prisma.$tblAdmissionPayload>
/**
 * Model tblApp
 * 
 */
export type tblApp = $Result.DefaultSelection<Prisma.$tblAppPayload>
/**
 * Model tblAppAuth
 * 
 */
export type tblAppAuth = $Result.DefaultSelection<Prisma.$tblAppAuthPayload>
/**
 * Model tblAppModeAuth
 * 
 */
export type tblAppModeAuth = $Result.DefaultSelection<Prisma.$tblAppModeAuthPayload>
/**
 * Model tblAppModules
 * 
 */
export type tblAppModules = $Result.DefaultSelection<Prisma.$tblAppModulesPayload>
/**
 * Model tblConsult
 * 
 */
export type tblConsult = $Result.DefaultSelection<Prisma.$tblConsultPayload>
/**
 * Model tblCounter
 * 
 */
export type tblCounter = $Result.DefaultSelection<Prisma.$tblCounterPayload>
/**
 * Model tblDepartment
 * 
 */
export type tblDepartment = $Result.DefaultSelection<Prisma.$tblDepartmentPayload>
/**
 * Model tblLocation
 * 
 */
export type tblLocation = $Result.DefaultSelection<Prisma.$tblLocationPayload>
/**
 * Model tblLocationSession
 * 
 */
export type tblLocationSession = $Result.DefaultSelection<Prisma.$tblLocationSessionPayload>
/**
 * Model tbllocationsessionArchieve
 * 
 */
export type tbllocationsessionArchieve = $Result.DefaultSelection<Prisma.$tbllocationsessionArchievePayload>
/**
 * Model tblQueue
 * 
 */
export type tblQueue = $Result.DefaultSelection<Prisma.$tblQueuePayload>
/**
 * Model tblQueueArchieve
 * 
 */
export type tblQueueArchieve = $Result.DefaultSelection<Prisma.$tblQueueArchievePayload>
/**
 * Model tblQueueArchieveTemp
 * 
 */
export type tblQueueArchieveTemp = $Result.DefaultSelection<Prisma.$tblQueueArchieveTempPayload>
/**
 * Model tblQueuePulmo
 * 
 */
export type tblQueuePulmo = $Result.DefaultSelection<Prisma.$tblQueuePulmoPayload>
/**
 * Model tblQueueSession
 * 
 */
export type tblQueueSession = $Result.DefaultSelection<Prisma.$tblQueueSessionPayload>
/**
 * Model tblQueueTransferDept
 * 
 */
export type tblQueueTransferDept = $Result.DefaultSelection<Prisma.$tblQueueTransferDeptPayload>
/**
 * Model tblQueueWait
 * 
 */
export type tblQueueWait = $Result.DefaultSelection<Prisma.$tblQueueWaitPayload>
/**
 * Model tblSubLocation
 * 
 */
export type tblSubLocation = $Result.DefaultSelection<Prisma.$tblSubLocationPayload>
/**
 * Model tblTransfer
 * 
 */
export type tblTransfer = $Result.DefaultSelection<Prisma.$tblTransferPayload>
/**
 * Model tblUserDepartmentAuth
 * 
 */
export type tblUserDepartmentAuth = $Result.DefaultSelection<Prisma.$tblUserDepartmentAuthPayload>
/**
 * Model tblUserOverrideAuth
 * 
 */
export type tblUserOverrideAuth = $Result.DefaultSelection<Prisma.$tblUserOverrideAuthPayload>
/**
 * Model Prompt
 * 
 */
export type Prompt = $Result.DefaultSelection<Prisma.$PromptPayload>
/**
 * Model tblUsers
 * 
 */
export type tblUsers = $Result.DefaultSelection<Prisma.$tblUsersPayload>
/**
 * Model VitalSign
 * 
 */
export type VitalSign = $Result.DefaultSelection<Prisma.$VitalSignPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bed`: Exposes CRUD operations for the **Bed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Beds
    * const beds = await prisma.bed.findMany()
    * ```
    */
  get bed(): Prisma.BedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.journey`: Exposes CRUD operations for the **Journey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Journeys
    * const journeys = await prisma.journey.findMany()
    * ```
    */
  get journey(): Prisma.JourneyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientCount`: Exposes CRUD operations for the **PatientCount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientCounts
    * const patientCounts = await prisma.patientCount.findMany()
    * ```
    */
  get patientCount(): Prisma.PatientCountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblAdmission`: Exposes CRUD operations for the **tblAdmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblAdmissions
    * const tblAdmissions = await prisma.tblAdmission.findMany()
    * ```
    */
  get tblAdmission(): Prisma.tblAdmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblApp`: Exposes CRUD operations for the **tblApp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblApps
    * const tblApps = await prisma.tblApp.findMany()
    * ```
    */
  get tblApp(): Prisma.tblAppDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblAppAuth`: Exposes CRUD operations for the **tblAppAuth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblAppAuths
    * const tblAppAuths = await prisma.tblAppAuth.findMany()
    * ```
    */
  get tblAppAuth(): Prisma.tblAppAuthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblAppModeAuth`: Exposes CRUD operations for the **tblAppModeAuth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblAppModeAuths
    * const tblAppModeAuths = await prisma.tblAppModeAuth.findMany()
    * ```
    */
  get tblAppModeAuth(): Prisma.tblAppModeAuthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblAppModules`: Exposes CRUD operations for the **tblAppModules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblAppModules
    * const tblAppModules = await prisma.tblAppModules.findMany()
    * ```
    */
  get tblAppModules(): Prisma.tblAppModulesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblConsult`: Exposes CRUD operations for the **tblConsult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblConsults
    * const tblConsults = await prisma.tblConsult.findMany()
    * ```
    */
  get tblConsult(): Prisma.tblConsultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblCounter`: Exposes CRUD operations for the **tblCounter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblCounters
    * const tblCounters = await prisma.tblCounter.findMany()
    * ```
    */
  get tblCounter(): Prisma.tblCounterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblDepartment`: Exposes CRUD operations for the **tblDepartment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblDepartments
    * const tblDepartments = await prisma.tblDepartment.findMany()
    * ```
    */
  get tblDepartment(): Prisma.tblDepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblLocation`: Exposes CRUD operations for the **tblLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblLocations
    * const tblLocations = await prisma.tblLocation.findMany()
    * ```
    */
  get tblLocation(): Prisma.tblLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblLocationSession`: Exposes CRUD operations for the **tblLocationSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblLocationSessions
    * const tblLocationSessions = await prisma.tblLocationSession.findMany()
    * ```
    */
  get tblLocationSession(): Prisma.tblLocationSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tbllocationsessionArchieve`: Exposes CRUD operations for the **tbllocationsessionArchieve** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TbllocationsessionArchieves
    * const tbllocationsessionArchieves = await prisma.tbllocationsessionArchieve.findMany()
    * ```
    */
  get tbllocationsessionArchieve(): Prisma.tbllocationsessionArchieveDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblQueue`: Exposes CRUD operations for the **tblQueue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblQueues
    * const tblQueues = await prisma.tblQueue.findMany()
    * ```
    */
  get tblQueue(): Prisma.tblQueueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblQueueArchieve`: Exposes CRUD operations for the **tblQueueArchieve** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblQueueArchieves
    * const tblQueueArchieves = await prisma.tblQueueArchieve.findMany()
    * ```
    */
  get tblQueueArchieve(): Prisma.tblQueueArchieveDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblQueueArchieveTemp`: Exposes CRUD operations for the **tblQueueArchieveTemp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblQueueArchieveTemps
    * const tblQueueArchieveTemps = await prisma.tblQueueArchieveTemp.findMany()
    * ```
    */
  get tblQueueArchieveTemp(): Prisma.tblQueueArchieveTempDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblQueuePulmo`: Exposes CRUD operations for the **tblQueuePulmo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblQueuePulmos
    * const tblQueuePulmos = await prisma.tblQueuePulmo.findMany()
    * ```
    */
  get tblQueuePulmo(): Prisma.tblQueuePulmoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblQueueSession`: Exposes CRUD operations for the **tblQueueSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblQueueSessions
    * const tblQueueSessions = await prisma.tblQueueSession.findMany()
    * ```
    */
  get tblQueueSession(): Prisma.tblQueueSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblQueueTransferDept`: Exposes CRUD operations for the **tblQueueTransferDept** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblQueueTransferDepts
    * const tblQueueTransferDepts = await prisma.tblQueueTransferDept.findMany()
    * ```
    */
  get tblQueueTransferDept(): Prisma.tblQueueTransferDeptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblQueueWait`: Exposes CRUD operations for the **tblQueueWait** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblQueueWaits
    * const tblQueueWaits = await prisma.tblQueueWait.findMany()
    * ```
    */
  get tblQueueWait(): Prisma.tblQueueWaitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblSubLocation`: Exposes CRUD operations for the **tblSubLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblSubLocations
    * const tblSubLocations = await prisma.tblSubLocation.findMany()
    * ```
    */
  get tblSubLocation(): Prisma.tblSubLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblTransfer`: Exposes CRUD operations for the **tblTransfer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblTransfers
    * const tblTransfers = await prisma.tblTransfer.findMany()
    * ```
    */
  get tblTransfer(): Prisma.tblTransferDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblUserDepartmentAuth`: Exposes CRUD operations for the **tblUserDepartmentAuth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblUserDepartmentAuths
    * const tblUserDepartmentAuths = await prisma.tblUserDepartmentAuth.findMany()
    * ```
    */
  get tblUserDepartmentAuth(): Prisma.tblUserDepartmentAuthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblUserOverrideAuth`: Exposes CRUD operations for the **tblUserOverrideAuth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblUserOverrideAuths
    * const tblUserOverrideAuths = await prisma.tblUserOverrideAuth.findMany()
    * ```
    */
  get tblUserOverrideAuth(): Prisma.tblUserOverrideAuthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.prompt`: Exposes CRUD operations for the **Prompt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prompts
    * const prompts = await prisma.prompt.findMany()
    * ```
    */
  get prompt(): Prisma.PromptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tblUsers`: Exposes CRUD operations for the **tblUsers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TblUsers
    * const tblUsers = await prisma.tblUsers.findMany()
    * ```
    */
  get tblUsers(): Prisma.tblUsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vitalSign`: Exposes CRUD operations for the **VitalSign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VitalSigns
    * const vitalSigns = await prisma.vitalSign.findMany()
    * ```
    */
  get vitalSign(): Prisma.VitalSignDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Bed: 'Bed',
    Journey: 'Journey',
    Patient: 'Patient',
    PatientCount: 'PatientCount',
    RefreshToken: 'RefreshToken',
    Role: 'Role',
    tblAdmission: 'tblAdmission',
    tblApp: 'tblApp',
    tblAppAuth: 'tblAppAuth',
    tblAppModeAuth: 'tblAppModeAuth',
    tblAppModules: 'tblAppModules',
    tblConsult: 'tblConsult',
    tblCounter: 'tblCounter',
    tblDepartment: 'tblDepartment',
    tblLocation: 'tblLocation',
    tblLocationSession: 'tblLocationSession',
    tbllocationsessionArchieve: 'tbllocationsessionArchieve',
    tblQueue: 'tblQueue',
    tblQueueArchieve: 'tblQueueArchieve',
    tblQueueArchieveTemp: 'tblQueueArchieveTemp',
    tblQueuePulmo: 'tblQueuePulmo',
    tblQueueSession: 'tblQueueSession',
    tblQueueTransferDept: 'tblQueueTransferDept',
    tblQueueWait: 'tblQueueWait',
    tblSubLocation: 'tblSubLocation',
    tblTransfer: 'tblTransfer',
    tblUserDepartmentAuth: 'tblUserDepartmentAuth',
    tblUserOverrideAuth: 'tblUserOverrideAuth',
    Prompt: 'Prompt',
    tblUsers: 'tblUsers',
    VitalSign: 'VitalSign'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "bed" | "journey" | "patient" | "patientCount" | "refreshToken" | "role" | "tblAdmission" | "tblApp" | "tblAppAuth" | "tblAppModeAuth" | "tblAppModules" | "tblConsult" | "tblCounter" | "tblDepartment" | "tblLocation" | "tblLocationSession" | "tbllocationsessionArchieve" | "tblQueue" | "tblQueueArchieve" | "tblQueueArchieveTemp" | "tblQueuePulmo" | "tblQueueSession" | "tblQueueTransferDept" | "tblQueueWait" | "tblSubLocation" | "tblTransfer" | "tblUserDepartmentAuth" | "tblUserOverrideAuth" | "prompt" | "tblUsers" | "vitalSign"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Bed: {
        payload: Prisma.$BedPayload<ExtArgs>
        fields: Prisma.BedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload>
          }
          findFirst: {
            args: Prisma.BedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload>
          }
          findMany: {
            args: Prisma.BedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload>[]
          }
          create: {
            args: Prisma.BedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload>
          }
          createMany: {
            args: Prisma.BedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload>
          }
          update: {
            args: Prisma.BedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload>
          }
          deleteMany: {
            args: Prisma.BedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedPayload>
          }
          aggregate: {
            args: Prisma.BedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBed>
          }
          groupBy: {
            args: Prisma.BedGroupByArgs<ExtArgs>
            result: $Utils.Optional<BedGroupByOutputType>[]
          }
          count: {
            args: Prisma.BedCountArgs<ExtArgs>
            result: $Utils.Optional<BedCountAggregateOutputType> | number
          }
        }
      }
      Journey: {
        payload: Prisma.$JourneyPayload<ExtArgs>
        fields: Prisma.JourneyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JourneyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JourneyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload>
          }
          findFirst: {
            args: Prisma.JourneyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JourneyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload>
          }
          findMany: {
            args: Prisma.JourneyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload>[]
          }
          create: {
            args: Prisma.JourneyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload>
          }
          createMany: {
            args: Prisma.JourneyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JourneyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload>
          }
          update: {
            args: Prisma.JourneyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload>
          }
          deleteMany: {
            args: Prisma.JourneyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JourneyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JourneyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPayload>
          }
          aggregate: {
            args: Prisma.JourneyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJourney>
          }
          groupBy: {
            args: Prisma.JourneyGroupByArgs<ExtArgs>
            result: $Utils.Optional<JourneyGroupByOutputType>[]
          }
          count: {
            args: Prisma.JourneyCountArgs<ExtArgs>
            result: $Utils.Optional<JourneyCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      PatientCount: {
        payload: Prisma.$PatientCountPayload<ExtArgs>
        fields: Prisma.PatientCountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientCountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientCountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload>
          }
          findFirst: {
            args: Prisma.PatientCountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientCountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload>
          }
          findMany: {
            args: Prisma.PatientCountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload>[]
          }
          create: {
            args: Prisma.PatientCountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload>
          }
          createMany: {
            args: Prisma.PatientCountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientCountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload>
          }
          update: {
            args: Prisma.PatientCountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload>
          }
          deleteMany: {
            args: Prisma.PatientCountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientCountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientCountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCountPayload>
          }
          aggregate: {
            args: Prisma.PatientCountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientCount>
          }
          groupBy: {
            args: Prisma.PatientCountGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientCountGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      tblAdmission: {
        payload: Prisma.$tblAdmissionPayload<ExtArgs>
        fields: Prisma.tblAdmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblAdmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblAdmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload>
          }
          findFirst: {
            args: Prisma.tblAdmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblAdmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload>
          }
          findMany: {
            args: Prisma.tblAdmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload>[]
          }
          create: {
            args: Prisma.tblAdmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload>
          }
          createMany: {
            args: Prisma.tblAdmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblAdmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload>
          }
          update: {
            args: Prisma.tblAdmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload>
          }
          deleteMany: {
            args: Prisma.tblAdmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblAdmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblAdmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAdmissionPayload>
          }
          aggregate: {
            args: Prisma.TblAdmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblAdmission>
          }
          groupBy: {
            args: Prisma.tblAdmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblAdmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblAdmissionCountArgs<ExtArgs>
            result: $Utils.Optional<TblAdmissionCountAggregateOutputType> | number
          }
        }
      }
      tblApp: {
        payload: Prisma.$tblAppPayload<ExtArgs>
        fields: Prisma.tblAppFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblAppFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblAppFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload>
          }
          findFirst: {
            args: Prisma.tblAppFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblAppFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload>
          }
          findMany: {
            args: Prisma.tblAppFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload>[]
          }
          create: {
            args: Prisma.tblAppCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload>
          }
          createMany: {
            args: Prisma.tblAppCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblAppDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload>
          }
          update: {
            args: Prisma.tblAppUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload>
          }
          deleteMany: {
            args: Prisma.tblAppDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblAppUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblAppUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppPayload>
          }
          aggregate: {
            args: Prisma.TblAppAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblApp>
          }
          groupBy: {
            args: Prisma.tblAppGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblAppGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblAppCountArgs<ExtArgs>
            result: $Utils.Optional<TblAppCountAggregateOutputType> | number
          }
        }
      }
      tblAppAuth: {
        payload: Prisma.$tblAppAuthPayload<ExtArgs>
        fields: Prisma.tblAppAuthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblAppAuthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblAppAuthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload>
          }
          findFirst: {
            args: Prisma.tblAppAuthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblAppAuthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload>
          }
          findMany: {
            args: Prisma.tblAppAuthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload>[]
          }
          create: {
            args: Prisma.tblAppAuthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload>
          }
          createMany: {
            args: Prisma.tblAppAuthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblAppAuthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload>
          }
          update: {
            args: Prisma.tblAppAuthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload>
          }
          deleteMany: {
            args: Prisma.tblAppAuthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblAppAuthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblAppAuthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppAuthPayload>
          }
          aggregate: {
            args: Prisma.TblAppAuthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblAppAuth>
          }
          groupBy: {
            args: Prisma.tblAppAuthGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblAppAuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblAppAuthCountArgs<ExtArgs>
            result: $Utils.Optional<TblAppAuthCountAggregateOutputType> | number
          }
        }
      }
      tblAppModeAuth: {
        payload: Prisma.$tblAppModeAuthPayload<ExtArgs>
        fields: Prisma.tblAppModeAuthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblAppModeAuthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblAppModeAuthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload>
          }
          findFirst: {
            args: Prisma.tblAppModeAuthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblAppModeAuthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload>
          }
          findMany: {
            args: Prisma.tblAppModeAuthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload>[]
          }
          create: {
            args: Prisma.tblAppModeAuthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload>
          }
          createMany: {
            args: Prisma.tblAppModeAuthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblAppModeAuthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload>
          }
          update: {
            args: Prisma.tblAppModeAuthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload>
          }
          deleteMany: {
            args: Prisma.tblAppModeAuthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblAppModeAuthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblAppModeAuthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModeAuthPayload>
          }
          aggregate: {
            args: Prisma.TblAppModeAuthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblAppModeAuth>
          }
          groupBy: {
            args: Prisma.tblAppModeAuthGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblAppModeAuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblAppModeAuthCountArgs<ExtArgs>
            result: $Utils.Optional<TblAppModeAuthCountAggregateOutputType> | number
          }
        }
      }
      tblAppModules: {
        payload: Prisma.$tblAppModulesPayload<ExtArgs>
        fields: Prisma.tblAppModulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblAppModulesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblAppModulesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload>
          }
          findFirst: {
            args: Prisma.tblAppModulesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblAppModulesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload>
          }
          findMany: {
            args: Prisma.tblAppModulesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload>[]
          }
          create: {
            args: Prisma.tblAppModulesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload>
          }
          createMany: {
            args: Prisma.tblAppModulesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblAppModulesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload>
          }
          update: {
            args: Prisma.tblAppModulesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload>
          }
          deleteMany: {
            args: Prisma.tblAppModulesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblAppModulesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblAppModulesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblAppModulesPayload>
          }
          aggregate: {
            args: Prisma.TblAppModulesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblAppModules>
          }
          groupBy: {
            args: Prisma.tblAppModulesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblAppModulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblAppModulesCountArgs<ExtArgs>
            result: $Utils.Optional<TblAppModulesCountAggregateOutputType> | number
          }
        }
      }
      tblConsult: {
        payload: Prisma.$tblConsultPayload<ExtArgs>
        fields: Prisma.tblConsultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblConsultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblConsultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload>
          }
          findFirst: {
            args: Prisma.tblConsultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblConsultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload>
          }
          findMany: {
            args: Prisma.tblConsultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload>[]
          }
          create: {
            args: Prisma.tblConsultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload>
          }
          createMany: {
            args: Prisma.tblConsultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblConsultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload>
          }
          update: {
            args: Prisma.tblConsultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload>
          }
          deleteMany: {
            args: Prisma.tblConsultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblConsultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblConsultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblConsultPayload>
          }
          aggregate: {
            args: Prisma.TblConsultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblConsult>
          }
          groupBy: {
            args: Prisma.tblConsultGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblConsultGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblConsultCountArgs<ExtArgs>
            result: $Utils.Optional<TblConsultCountAggregateOutputType> | number
          }
        }
      }
      tblCounter: {
        payload: Prisma.$tblCounterPayload<ExtArgs>
        fields: Prisma.tblCounterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblCounterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblCounterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload>
          }
          findFirst: {
            args: Prisma.tblCounterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblCounterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload>
          }
          findMany: {
            args: Prisma.tblCounterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload>[]
          }
          create: {
            args: Prisma.tblCounterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload>
          }
          createMany: {
            args: Prisma.tblCounterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblCounterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload>
          }
          update: {
            args: Prisma.tblCounterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload>
          }
          deleteMany: {
            args: Prisma.tblCounterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblCounterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblCounterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblCounterPayload>
          }
          aggregate: {
            args: Prisma.TblCounterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblCounter>
          }
          groupBy: {
            args: Prisma.tblCounterGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblCounterGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblCounterCountArgs<ExtArgs>
            result: $Utils.Optional<TblCounterCountAggregateOutputType> | number
          }
        }
      }
      tblDepartment: {
        payload: Prisma.$tblDepartmentPayload<ExtArgs>
        fields: Prisma.tblDepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblDepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblDepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload>
          }
          findFirst: {
            args: Prisma.tblDepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblDepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload>
          }
          findMany: {
            args: Prisma.tblDepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload>[]
          }
          create: {
            args: Prisma.tblDepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload>
          }
          createMany: {
            args: Prisma.tblDepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblDepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload>
          }
          update: {
            args: Prisma.tblDepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload>
          }
          deleteMany: {
            args: Prisma.tblDepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblDepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblDepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblDepartmentPayload>
          }
          aggregate: {
            args: Prisma.TblDepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblDepartment>
          }
          groupBy: {
            args: Prisma.tblDepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblDepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblDepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<TblDepartmentCountAggregateOutputType> | number
          }
        }
      }
      tblLocation: {
        payload: Prisma.$tblLocationPayload<ExtArgs>
        fields: Prisma.tblLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload>
          }
          findFirst: {
            args: Prisma.tblLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload>
          }
          findMany: {
            args: Prisma.tblLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload>[]
          }
          create: {
            args: Prisma.tblLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload>
          }
          createMany: {
            args: Prisma.tblLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload>
          }
          update: {
            args: Prisma.tblLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload>
          }
          deleteMany: {
            args: Prisma.tblLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationPayload>
          }
          aggregate: {
            args: Prisma.TblLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblLocation>
          }
          groupBy: {
            args: Prisma.tblLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblLocationCountArgs<ExtArgs>
            result: $Utils.Optional<TblLocationCountAggregateOutputType> | number
          }
        }
      }
      tblLocationSession: {
        payload: Prisma.$tblLocationSessionPayload<ExtArgs>
        fields: Prisma.tblLocationSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblLocationSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblLocationSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload>
          }
          findFirst: {
            args: Prisma.tblLocationSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblLocationSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload>
          }
          findMany: {
            args: Prisma.tblLocationSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload>[]
          }
          create: {
            args: Prisma.tblLocationSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload>
          }
          createMany: {
            args: Prisma.tblLocationSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblLocationSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload>
          }
          update: {
            args: Prisma.tblLocationSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload>
          }
          deleteMany: {
            args: Prisma.tblLocationSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblLocationSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblLocationSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblLocationSessionPayload>
          }
          aggregate: {
            args: Prisma.TblLocationSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblLocationSession>
          }
          groupBy: {
            args: Prisma.tblLocationSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblLocationSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblLocationSessionCountArgs<ExtArgs>
            result: $Utils.Optional<TblLocationSessionCountAggregateOutputType> | number
          }
        }
      }
      tbllocationsessionArchieve: {
        payload: Prisma.$tbllocationsessionArchievePayload<ExtArgs>
        fields: Prisma.tbllocationsessionArchieveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tbllocationsessionArchieveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tbllocationsessionArchieveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload>
          }
          findFirst: {
            args: Prisma.tbllocationsessionArchieveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tbllocationsessionArchieveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload>
          }
          findMany: {
            args: Prisma.tbllocationsessionArchieveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload>[]
          }
          create: {
            args: Prisma.tbllocationsessionArchieveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload>
          }
          createMany: {
            args: Prisma.tbllocationsessionArchieveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tbllocationsessionArchieveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload>
          }
          update: {
            args: Prisma.tbllocationsessionArchieveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload>
          }
          deleteMany: {
            args: Prisma.tbllocationsessionArchieveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tbllocationsessionArchieveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tbllocationsessionArchieveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tbllocationsessionArchievePayload>
          }
          aggregate: {
            args: Prisma.TbllocationsessionArchieveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTbllocationsessionArchieve>
          }
          groupBy: {
            args: Prisma.tbllocationsessionArchieveGroupByArgs<ExtArgs>
            result: $Utils.Optional<TbllocationsessionArchieveGroupByOutputType>[]
          }
          count: {
            args: Prisma.tbllocationsessionArchieveCountArgs<ExtArgs>
            result: $Utils.Optional<TbllocationsessionArchieveCountAggregateOutputType> | number
          }
        }
      }
      tblQueue: {
        payload: Prisma.$tblQueuePayload<ExtArgs>
        fields: Prisma.tblQueueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblQueueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblQueueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload>
          }
          findFirst: {
            args: Prisma.tblQueueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblQueueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload>
          }
          findMany: {
            args: Prisma.tblQueueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload>[]
          }
          create: {
            args: Prisma.tblQueueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload>
          }
          createMany: {
            args: Prisma.tblQueueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblQueueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload>
          }
          update: {
            args: Prisma.tblQueueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload>
          }
          deleteMany: {
            args: Prisma.tblQueueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblQueueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblQueueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePayload>
          }
          aggregate: {
            args: Prisma.TblQueueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblQueue>
          }
          groupBy: {
            args: Prisma.tblQueueGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblQueueGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblQueueCountArgs<ExtArgs>
            result: $Utils.Optional<TblQueueCountAggregateOutputType> | number
          }
        }
      }
      tblQueueArchieve: {
        payload: Prisma.$tblQueueArchievePayload<ExtArgs>
        fields: Prisma.tblQueueArchieveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblQueueArchieveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblQueueArchieveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload>
          }
          findFirst: {
            args: Prisma.tblQueueArchieveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblQueueArchieveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload>
          }
          findMany: {
            args: Prisma.tblQueueArchieveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload>[]
          }
          create: {
            args: Prisma.tblQueueArchieveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload>
          }
          createMany: {
            args: Prisma.tblQueueArchieveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblQueueArchieveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload>
          }
          update: {
            args: Prisma.tblQueueArchieveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload>
          }
          deleteMany: {
            args: Prisma.tblQueueArchieveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblQueueArchieveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblQueueArchieveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchievePayload>
          }
          aggregate: {
            args: Prisma.TblQueueArchieveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblQueueArchieve>
          }
          groupBy: {
            args: Prisma.tblQueueArchieveGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblQueueArchieveGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblQueueArchieveCountArgs<ExtArgs>
            result: $Utils.Optional<TblQueueArchieveCountAggregateOutputType> | number
          }
        }
      }
      tblQueueArchieveTemp: {
        payload: Prisma.$tblQueueArchieveTempPayload<ExtArgs>
        fields: Prisma.tblQueueArchieveTempFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblQueueArchieveTempFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblQueueArchieveTempFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload>
          }
          findFirst: {
            args: Prisma.tblQueueArchieveTempFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblQueueArchieveTempFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload>
          }
          findMany: {
            args: Prisma.tblQueueArchieveTempFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload>[]
          }
          create: {
            args: Prisma.tblQueueArchieveTempCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload>
          }
          createMany: {
            args: Prisma.tblQueueArchieveTempCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblQueueArchieveTempDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload>
          }
          update: {
            args: Prisma.tblQueueArchieveTempUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload>
          }
          deleteMany: {
            args: Prisma.tblQueueArchieveTempDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblQueueArchieveTempUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblQueueArchieveTempUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueArchieveTempPayload>
          }
          aggregate: {
            args: Prisma.TblQueueArchieveTempAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblQueueArchieveTemp>
          }
          groupBy: {
            args: Prisma.tblQueueArchieveTempGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblQueueArchieveTempGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblQueueArchieveTempCountArgs<ExtArgs>
            result: $Utils.Optional<TblQueueArchieveTempCountAggregateOutputType> | number
          }
        }
      }
      tblQueuePulmo: {
        payload: Prisma.$tblQueuePulmoPayload<ExtArgs>
        fields: Prisma.tblQueuePulmoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblQueuePulmoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblQueuePulmoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload>
          }
          findFirst: {
            args: Prisma.tblQueuePulmoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblQueuePulmoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload>
          }
          findMany: {
            args: Prisma.tblQueuePulmoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload>[]
          }
          create: {
            args: Prisma.tblQueuePulmoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload>
          }
          createMany: {
            args: Prisma.tblQueuePulmoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblQueuePulmoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload>
          }
          update: {
            args: Prisma.tblQueuePulmoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload>
          }
          deleteMany: {
            args: Prisma.tblQueuePulmoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblQueuePulmoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblQueuePulmoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueuePulmoPayload>
          }
          aggregate: {
            args: Prisma.TblQueuePulmoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblQueuePulmo>
          }
          groupBy: {
            args: Prisma.tblQueuePulmoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblQueuePulmoGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblQueuePulmoCountArgs<ExtArgs>
            result: $Utils.Optional<TblQueuePulmoCountAggregateOutputType> | number
          }
        }
      }
      tblQueueSession: {
        payload: Prisma.$tblQueueSessionPayload<ExtArgs>
        fields: Prisma.tblQueueSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblQueueSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblQueueSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload>
          }
          findFirst: {
            args: Prisma.tblQueueSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblQueueSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload>
          }
          findMany: {
            args: Prisma.tblQueueSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload>[]
          }
          create: {
            args: Prisma.tblQueueSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload>
          }
          createMany: {
            args: Prisma.tblQueueSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblQueueSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload>
          }
          update: {
            args: Prisma.tblQueueSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload>
          }
          deleteMany: {
            args: Prisma.tblQueueSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblQueueSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblQueueSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueSessionPayload>
          }
          aggregate: {
            args: Prisma.TblQueueSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblQueueSession>
          }
          groupBy: {
            args: Prisma.tblQueueSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblQueueSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblQueueSessionCountArgs<ExtArgs>
            result: $Utils.Optional<TblQueueSessionCountAggregateOutputType> | number
          }
        }
      }
      tblQueueTransferDept: {
        payload: Prisma.$tblQueueTransferDeptPayload<ExtArgs>
        fields: Prisma.tblQueueTransferDeptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblQueueTransferDeptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblQueueTransferDeptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload>
          }
          findFirst: {
            args: Prisma.tblQueueTransferDeptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblQueueTransferDeptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload>
          }
          findMany: {
            args: Prisma.tblQueueTransferDeptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload>[]
          }
          create: {
            args: Prisma.tblQueueTransferDeptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload>
          }
          createMany: {
            args: Prisma.tblQueueTransferDeptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblQueueTransferDeptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload>
          }
          update: {
            args: Prisma.tblQueueTransferDeptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload>
          }
          deleteMany: {
            args: Prisma.tblQueueTransferDeptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblQueueTransferDeptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblQueueTransferDeptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueTransferDeptPayload>
          }
          aggregate: {
            args: Prisma.TblQueueTransferDeptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblQueueTransferDept>
          }
          groupBy: {
            args: Prisma.tblQueueTransferDeptGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblQueueTransferDeptGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblQueueTransferDeptCountArgs<ExtArgs>
            result: $Utils.Optional<TblQueueTransferDeptCountAggregateOutputType> | number
          }
        }
      }
      tblQueueWait: {
        payload: Prisma.$tblQueueWaitPayload<ExtArgs>
        fields: Prisma.tblQueueWaitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblQueueWaitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblQueueWaitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload>
          }
          findFirst: {
            args: Prisma.tblQueueWaitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblQueueWaitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload>
          }
          findMany: {
            args: Prisma.tblQueueWaitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload>[]
          }
          create: {
            args: Prisma.tblQueueWaitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload>
          }
          createMany: {
            args: Prisma.tblQueueWaitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblQueueWaitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload>
          }
          update: {
            args: Prisma.tblQueueWaitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload>
          }
          deleteMany: {
            args: Prisma.tblQueueWaitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblQueueWaitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblQueueWaitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblQueueWaitPayload>
          }
          aggregate: {
            args: Prisma.TblQueueWaitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblQueueWait>
          }
          groupBy: {
            args: Prisma.tblQueueWaitGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblQueueWaitGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblQueueWaitCountArgs<ExtArgs>
            result: $Utils.Optional<TblQueueWaitCountAggregateOutputType> | number
          }
        }
      }
      tblSubLocation: {
        payload: Prisma.$tblSubLocationPayload<ExtArgs>
        fields: Prisma.tblSubLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblSubLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblSubLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload>
          }
          findFirst: {
            args: Prisma.tblSubLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblSubLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload>
          }
          findMany: {
            args: Prisma.tblSubLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload>[]
          }
          create: {
            args: Prisma.tblSubLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload>
          }
          createMany: {
            args: Prisma.tblSubLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblSubLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload>
          }
          update: {
            args: Prisma.tblSubLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload>
          }
          deleteMany: {
            args: Prisma.tblSubLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblSubLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblSubLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblSubLocationPayload>
          }
          aggregate: {
            args: Prisma.TblSubLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblSubLocation>
          }
          groupBy: {
            args: Prisma.tblSubLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblSubLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblSubLocationCountArgs<ExtArgs>
            result: $Utils.Optional<TblSubLocationCountAggregateOutputType> | number
          }
        }
      }
      tblTransfer: {
        payload: Prisma.$tblTransferPayload<ExtArgs>
        fields: Prisma.tblTransferFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblTransferFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblTransferFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload>
          }
          findFirst: {
            args: Prisma.tblTransferFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblTransferFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload>
          }
          findMany: {
            args: Prisma.tblTransferFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload>[]
          }
          create: {
            args: Prisma.tblTransferCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload>
          }
          createMany: {
            args: Prisma.tblTransferCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblTransferDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload>
          }
          update: {
            args: Prisma.tblTransferUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload>
          }
          deleteMany: {
            args: Prisma.tblTransferDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblTransferUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblTransferUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblTransferPayload>
          }
          aggregate: {
            args: Prisma.TblTransferAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblTransfer>
          }
          groupBy: {
            args: Prisma.tblTransferGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblTransferGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblTransferCountArgs<ExtArgs>
            result: $Utils.Optional<TblTransferCountAggregateOutputType> | number
          }
        }
      }
      tblUserDepartmentAuth: {
        payload: Prisma.$tblUserDepartmentAuthPayload<ExtArgs>
        fields: Prisma.tblUserDepartmentAuthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblUserDepartmentAuthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblUserDepartmentAuthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload>
          }
          findFirst: {
            args: Prisma.tblUserDepartmentAuthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblUserDepartmentAuthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload>
          }
          findMany: {
            args: Prisma.tblUserDepartmentAuthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload>[]
          }
          create: {
            args: Prisma.tblUserDepartmentAuthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload>
          }
          createMany: {
            args: Prisma.tblUserDepartmentAuthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblUserDepartmentAuthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload>
          }
          update: {
            args: Prisma.tblUserDepartmentAuthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload>
          }
          deleteMany: {
            args: Prisma.tblUserDepartmentAuthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblUserDepartmentAuthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblUserDepartmentAuthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserDepartmentAuthPayload>
          }
          aggregate: {
            args: Prisma.TblUserDepartmentAuthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblUserDepartmentAuth>
          }
          groupBy: {
            args: Prisma.tblUserDepartmentAuthGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblUserDepartmentAuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblUserDepartmentAuthCountArgs<ExtArgs>
            result: $Utils.Optional<TblUserDepartmentAuthCountAggregateOutputType> | number
          }
        }
      }
      tblUserOverrideAuth: {
        payload: Prisma.$tblUserOverrideAuthPayload<ExtArgs>
        fields: Prisma.tblUserOverrideAuthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblUserOverrideAuthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblUserOverrideAuthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload>
          }
          findFirst: {
            args: Prisma.tblUserOverrideAuthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblUserOverrideAuthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload>
          }
          findMany: {
            args: Prisma.tblUserOverrideAuthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload>[]
          }
          create: {
            args: Prisma.tblUserOverrideAuthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload>
          }
          createMany: {
            args: Prisma.tblUserOverrideAuthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblUserOverrideAuthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload>
          }
          update: {
            args: Prisma.tblUserOverrideAuthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload>
          }
          deleteMany: {
            args: Prisma.tblUserOverrideAuthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblUserOverrideAuthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblUserOverrideAuthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUserOverrideAuthPayload>
          }
          aggregate: {
            args: Prisma.TblUserOverrideAuthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblUserOverrideAuth>
          }
          groupBy: {
            args: Prisma.tblUserOverrideAuthGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblUserOverrideAuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblUserOverrideAuthCountArgs<ExtArgs>
            result: $Utils.Optional<TblUserOverrideAuthCountAggregateOutputType> | number
          }
        }
      }
      Prompt: {
        payload: Prisma.$PromptPayload<ExtArgs>
        fields: Prisma.PromptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          findFirst: {
            args: Prisma.PromptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          findMany: {
            args: Prisma.PromptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>[]
          }
          create: {
            args: Prisma.PromptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          createMany: {
            args: Prisma.PromptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PromptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          update: {
            args: Prisma.PromptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          deleteMany: {
            args: Prisma.PromptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptPayload>
          }
          aggregate: {
            args: Prisma.PromptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrompt>
          }
          groupBy: {
            args: Prisma.PromptGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromptGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromptCountArgs<ExtArgs>
            result: $Utils.Optional<PromptCountAggregateOutputType> | number
          }
        }
      }
      tblUsers: {
        payload: Prisma.$tblUsersPayload<ExtArgs>
        fields: Prisma.tblUsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tblUsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tblUsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload>
          }
          findFirst: {
            args: Prisma.tblUsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tblUsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload>
          }
          findMany: {
            args: Prisma.tblUsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload>[]
          }
          create: {
            args: Prisma.tblUsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload>
          }
          createMany: {
            args: Prisma.tblUsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tblUsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload>
          }
          update: {
            args: Prisma.tblUsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload>
          }
          deleteMany: {
            args: Prisma.tblUsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tblUsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tblUsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tblUsersPayload>
          }
          aggregate: {
            args: Prisma.TblUsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTblUsers>
          }
          groupBy: {
            args: Prisma.tblUsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<TblUsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.tblUsersCountArgs<ExtArgs>
            result: $Utils.Optional<TblUsersCountAggregateOutputType> | number
          }
        }
      }
      VitalSign: {
        payload: Prisma.$VitalSignPayload<ExtArgs>
        fields: Prisma.VitalSignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VitalSignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VitalSignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload>
          }
          findFirst: {
            args: Prisma.VitalSignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VitalSignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload>
          }
          findMany: {
            args: Prisma.VitalSignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload>[]
          }
          create: {
            args: Prisma.VitalSignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload>
          }
          createMany: {
            args: Prisma.VitalSignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VitalSignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload>
          }
          update: {
            args: Prisma.VitalSignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload>
          }
          deleteMany: {
            args: Prisma.VitalSignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VitalSignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VitalSignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VitalSignPayload>
          }
          aggregate: {
            args: Prisma.VitalSignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVitalSign>
          }
          groupBy: {
            args: Prisma.VitalSignGroupByArgs<ExtArgs>
            result: $Utils.Optional<VitalSignGroupByOutputType>[]
          }
          count: {
            args: Prisma.VitalSignCountArgs<ExtArgs>
            result: $Utils.Optional<VitalSignCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    bed?: BedOmit
    journey?: JourneyOmit
    patient?: PatientOmit
    patientCount?: PatientCountOmit
    refreshToken?: RefreshTokenOmit
    role?: RoleOmit
    tblAdmission?: tblAdmissionOmit
    tblApp?: tblAppOmit
    tblAppAuth?: tblAppAuthOmit
    tblAppModeAuth?: tblAppModeAuthOmit
    tblAppModules?: tblAppModulesOmit
    tblConsult?: tblConsultOmit
    tblCounter?: tblCounterOmit
    tblDepartment?: tblDepartmentOmit
    tblLocation?: tblLocationOmit
    tblLocationSession?: tblLocationSessionOmit
    tbllocationsessionArchieve?: tbllocationsessionArchieveOmit
    tblQueue?: tblQueueOmit
    tblQueueArchieve?: tblQueueArchieveOmit
    tblQueueArchieveTemp?: tblQueueArchieveTempOmit
    tblQueuePulmo?: tblQueuePulmoOmit
    tblQueueSession?: tblQueueSessionOmit
    tblQueueTransferDept?: tblQueueTransferDeptOmit
    tblQueueWait?: tblQueueWaitOmit
    tblSubLocation?: tblSubLocationOmit
    tblTransfer?: tblTransferOmit
    tblUserDepartmentAuth?: tblUserDepartmentAuthOmit
    tblUserOverrideAuth?: tblUserOverrideAuthOmit
    prompt?: PromptOmit
    tblUsers?: tblUsersOmit
    vitalSign?: VitalSignOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Patient: number
    PatientCount: number
    RefreshToken: number
    Role: number
    Prompt: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | UserCountOutputTypeCountPatientArgs
    PatientCount?: boolean | UserCountOutputTypeCountPatientCountArgs
    RefreshToken?: boolean | UserCountOutputTypeCountRefreshTokenArgs
    Role?: boolean | UserCountOutputTypeCountRoleArgs
    Prompt?: boolean | UserCountOutputTypeCountPromptArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientCountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPromptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptWhereInput
  }


  /**
   * Count Type BedCountOutputType
   */

  export type BedCountOutputType = {
    Patient: number
  }

  export type BedCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | BedCountOutputTypeCountPatientArgs
  }

  // Custom InputTypes
  /**
   * BedCountOutputType without action
   */
  export type BedCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedCountOutputType
     */
    select?: BedCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BedCountOutputType without action
   */
  export type BedCountOutputTypeCountPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    Journey: number
    VitalSign: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Journey?: boolean | PatientCountOutputTypeCountJourneyArgs
    VitalSign?: boolean | PatientCountOutputTypeCountVitalSignArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountJourneyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountVitalSignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VitalSignWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    User: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | RoleCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type TblDepartmentCountOutputType
   */

  export type TblDepartmentCountOutputType = {
    Patient: number
  }

  export type TblDepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | TblDepartmentCountOutputTypeCountPatientArgs
  }

  // Custom InputTypes
  /**
   * TblDepartmentCountOutputType without action
   */
  export type TblDepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TblDepartmentCountOutputType
     */
    select?: TblDepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TblDepartmentCountOutputType without action
   */
  export type TblDepartmentCountOutputTypeCountPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    password: string | null
    name: string | null
    deptcode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    password: string | null
    name: string | null
    deptcode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    password: number
    name: number
    deptcode: number
    createdAt: number
    updatedAt: number
    email: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    password?: true
    name?: true
    deptcode?: true
    createdAt?: true
    updatedAt?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    password?: true
    name?: true
    deptcode?: true
    createdAt?: true
    updatedAt?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    password?: true
    name?: true
    deptcode?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    password: string | null
    name: string | null
    deptcode: string | null
    createdAt: Date
    updatedAt: Date
    email: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    password?: boolean
    name?: boolean
    deptcode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    Patient?: boolean | User$PatientArgs<ExtArgs>
    PatientCount?: boolean | User$PatientCountArgs<ExtArgs>
    RefreshToken?: boolean | User$RefreshTokenArgs<ExtArgs>
    Role?: boolean | User$RoleArgs<ExtArgs>
    Prompt?: boolean | User$PromptArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    password?: boolean
    name?: boolean
    deptcode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "password" | "name" | "deptcode" | "createdAt" | "updatedAt" | "email", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | User$PatientArgs<ExtArgs>
    PatientCount?: boolean | User$PatientCountArgs<ExtArgs>
    RefreshToken?: boolean | User$RefreshTokenArgs<ExtArgs>
    Role?: boolean | User$RoleArgs<ExtArgs>
    Prompt?: boolean | User$PromptArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Patient: Prisma.$PatientPayload<ExtArgs>[]
      PatientCount: Prisma.$PatientCountPayload<ExtArgs>[]
      RefreshToken: Prisma.$RefreshTokenPayload<ExtArgs>[]
      Role: Prisma.$RolePayload<ExtArgs>[]
      Prompt: Prisma.$PromptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      password: string | null
      name: string | null
      deptcode: string | null
      createdAt: Date
      updatedAt: Date
      email: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Patient<T extends User$PatientArgs<ExtArgs> = {}>(args?: Subset<T, User$PatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PatientCount<T extends User$PatientCountArgs<ExtArgs> = {}>(args?: Subset<T, User$PatientCountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RefreshToken<T extends User$RefreshTokenArgs<ExtArgs> = {}>(args?: Subset<T, User$RefreshTokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Role<T extends User$RoleArgs<ExtArgs> = {}>(args?: Subset<T, User$RoleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Prompt<T extends User$PromptArgs<ExtArgs> = {}>(args?: Subset<T, User$PromptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly deptcode: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Patient
   */
  export type User$PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.PatientCount
   */
  export type User$PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    where?: PatientCountWhereInput
    orderBy?: PatientCountOrderByWithRelationInput | PatientCountOrderByWithRelationInput[]
    cursor?: PatientCountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientCountScalarFieldEnum | PatientCountScalarFieldEnum[]
  }

  /**
   * User.RefreshToken
   */
  export type User$RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User.Role
   */
  export type User$RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * User.Prompt
   */
  export type User$PromptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    where?: PromptWhereInput
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    cursor?: PromptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Bed
   */

  export type AggregateBed = {
    _count: BedCountAggregateOutputType | null
    _min: BedMinAggregateOutputType | null
    _max: BedMaxAggregateOutputType | null
  }

  export type BedMinAggregateOutputType = {
    id: string | null
    bedNumber: string | null
    bedStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BedMaxAggregateOutputType = {
    id: string | null
    bedNumber: string | null
    bedStatus: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BedCountAggregateOutputType = {
    id: number
    bedNumber: number
    bedStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BedMinAggregateInputType = {
    id?: true
    bedNumber?: true
    bedStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BedMaxAggregateInputType = {
    id?: true
    bedNumber?: true
    bedStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BedCountAggregateInputType = {
    id?: true
    bedNumber?: true
    bedStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bed to aggregate.
     */
    where?: BedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beds to fetch.
     */
    orderBy?: BedOrderByWithRelationInput | BedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Beds
    **/
    _count?: true | BedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BedMaxAggregateInputType
  }

  export type GetBedAggregateType<T extends BedAggregateArgs> = {
        [P in keyof T & keyof AggregateBed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBed[P]>
      : GetScalarType<T[P], AggregateBed[P]>
  }




  export type BedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BedWhereInput
    orderBy?: BedOrderByWithAggregationInput | BedOrderByWithAggregationInput[]
    by: BedScalarFieldEnum[] | BedScalarFieldEnum
    having?: BedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BedCountAggregateInputType | true
    _min?: BedMinAggregateInputType
    _max?: BedMaxAggregateInputType
  }

  export type BedGroupByOutputType = {
    id: string
    bedNumber: string | null
    bedStatus: string | null
    createdAt: Date
    updatedAt: Date
    _count: BedCountAggregateOutputType | null
    _min: BedMinAggregateOutputType | null
    _max: BedMaxAggregateOutputType | null
  }

  type GetBedGroupByPayload<T extends BedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BedGroupByOutputType[P]>
            : GetScalarType<T[P], BedGroupByOutputType[P]>
        }
      >
    >


  export type BedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bedNumber?: boolean
    bedStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Patient?: boolean | Bed$PatientArgs<ExtArgs>
    _count?: boolean | BedCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bed"]>



  export type BedSelectScalar = {
    id?: boolean
    bedNumber?: boolean
    bedStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bedNumber" | "bedStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["bed"]>
  export type BedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | Bed$PatientArgs<ExtArgs>
    _count?: boolean | BedCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bed"
    objects: {
      Patient: Prisma.$PatientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bedNumber: string | null
      bedStatus: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bed"]>
    composites: {}
  }

  type BedGetPayload<S extends boolean | null | undefined | BedDefaultArgs> = $Result.GetResult<Prisma.$BedPayload, S>

  type BedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BedCountAggregateInputType | true
    }

  export interface BedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bed'], meta: { name: 'Bed' } }
    /**
     * Find zero or one Bed that matches the filter.
     * @param {BedFindUniqueArgs} args - Arguments to find a Bed
     * @example
     * // Get one Bed
     * const bed = await prisma.bed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BedFindUniqueArgs>(args: SelectSubset<T, BedFindUniqueArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bed that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BedFindUniqueOrThrowArgs} args - Arguments to find a Bed
     * @example
     * // Get one Bed
     * const bed = await prisma.bed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BedFindUniqueOrThrowArgs>(args: SelectSubset<T, BedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedFindFirstArgs} args - Arguments to find a Bed
     * @example
     * // Get one Bed
     * const bed = await prisma.bed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BedFindFirstArgs>(args?: SelectSubset<T, BedFindFirstArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedFindFirstOrThrowArgs} args - Arguments to find a Bed
     * @example
     * // Get one Bed
     * const bed = await prisma.bed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BedFindFirstOrThrowArgs>(args?: SelectSubset<T, BedFindFirstOrThrowArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Beds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Beds
     * const beds = await prisma.bed.findMany()
     * 
     * // Get first 10 Beds
     * const beds = await prisma.bed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bedWithIdOnly = await prisma.bed.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BedFindManyArgs>(args?: SelectSubset<T, BedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bed.
     * @param {BedCreateArgs} args - Arguments to create a Bed.
     * @example
     * // Create one Bed
     * const Bed = await prisma.bed.create({
     *   data: {
     *     // ... data to create a Bed
     *   }
     * })
     * 
     */
    create<T extends BedCreateArgs>(args: SelectSubset<T, BedCreateArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Beds.
     * @param {BedCreateManyArgs} args - Arguments to create many Beds.
     * @example
     * // Create many Beds
     * const bed = await prisma.bed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BedCreateManyArgs>(args?: SelectSubset<T, BedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bed.
     * @param {BedDeleteArgs} args - Arguments to delete one Bed.
     * @example
     * // Delete one Bed
     * const Bed = await prisma.bed.delete({
     *   where: {
     *     // ... filter to delete one Bed
     *   }
     * })
     * 
     */
    delete<T extends BedDeleteArgs>(args: SelectSubset<T, BedDeleteArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bed.
     * @param {BedUpdateArgs} args - Arguments to update one Bed.
     * @example
     * // Update one Bed
     * const bed = await prisma.bed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BedUpdateArgs>(args: SelectSubset<T, BedUpdateArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Beds.
     * @param {BedDeleteManyArgs} args - Arguments to filter Beds to delete.
     * @example
     * // Delete a few Beds
     * const { count } = await prisma.bed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BedDeleteManyArgs>(args?: SelectSubset<T, BedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Beds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Beds
     * const bed = await prisma.bed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BedUpdateManyArgs>(args: SelectSubset<T, BedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bed.
     * @param {BedUpsertArgs} args - Arguments to update or create a Bed.
     * @example
     * // Update or create a Bed
     * const bed = await prisma.bed.upsert({
     *   create: {
     *     // ... data to create a Bed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bed we want to update
     *   }
     * })
     */
    upsert<T extends BedUpsertArgs>(args: SelectSubset<T, BedUpsertArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Beds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedCountArgs} args - Arguments to filter Beds to count.
     * @example
     * // Count the number of Beds
     * const count = await prisma.bed.count({
     *   where: {
     *     // ... the filter for the Beds we want to count
     *   }
     * })
    **/
    count<T extends BedCountArgs>(
      args?: Subset<T, BedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BedAggregateArgs>(args: Subset<T, BedAggregateArgs>): Prisma.PrismaPromise<GetBedAggregateType<T>>

    /**
     * Group by Bed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BedGroupByArgs['orderBy'] }
        : { orderBy?: BedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bed model
   */
  readonly fields: BedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Patient<T extends Bed$PatientArgs<ExtArgs> = {}>(args?: Subset<T, Bed$PatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bed model
   */
  interface BedFieldRefs {
    readonly id: FieldRef<"Bed", 'String'>
    readonly bedNumber: FieldRef<"Bed", 'String'>
    readonly bedStatus: FieldRef<"Bed", 'String'>
    readonly createdAt: FieldRef<"Bed", 'DateTime'>
    readonly updatedAt: FieldRef<"Bed", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bed findUnique
   */
  export type BedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * Filter, which Bed to fetch.
     */
    where: BedWhereUniqueInput
  }

  /**
   * Bed findUniqueOrThrow
   */
  export type BedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * Filter, which Bed to fetch.
     */
    where: BedWhereUniqueInput
  }

  /**
   * Bed findFirst
   */
  export type BedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * Filter, which Bed to fetch.
     */
    where?: BedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beds to fetch.
     */
    orderBy?: BedOrderByWithRelationInput | BedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beds.
     */
    cursor?: BedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beds.
     */
    distinct?: BedScalarFieldEnum | BedScalarFieldEnum[]
  }

  /**
   * Bed findFirstOrThrow
   */
  export type BedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * Filter, which Bed to fetch.
     */
    where?: BedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beds to fetch.
     */
    orderBy?: BedOrderByWithRelationInput | BedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beds.
     */
    cursor?: BedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beds.
     */
    distinct?: BedScalarFieldEnum | BedScalarFieldEnum[]
  }

  /**
   * Bed findMany
   */
  export type BedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * Filter, which Beds to fetch.
     */
    where?: BedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beds to fetch.
     */
    orderBy?: BedOrderByWithRelationInput | BedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Beds.
     */
    cursor?: BedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beds.
     */
    skip?: number
    distinct?: BedScalarFieldEnum | BedScalarFieldEnum[]
  }

  /**
   * Bed create
   */
  export type BedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * The data needed to create a Bed.
     */
    data: XOR<BedCreateInput, BedUncheckedCreateInput>
  }

  /**
   * Bed createMany
   */
  export type BedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Beds.
     */
    data: BedCreateManyInput | BedCreateManyInput[]
  }

  /**
   * Bed update
   */
  export type BedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * The data needed to update a Bed.
     */
    data: XOR<BedUpdateInput, BedUncheckedUpdateInput>
    /**
     * Choose, which Bed to update.
     */
    where: BedWhereUniqueInput
  }

  /**
   * Bed updateMany
   */
  export type BedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Beds.
     */
    data: XOR<BedUpdateManyMutationInput, BedUncheckedUpdateManyInput>
    /**
     * Filter which Beds to update
     */
    where?: BedWhereInput
    /**
     * Limit how many Beds to update.
     */
    limit?: number
  }

  /**
   * Bed upsert
   */
  export type BedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * The filter to search for the Bed to update in case it exists.
     */
    where: BedWhereUniqueInput
    /**
     * In case the Bed found by the `where` argument doesn't exist, create a new Bed with this data.
     */
    create: XOR<BedCreateInput, BedUncheckedCreateInput>
    /**
     * In case the Bed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BedUpdateInput, BedUncheckedUpdateInput>
  }

  /**
   * Bed delete
   */
  export type BedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    /**
     * Filter which Bed to delete.
     */
    where: BedWhereUniqueInput
  }

  /**
   * Bed deleteMany
   */
  export type BedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Beds to delete
     */
    where?: BedWhereInput
    /**
     * Limit how many Beds to delete.
     */
    limit?: number
  }

  /**
   * Bed.Patient
   */
  export type Bed$PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Bed without action
   */
  export type BedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
  }


  /**
   * Model Journey
   */

  export type AggregateJourney = {
    _count: JourneyCountAggregateOutputType | null
    _min: JourneyMinAggregateOutputType | null
    _max: JourneyMaxAggregateOutputType | null
  }

  export type JourneyMinAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    firstCallTime: Date | null
    vitalTime: Date | null
    assignDeptTime: Date | null
    secondCallTime: Date | null
    beginTime: Date | null
    endTime: Date | null
    patientId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JourneyMaxAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    firstCallTime: Date | null
    vitalTime: Date | null
    assignDeptTime: Date | null
    secondCallTime: Date | null
    beginTime: Date | null
    endTime: Date | null
    patientId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JourneyCountAggregateOutputType = {
    id: number
    isActive: number
    firstCallTime: number
    vitalTime: number
    assignDeptTime: number
    secondCallTime: number
    beginTime: number
    endTime: number
    patientId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JourneyMinAggregateInputType = {
    id?: true
    isActive?: true
    firstCallTime?: true
    vitalTime?: true
    assignDeptTime?: true
    secondCallTime?: true
    beginTime?: true
    endTime?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JourneyMaxAggregateInputType = {
    id?: true
    isActive?: true
    firstCallTime?: true
    vitalTime?: true
    assignDeptTime?: true
    secondCallTime?: true
    beginTime?: true
    endTime?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JourneyCountAggregateInputType = {
    id?: true
    isActive?: true
    firstCallTime?: true
    vitalTime?: true
    assignDeptTime?: true
    secondCallTime?: true
    beginTime?: true
    endTime?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JourneyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Journey to aggregate.
     */
    where?: JourneyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journeys to fetch.
     */
    orderBy?: JourneyOrderByWithRelationInput | JourneyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JourneyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Journeys
    **/
    _count?: true | JourneyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JourneyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JourneyMaxAggregateInputType
  }

  export type GetJourneyAggregateType<T extends JourneyAggregateArgs> = {
        [P in keyof T & keyof AggregateJourney]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJourney[P]>
      : GetScalarType<T[P], AggregateJourney[P]>
  }




  export type JourneyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyWhereInput
    orderBy?: JourneyOrderByWithAggregationInput | JourneyOrderByWithAggregationInput[]
    by: JourneyScalarFieldEnum[] | JourneyScalarFieldEnum
    having?: JourneyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JourneyCountAggregateInputType | true
    _min?: JourneyMinAggregateInputType
    _max?: JourneyMaxAggregateInputType
  }

  export type JourneyGroupByOutputType = {
    id: string
    isActive: boolean | null
    firstCallTime: Date | null
    vitalTime: Date | null
    assignDeptTime: Date | null
    secondCallTime: Date | null
    beginTime: Date | null
    endTime: Date | null
    patientId: string | null
    createdAt: Date
    updatedAt: Date
    _count: JourneyCountAggregateOutputType | null
    _min: JourneyMinAggregateOutputType | null
    _max: JourneyMaxAggregateOutputType | null
  }

  type GetJourneyGroupByPayload<T extends JourneyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JourneyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JourneyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JourneyGroupByOutputType[P]>
            : GetScalarType<T[P], JourneyGroupByOutputType[P]>
        }
      >
    >


  export type JourneySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    firstCallTime?: boolean
    vitalTime?: boolean
    assignDeptTime?: boolean
    secondCallTime?: boolean
    beginTime?: boolean
    endTime?: boolean
    patientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Patient?: boolean | Journey$PatientArgs<ExtArgs>
  }, ExtArgs["result"]["journey"]>



  export type JourneySelectScalar = {
    id?: boolean
    isActive?: boolean
    firstCallTime?: boolean
    vitalTime?: boolean
    assignDeptTime?: boolean
    secondCallTime?: boolean
    beginTime?: boolean
    endTime?: boolean
    patientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JourneyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isActive" | "firstCallTime" | "vitalTime" | "assignDeptTime" | "secondCallTime" | "beginTime" | "endTime" | "patientId" | "createdAt" | "updatedAt", ExtArgs["result"]["journey"]>
  export type JourneyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | Journey$PatientArgs<ExtArgs>
  }

  export type $JourneyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Journey"
    objects: {
      Patient: Prisma.$PatientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isActive: boolean | null
      firstCallTime: Date | null
      vitalTime: Date | null
      assignDeptTime: Date | null
      secondCallTime: Date | null
      beginTime: Date | null
      endTime: Date | null
      patientId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["journey"]>
    composites: {}
  }

  type JourneyGetPayload<S extends boolean | null | undefined | JourneyDefaultArgs> = $Result.GetResult<Prisma.$JourneyPayload, S>

  type JourneyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JourneyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JourneyCountAggregateInputType | true
    }

  export interface JourneyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Journey'], meta: { name: 'Journey' } }
    /**
     * Find zero or one Journey that matches the filter.
     * @param {JourneyFindUniqueArgs} args - Arguments to find a Journey
     * @example
     * // Get one Journey
     * const journey = await prisma.journey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JourneyFindUniqueArgs>(args: SelectSubset<T, JourneyFindUniqueArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Journey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JourneyFindUniqueOrThrowArgs} args - Arguments to find a Journey
     * @example
     * // Get one Journey
     * const journey = await prisma.journey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JourneyFindUniqueOrThrowArgs>(args: SelectSubset<T, JourneyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Journey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyFindFirstArgs} args - Arguments to find a Journey
     * @example
     * // Get one Journey
     * const journey = await prisma.journey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JourneyFindFirstArgs>(args?: SelectSubset<T, JourneyFindFirstArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Journey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyFindFirstOrThrowArgs} args - Arguments to find a Journey
     * @example
     * // Get one Journey
     * const journey = await prisma.journey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JourneyFindFirstOrThrowArgs>(args?: SelectSubset<T, JourneyFindFirstOrThrowArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Journeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Journeys
     * const journeys = await prisma.journey.findMany()
     * 
     * // Get first 10 Journeys
     * const journeys = await prisma.journey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journeyWithIdOnly = await prisma.journey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JourneyFindManyArgs>(args?: SelectSubset<T, JourneyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Journey.
     * @param {JourneyCreateArgs} args - Arguments to create a Journey.
     * @example
     * // Create one Journey
     * const Journey = await prisma.journey.create({
     *   data: {
     *     // ... data to create a Journey
     *   }
     * })
     * 
     */
    create<T extends JourneyCreateArgs>(args: SelectSubset<T, JourneyCreateArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Journeys.
     * @param {JourneyCreateManyArgs} args - Arguments to create many Journeys.
     * @example
     * // Create many Journeys
     * const journey = await prisma.journey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JourneyCreateManyArgs>(args?: SelectSubset<T, JourneyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Journey.
     * @param {JourneyDeleteArgs} args - Arguments to delete one Journey.
     * @example
     * // Delete one Journey
     * const Journey = await prisma.journey.delete({
     *   where: {
     *     // ... filter to delete one Journey
     *   }
     * })
     * 
     */
    delete<T extends JourneyDeleteArgs>(args: SelectSubset<T, JourneyDeleteArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Journey.
     * @param {JourneyUpdateArgs} args - Arguments to update one Journey.
     * @example
     * // Update one Journey
     * const journey = await prisma.journey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JourneyUpdateArgs>(args: SelectSubset<T, JourneyUpdateArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Journeys.
     * @param {JourneyDeleteManyArgs} args - Arguments to filter Journeys to delete.
     * @example
     * // Delete a few Journeys
     * const { count } = await prisma.journey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JourneyDeleteManyArgs>(args?: SelectSubset<T, JourneyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Journeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Journeys
     * const journey = await prisma.journey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JourneyUpdateManyArgs>(args: SelectSubset<T, JourneyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Journey.
     * @param {JourneyUpsertArgs} args - Arguments to update or create a Journey.
     * @example
     * // Update or create a Journey
     * const journey = await prisma.journey.upsert({
     *   create: {
     *     // ... data to create a Journey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Journey we want to update
     *   }
     * })
     */
    upsert<T extends JourneyUpsertArgs>(args: SelectSubset<T, JourneyUpsertArgs<ExtArgs>>): Prisma__JourneyClient<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Journeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyCountArgs} args - Arguments to filter Journeys to count.
     * @example
     * // Count the number of Journeys
     * const count = await prisma.journey.count({
     *   where: {
     *     // ... the filter for the Journeys we want to count
     *   }
     * })
    **/
    count<T extends JourneyCountArgs>(
      args?: Subset<T, JourneyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JourneyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Journey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JourneyAggregateArgs>(args: Subset<T, JourneyAggregateArgs>): Prisma.PrismaPromise<GetJourneyAggregateType<T>>

    /**
     * Group by Journey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JourneyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JourneyGroupByArgs['orderBy'] }
        : { orderBy?: JourneyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JourneyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJourneyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Journey model
   */
  readonly fields: JourneyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Journey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JourneyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Patient<T extends Journey$PatientArgs<ExtArgs> = {}>(args?: Subset<T, Journey$PatientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Journey model
   */
  interface JourneyFieldRefs {
    readonly id: FieldRef<"Journey", 'String'>
    readonly isActive: FieldRef<"Journey", 'Boolean'>
    readonly firstCallTime: FieldRef<"Journey", 'DateTime'>
    readonly vitalTime: FieldRef<"Journey", 'DateTime'>
    readonly assignDeptTime: FieldRef<"Journey", 'DateTime'>
    readonly secondCallTime: FieldRef<"Journey", 'DateTime'>
    readonly beginTime: FieldRef<"Journey", 'DateTime'>
    readonly endTime: FieldRef<"Journey", 'DateTime'>
    readonly patientId: FieldRef<"Journey", 'String'>
    readonly createdAt: FieldRef<"Journey", 'DateTime'>
    readonly updatedAt: FieldRef<"Journey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Journey findUnique
   */
  export type JourneyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * Filter, which Journey to fetch.
     */
    where: JourneyWhereUniqueInput
  }

  /**
   * Journey findUniqueOrThrow
   */
  export type JourneyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * Filter, which Journey to fetch.
     */
    where: JourneyWhereUniqueInput
  }

  /**
   * Journey findFirst
   */
  export type JourneyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * Filter, which Journey to fetch.
     */
    where?: JourneyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journeys to fetch.
     */
    orderBy?: JourneyOrderByWithRelationInput | JourneyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Journeys.
     */
    cursor?: JourneyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Journeys.
     */
    distinct?: JourneyScalarFieldEnum | JourneyScalarFieldEnum[]
  }

  /**
   * Journey findFirstOrThrow
   */
  export type JourneyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * Filter, which Journey to fetch.
     */
    where?: JourneyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journeys to fetch.
     */
    orderBy?: JourneyOrderByWithRelationInput | JourneyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Journeys.
     */
    cursor?: JourneyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Journeys.
     */
    distinct?: JourneyScalarFieldEnum | JourneyScalarFieldEnum[]
  }

  /**
   * Journey findMany
   */
  export type JourneyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * Filter, which Journeys to fetch.
     */
    where?: JourneyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journeys to fetch.
     */
    orderBy?: JourneyOrderByWithRelationInput | JourneyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Journeys.
     */
    cursor?: JourneyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journeys.
     */
    skip?: number
    distinct?: JourneyScalarFieldEnum | JourneyScalarFieldEnum[]
  }

  /**
   * Journey create
   */
  export type JourneyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * The data needed to create a Journey.
     */
    data: XOR<JourneyCreateInput, JourneyUncheckedCreateInput>
  }

  /**
   * Journey createMany
   */
  export type JourneyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Journeys.
     */
    data: JourneyCreateManyInput | JourneyCreateManyInput[]
  }

  /**
   * Journey update
   */
  export type JourneyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * The data needed to update a Journey.
     */
    data: XOR<JourneyUpdateInput, JourneyUncheckedUpdateInput>
    /**
     * Choose, which Journey to update.
     */
    where: JourneyWhereUniqueInput
  }

  /**
   * Journey updateMany
   */
  export type JourneyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Journeys.
     */
    data: XOR<JourneyUpdateManyMutationInput, JourneyUncheckedUpdateManyInput>
    /**
     * Filter which Journeys to update
     */
    where?: JourneyWhereInput
    /**
     * Limit how many Journeys to update.
     */
    limit?: number
  }

  /**
   * Journey upsert
   */
  export type JourneyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * The filter to search for the Journey to update in case it exists.
     */
    where: JourneyWhereUniqueInput
    /**
     * In case the Journey found by the `where` argument doesn't exist, create a new Journey with this data.
     */
    create: XOR<JourneyCreateInput, JourneyUncheckedCreateInput>
    /**
     * In case the Journey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JourneyUpdateInput, JourneyUncheckedUpdateInput>
  }

  /**
   * Journey delete
   */
  export type JourneyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    /**
     * Filter which Journey to delete.
     */
    where: JourneyWhereUniqueInput
  }

  /**
   * Journey deleteMany
   */
  export type JourneyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Journeys to delete
     */
    where?: JourneyWhereInput
    /**
     * Limit how many Journeys to delete.
     */
    limit?: number
  }

  /**
   * Journey.Patient
   */
  export type Journey$PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * Journey without action
   */
  export type JourneyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    age: number | null
    state: number | null
    departmentId: Decimal | null
    ticketNumber: number | null
  }

  export type PatientSumAggregateOutputType = {
    age: number | null
    state: number | null
    departmentId: Decimal | null
    ticketNumber: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    name: string | null
    nationality: string | null
    sex: string | null
    idNumber: string | null
    age: number | null
    mobileNumber: string | null
    status: string | null
    cheifComplaint: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ticket: string | null
    userId: string | null
    callPatient: boolean | null
    state: number | null
    barcode: string | null
    departmentId: Decimal | null
    ticketNumber: number | null
    bedId: string | null
    beginTime: Date | null
    endTime: Date | null
    birthDate: Date | null
    bloodGroup: string | null
    mrnNumber: string | null
    remarks: string | null
    assignDeptTime: Date | null
    firstCallTime: Date | null
    secondCallTime: Date | null
    vitalTime: Date | null
    registrationDate: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    name: string | null
    nationality: string | null
    sex: string | null
    idNumber: string | null
    age: number | null
    mobileNumber: string | null
    status: string | null
    cheifComplaint: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ticket: string | null
    userId: string | null
    callPatient: boolean | null
    state: number | null
    barcode: string | null
    departmentId: Decimal | null
    ticketNumber: number | null
    bedId: string | null
    beginTime: Date | null
    endTime: Date | null
    birthDate: Date | null
    bloodGroup: string | null
    mrnNumber: string | null
    remarks: string | null
    assignDeptTime: Date | null
    firstCallTime: Date | null
    secondCallTime: Date | null
    vitalTime: Date | null
    registrationDate: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    name: number
    nationality: number
    sex: number
    idNumber: number
    age: number
    mobileNumber: number
    status: number
    cheifComplaint: number
    createdAt: number
    updatedAt: number
    ticket: number
    userId: number
    callPatient: number
    state: number
    barcode: number
    departmentId: number
    ticketNumber: number
    bedId: number
    beginTime: number
    endTime: number
    birthDate: number
    bloodGroup: number
    mrnNumber: number
    remarks: number
    assignDeptTime: number
    firstCallTime: number
    secondCallTime: number
    vitalTime: number
    registrationDate: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    age?: true
    state?: true
    departmentId?: true
    ticketNumber?: true
  }

  export type PatientSumAggregateInputType = {
    age?: true
    state?: true
    departmentId?: true
    ticketNumber?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    name?: true
    nationality?: true
    sex?: true
    idNumber?: true
    age?: true
    mobileNumber?: true
    status?: true
    cheifComplaint?: true
    createdAt?: true
    updatedAt?: true
    ticket?: true
    userId?: true
    callPatient?: true
    state?: true
    barcode?: true
    departmentId?: true
    ticketNumber?: true
    bedId?: true
    beginTime?: true
    endTime?: true
    birthDate?: true
    bloodGroup?: true
    mrnNumber?: true
    remarks?: true
    assignDeptTime?: true
    firstCallTime?: true
    secondCallTime?: true
    vitalTime?: true
    registrationDate?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    name?: true
    nationality?: true
    sex?: true
    idNumber?: true
    age?: true
    mobileNumber?: true
    status?: true
    cheifComplaint?: true
    createdAt?: true
    updatedAt?: true
    ticket?: true
    userId?: true
    callPatient?: true
    state?: true
    barcode?: true
    departmentId?: true
    ticketNumber?: true
    bedId?: true
    beginTime?: true
    endTime?: true
    birthDate?: true
    bloodGroup?: true
    mrnNumber?: true
    remarks?: true
    assignDeptTime?: true
    firstCallTime?: true
    secondCallTime?: true
    vitalTime?: true
    registrationDate?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    name?: true
    nationality?: true
    sex?: true
    idNumber?: true
    age?: true
    mobileNumber?: true
    status?: true
    cheifComplaint?: true
    createdAt?: true
    updatedAt?: true
    ticket?: true
    userId?: true
    callPatient?: true
    state?: true
    barcode?: true
    departmentId?: true
    ticketNumber?: true
    bedId?: true
    beginTime?: true
    endTime?: true
    birthDate?: true
    bloodGroup?: true
    mrnNumber?: true
    remarks?: true
    assignDeptTime?: true
    firstCallTime?: true
    secondCallTime?: true
    vitalTime?: true
    registrationDate?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    name: string | null
    nationality: string | null
    sex: string | null
    idNumber: string | null
    age: number | null
    mobileNumber: string | null
    status: string | null
    cheifComplaint: string | null
    createdAt: Date
    updatedAt: Date
    ticket: string | null
    userId: string | null
    callPatient: boolean | null
    state: number | null
    barcode: string | null
    departmentId: Decimal | null
    ticketNumber: number | null
    bedId: string | null
    beginTime: Date | null
    endTime: Date | null
    birthDate: Date | null
    bloodGroup: string | null
    mrnNumber: string | null
    remarks: string | null
    assignDeptTime: Date | null
    firstCallTime: Date | null
    secondCallTime: Date | null
    vitalTime: Date | null
    registrationDate: Date | null
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nationality?: boolean
    sex?: boolean
    idNumber?: boolean
    age?: boolean
    mobileNumber?: boolean
    status?: boolean
    cheifComplaint?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ticket?: boolean
    userId?: boolean
    callPatient?: boolean
    state?: boolean
    barcode?: boolean
    departmentId?: boolean
    ticketNumber?: boolean
    bedId?: boolean
    beginTime?: boolean
    endTime?: boolean
    birthDate?: boolean
    bloodGroup?: boolean
    mrnNumber?: boolean
    remarks?: boolean
    assignDeptTime?: boolean
    firstCallTime?: boolean
    secondCallTime?: boolean
    vitalTime?: boolean
    registrationDate?: boolean
    Journey?: boolean | Patient$JourneyArgs<ExtArgs>
    Bed?: boolean | Patient$BedArgs<ExtArgs>
    tblDepartment?: boolean | Patient$tblDepartmentArgs<ExtArgs>
    User?: boolean | Patient$UserArgs<ExtArgs>
    VitalSign?: boolean | Patient$VitalSignArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>



  export type PatientSelectScalar = {
    id?: boolean
    name?: boolean
    nationality?: boolean
    sex?: boolean
    idNumber?: boolean
    age?: boolean
    mobileNumber?: boolean
    status?: boolean
    cheifComplaint?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ticket?: boolean
    userId?: boolean
    callPatient?: boolean
    state?: boolean
    barcode?: boolean
    departmentId?: boolean
    ticketNumber?: boolean
    bedId?: boolean
    beginTime?: boolean
    endTime?: boolean
    birthDate?: boolean
    bloodGroup?: boolean
    mrnNumber?: boolean
    remarks?: boolean
    assignDeptTime?: boolean
    firstCallTime?: boolean
    secondCallTime?: boolean
    vitalTime?: boolean
    registrationDate?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "nationality" | "sex" | "idNumber" | "age" | "mobileNumber" | "status" | "cheifComplaint" | "createdAt" | "updatedAt" | "ticket" | "userId" | "callPatient" | "state" | "barcode" | "departmentId" | "ticketNumber" | "bedId" | "beginTime" | "endTime" | "birthDate" | "bloodGroup" | "mrnNumber" | "remarks" | "assignDeptTime" | "firstCallTime" | "secondCallTime" | "vitalTime" | "registrationDate", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Journey?: boolean | Patient$JourneyArgs<ExtArgs>
    Bed?: boolean | Patient$BedArgs<ExtArgs>
    tblDepartment?: boolean | Patient$tblDepartmentArgs<ExtArgs>
    User?: boolean | Patient$UserArgs<ExtArgs>
    VitalSign?: boolean | Patient$VitalSignArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      Journey: Prisma.$JourneyPayload<ExtArgs>[]
      Bed: Prisma.$BedPayload<ExtArgs> | null
      tblDepartment: Prisma.$tblDepartmentPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs> | null
      VitalSign: Prisma.$VitalSignPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      nationality: string | null
      sex: string | null
      idNumber: string | null
      age: number | null
      mobileNumber: string | null
      status: string | null
      cheifComplaint: string | null
      createdAt: Date
      updatedAt: Date
      ticket: string | null
      userId: string | null
      callPatient: boolean | null
      state: number | null
      barcode: string | null
      departmentId: Prisma.Decimal | null
      ticketNumber: number | null
      bedId: string | null
      beginTime: Date | null
      endTime: Date | null
      birthDate: Date | null
      bloodGroup: string | null
      mrnNumber: string | null
      remarks: string | null
      assignDeptTime: Date | null
      firstCallTime: Date | null
      secondCallTime: Date | null
      vitalTime: Date | null
      registrationDate: Date | null
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Journey<T extends Patient$JourneyArgs<ExtArgs> = {}>(args?: Subset<T, Patient$JourneyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Bed<T extends Patient$BedArgs<ExtArgs> = {}>(args?: Subset<T, Patient$BedArgs<ExtArgs>>): Prisma__BedClient<$Result.GetResult<Prisma.$BedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tblDepartment<T extends Patient$tblDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, Patient$tblDepartmentArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    User<T extends Patient$UserArgs<ExtArgs> = {}>(args?: Subset<T, Patient$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    VitalSign<T extends Patient$VitalSignArgs<ExtArgs> = {}>(args?: Subset<T, Patient$VitalSignArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly nationality: FieldRef<"Patient", 'String'>
    readonly sex: FieldRef<"Patient", 'String'>
    readonly idNumber: FieldRef<"Patient", 'String'>
    readonly age: FieldRef<"Patient", 'Int'>
    readonly mobileNumber: FieldRef<"Patient", 'String'>
    readonly status: FieldRef<"Patient", 'String'>
    readonly cheifComplaint: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
    readonly ticket: FieldRef<"Patient", 'String'>
    readonly userId: FieldRef<"Patient", 'String'>
    readonly callPatient: FieldRef<"Patient", 'Boolean'>
    readonly state: FieldRef<"Patient", 'Int'>
    readonly barcode: FieldRef<"Patient", 'String'>
    readonly departmentId: FieldRef<"Patient", 'Decimal'>
    readonly ticketNumber: FieldRef<"Patient", 'Int'>
    readonly bedId: FieldRef<"Patient", 'String'>
    readonly beginTime: FieldRef<"Patient", 'DateTime'>
    readonly endTime: FieldRef<"Patient", 'DateTime'>
    readonly birthDate: FieldRef<"Patient", 'DateTime'>
    readonly bloodGroup: FieldRef<"Patient", 'String'>
    readonly mrnNumber: FieldRef<"Patient", 'String'>
    readonly remarks: FieldRef<"Patient", 'String'>
    readonly assignDeptTime: FieldRef<"Patient", 'DateTime'>
    readonly firstCallTime: FieldRef<"Patient", 'DateTime'>
    readonly secondCallTime: FieldRef<"Patient", 'DateTime'>
    readonly vitalTime: FieldRef<"Patient", 'DateTime'>
    readonly registrationDate: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.Journey
   */
  export type Patient$JourneyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journey
     */
    select?: JourneySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journey
     */
    omit?: JourneyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyInclude<ExtArgs> | null
    where?: JourneyWhereInput
    orderBy?: JourneyOrderByWithRelationInput | JourneyOrderByWithRelationInput[]
    cursor?: JourneyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JourneyScalarFieldEnum | JourneyScalarFieldEnum[]
  }

  /**
   * Patient.Bed
   */
  export type Patient$BedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bed
     */
    select?: BedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bed
     */
    omit?: BedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedInclude<ExtArgs> | null
    where?: BedWhereInput
  }

  /**
   * Patient.tblDepartment
   */
  export type Patient$tblDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    where?: tblDepartmentWhereInput
  }

  /**
   * Patient.User
   */
  export type Patient$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Patient.VitalSign
   */
  export type Patient$VitalSignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    where?: VitalSignWhereInput
    orderBy?: VitalSignOrderByWithRelationInput | VitalSignOrderByWithRelationInput[]
    cursor?: VitalSignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VitalSignScalarFieldEnum | VitalSignScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model PatientCount
   */

  export type AggregatePatientCount = {
    _count: PatientCountCountAggregateOutputType | null
    _avg: PatientCountAvgAggregateOutputType | null
    _sum: PatientCountSumAggregateOutputType | null
    _min: PatientCountMinAggregateOutputType | null
    _max: PatientCountMaxAggregateOutputType | null
  }

  export type PatientCountAvgAggregateOutputType = {
    counter: number | null
  }

  export type PatientCountSumAggregateOutputType = {
    counter: number | null
  }

  export type PatientCountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    counter: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientCountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    counter: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientCountCountAggregateOutputType = {
    id: number
    userId: number
    counter: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientCountAvgAggregateInputType = {
    counter?: true
  }

  export type PatientCountSumAggregateInputType = {
    counter?: true
  }

  export type PatientCountMinAggregateInputType = {
    id?: true
    userId?: true
    counter?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientCountMaxAggregateInputType = {
    id?: true
    userId?: true
    counter?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientCountCountAggregateInputType = {
    id?: true
    userId?: true
    counter?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientCountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientCount to aggregate.
     */
    where?: PatientCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCounts to fetch.
     */
    orderBy?: PatientCountOrderByWithRelationInput | PatientCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientCounts
    **/
    _count?: true | PatientCountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientCountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientCountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientCountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientCountMaxAggregateInputType
  }

  export type GetPatientCountAggregateType<T extends PatientCountAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientCount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientCount[P]>
      : GetScalarType<T[P], AggregatePatientCount[P]>
  }




  export type PatientCountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientCountWhereInput
    orderBy?: PatientCountOrderByWithAggregationInput | PatientCountOrderByWithAggregationInput[]
    by: PatientCountScalarFieldEnum[] | PatientCountScalarFieldEnum
    having?: PatientCountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountCountAggregateInputType | true
    _avg?: PatientCountAvgAggregateInputType
    _sum?: PatientCountSumAggregateInputType
    _min?: PatientCountMinAggregateInputType
    _max?: PatientCountMaxAggregateInputType
  }

  export type PatientCountGroupByOutputType = {
    id: string
    userId: string | null
    counter: number | null
    createdAt: Date
    updatedAt: Date
    _count: PatientCountCountAggregateOutputType | null
    _avg: PatientCountAvgAggregateOutputType | null
    _sum: PatientCountSumAggregateOutputType | null
    _min: PatientCountMinAggregateOutputType | null
    _max: PatientCountMaxAggregateOutputType | null
  }

  type GetPatientCountGroupByPayload<T extends PatientCountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientCountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientCountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientCountGroupByOutputType[P]>
            : GetScalarType<T[P], PatientCountGroupByOutputType[P]>
        }
      >
    >


  export type PatientCountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    counter?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | PatientCount$UserArgs<ExtArgs>
  }, ExtArgs["result"]["patientCount"]>



  export type PatientCountSelectScalar = {
    id?: boolean
    userId?: boolean
    counter?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientCountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "counter" | "createdAt" | "updatedAt", ExtArgs["result"]["patientCount"]>
  export type PatientCountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | PatientCount$UserArgs<ExtArgs>
  }

  export type $PatientCountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientCount"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      counter: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patientCount"]>
    composites: {}
  }

  type PatientCountGetPayload<S extends boolean | null | undefined | PatientCountDefaultArgs> = $Result.GetResult<Prisma.$PatientCountPayload, S>

  type PatientCountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientCountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountCountAggregateInputType | true
    }

  export interface PatientCountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientCount'], meta: { name: 'PatientCount' } }
    /**
     * Find zero or one PatientCount that matches the filter.
     * @param {PatientCountFindUniqueArgs} args - Arguments to find a PatientCount
     * @example
     * // Get one PatientCount
     * const patientCount = await prisma.patientCount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientCountFindUniqueArgs>(args: SelectSubset<T, PatientCountFindUniqueArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientCount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientCountFindUniqueOrThrowArgs} args - Arguments to find a PatientCount
     * @example
     * // Get one PatientCount
     * const patientCount = await prisma.patientCount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientCountFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientCountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientCount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountFindFirstArgs} args - Arguments to find a PatientCount
     * @example
     * // Get one PatientCount
     * const patientCount = await prisma.patientCount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientCountFindFirstArgs>(args?: SelectSubset<T, PatientCountFindFirstArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientCount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountFindFirstOrThrowArgs} args - Arguments to find a PatientCount
     * @example
     * // Get one PatientCount
     * const patientCount = await prisma.patientCount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientCountFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientCountFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientCounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientCounts
     * const patientCounts = await prisma.patientCount.findMany()
     * 
     * // Get first 10 PatientCounts
     * const patientCounts = await prisma.patientCount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientCountWithIdOnly = await prisma.patientCount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientCountFindManyArgs>(args?: SelectSubset<T, PatientCountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientCount.
     * @param {PatientCountCreateArgs} args - Arguments to create a PatientCount.
     * @example
     * // Create one PatientCount
     * const PatientCount = await prisma.patientCount.create({
     *   data: {
     *     // ... data to create a PatientCount
     *   }
     * })
     * 
     */
    create<T extends PatientCountCreateArgs>(args: SelectSubset<T, PatientCountCreateArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientCounts.
     * @param {PatientCountCreateManyArgs} args - Arguments to create many PatientCounts.
     * @example
     * // Create many PatientCounts
     * const patientCount = await prisma.patientCount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCountCreateManyArgs>(args?: SelectSubset<T, PatientCountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PatientCount.
     * @param {PatientCountDeleteArgs} args - Arguments to delete one PatientCount.
     * @example
     * // Delete one PatientCount
     * const PatientCount = await prisma.patientCount.delete({
     *   where: {
     *     // ... filter to delete one PatientCount
     *   }
     * })
     * 
     */
    delete<T extends PatientCountDeleteArgs>(args: SelectSubset<T, PatientCountDeleteArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientCount.
     * @param {PatientCountUpdateArgs} args - Arguments to update one PatientCount.
     * @example
     * // Update one PatientCount
     * const patientCount = await prisma.patientCount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientCountUpdateArgs>(args: SelectSubset<T, PatientCountUpdateArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientCounts.
     * @param {PatientCountDeleteManyArgs} args - Arguments to filter PatientCounts to delete.
     * @example
     * // Delete a few PatientCounts
     * const { count } = await prisma.patientCount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientCountDeleteManyArgs>(args?: SelectSubset<T, PatientCountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientCounts
     * const patientCount = await prisma.patientCount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientCountUpdateManyArgs>(args: SelectSubset<T, PatientCountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientCount.
     * @param {PatientCountUpsertArgs} args - Arguments to update or create a PatientCount.
     * @example
     * // Update or create a PatientCount
     * const patientCount = await prisma.patientCount.upsert({
     *   create: {
     *     // ... data to create a PatientCount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientCount we want to update
     *   }
     * })
     */
    upsert<T extends PatientCountUpsertArgs>(args: SelectSubset<T, PatientCountUpsertArgs<ExtArgs>>): Prisma__PatientCountClient<$Result.GetResult<Prisma.$PatientCountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountCountArgs} args - Arguments to filter PatientCounts to count.
     * @example
     * // Count the number of PatientCounts
     * const count = await prisma.patientCount.count({
     *   where: {
     *     // ... the filter for the PatientCounts we want to count
     *   }
     * })
    **/
    count<T extends PatientCountCountArgs>(
      args?: Subset<T, PatientCountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientCountAggregateArgs>(args: Subset<T, PatientCountAggregateArgs>): Prisma.PrismaPromise<GetPatientCountAggregateType<T>>

    /**
     * Group by PatientCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientCountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientCountGroupByArgs['orderBy'] }
        : { orderBy?: PatientCountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientCountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientCountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientCount model
   */
  readonly fields: PatientCountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientCount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientCountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends PatientCount$UserArgs<ExtArgs> = {}>(args?: Subset<T, PatientCount$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientCount model
   */
  interface PatientCountFieldRefs {
    readonly id: FieldRef<"PatientCount", 'String'>
    readonly userId: FieldRef<"PatientCount", 'String'>
    readonly counter: FieldRef<"PatientCount", 'Int'>
    readonly createdAt: FieldRef<"PatientCount", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientCount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientCount findUnique
   */
  export type PatientCountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * Filter, which PatientCount to fetch.
     */
    where: PatientCountWhereUniqueInput
  }

  /**
   * PatientCount findUniqueOrThrow
   */
  export type PatientCountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * Filter, which PatientCount to fetch.
     */
    where: PatientCountWhereUniqueInput
  }

  /**
   * PatientCount findFirst
   */
  export type PatientCountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * Filter, which PatientCount to fetch.
     */
    where?: PatientCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCounts to fetch.
     */
    orderBy?: PatientCountOrderByWithRelationInput | PatientCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientCounts.
     */
    cursor?: PatientCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientCounts.
     */
    distinct?: PatientCountScalarFieldEnum | PatientCountScalarFieldEnum[]
  }

  /**
   * PatientCount findFirstOrThrow
   */
  export type PatientCountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * Filter, which PatientCount to fetch.
     */
    where?: PatientCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCounts to fetch.
     */
    orderBy?: PatientCountOrderByWithRelationInput | PatientCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientCounts.
     */
    cursor?: PatientCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientCounts.
     */
    distinct?: PatientCountScalarFieldEnum | PatientCountScalarFieldEnum[]
  }

  /**
   * PatientCount findMany
   */
  export type PatientCountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * Filter, which PatientCounts to fetch.
     */
    where?: PatientCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCounts to fetch.
     */
    orderBy?: PatientCountOrderByWithRelationInput | PatientCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientCounts.
     */
    cursor?: PatientCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCounts.
     */
    skip?: number
    distinct?: PatientCountScalarFieldEnum | PatientCountScalarFieldEnum[]
  }

  /**
   * PatientCount create
   */
  export type PatientCountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientCount.
     */
    data: XOR<PatientCountCreateInput, PatientCountUncheckedCreateInput>
  }

  /**
   * PatientCount createMany
   */
  export type PatientCountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientCounts.
     */
    data: PatientCountCreateManyInput | PatientCountCreateManyInput[]
  }

  /**
   * PatientCount update
   */
  export type PatientCountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientCount.
     */
    data: XOR<PatientCountUpdateInput, PatientCountUncheckedUpdateInput>
    /**
     * Choose, which PatientCount to update.
     */
    where: PatientCountWhereUniqueInput
  }

  /**
   * PatientCount updateMany
   */
  export type PatientCountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientCounts.
     */
    data: XOR<PatientCountUpdateManyMutationInput, PatientCountUncheckedUpdateManyInput>
    /**
     * Filter which PatientCounts to update
     */
    where?: PatientCountWhereInput
    /**
     * Limit how many PatientCounts to update.
     */
    limit?: number
  }

  /**
   * PatientCount upsert
   */
  export type PatientCountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientCount to update in case it exists.
     */
    where: PatientCountWhereUniqueInput
    /**
     * In case the PatientCount found by the `where` argument doesn't exist, create a new PatientCount with this data.
     */
    create: XOR<PatientCountCreateInput, PatientCountUncheckedCreateInput>
    /**
     * In case the PatientCount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientCountUpdateInput, PatientCountUncheckedUpdateInput>
  }

  /**
   * PatientCount delete
   */
  export type PatientCountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
    /**
     * Filter which PatientCount to delete.
     */
    where: PatientCountWhereUniqueInput
  }

  /**
   * PatientCount deleteMany
   */
  export type PatientCountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientCounts to delete
     */
    where?: PatientCountWhereInput
    /**
     * Limit how many PatientCounts to delete.
     */
    limit?: number
  }

  /**
   * PatientCount.User
   */
  export type PatientCount$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * PatientCount without action
   */
  export type PatientCountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCount
     */
    select?: PatientCountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCount
     */
    omit?: PatientCountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCountInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    token: string
    userId: string | null
    expiresAt: Date
    createdAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    User?: boolean | RefreshToken$UserArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>



  export type RefreshTokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type RefreshTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "userId" | "expiresAt" | "createdAt", ExtArgs["result"]["refreshToken"]>
  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | RefreshToken$UserArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string | null
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends RefreshToken$UserArgs<ExtArgs> = {}>(args?: Subset<T, RefreshToken$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to update.
     */
    limit?: number
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
    /**
     * Limit how many RefreshTokens to delete.
     */
    limit?: number
  }

  /**
   * RefreshToken.User
   */
  export type RefreshToken$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
    route: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
    route: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    description: number
    route: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    description?: true
    route?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    description?: true
    route?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    description?: true
    route?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    description: string | null
    route: string | null
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    route?: boolean
    User?: boolean | Role$UserArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>



  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    route?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "description" | "route", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Role$UserArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      description: string | null
      route: string | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Role$UserArgs<ExtArgs> = {}>(args?: Subset<T, Role$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
    readonly description: FieldRef<"Role", 'String'>
    readonly route: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.User
   */
  export type Role$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model tblAdmission
   */

  export type AggregateTblAdmission = {
    _count: TblAdmissionCountAggregateOutputType | null
    _avg: TblAdmissionAvgAggregateOutputType | null
    _sum: TblAdmissionSumAggregateOutputType | null
    _min: TblAdmissionMinAggregateOutputType | null
    _max: TblAdmissionMaxAggregateOutputType | null
  }

  export type TblAdmissionAvgAggregateOutputType = {
    tblAdmissionID: Decimal | null
  }

  export type TblAdmissionSumAggregateOutputType = {
    tblAdmissionID: Decimal | null
  }

  export type TblAdmissionMinAggregateOutputType = {
    tblAdmissionID: Decimal | null
    admissioncode: string | null
    admissionname: string | null
  }

  export type TblAdmissionMaxAggregateOutputType = {
    tblAdmissionID: Decimal | null
    admissioncode: string | null
    admissionname: string | null
  }

  export type TblAdmissionCountAggregateOutputType = {
    tblAdmissionID: number
    admissioncode: number
    admissionname: number
    _all: number
  }


  export type TblAdmissionAvgAggregateInputType = {
    tblAdmissionID?: true
  }

  export type TblAdmissionSumAggregateInputType = {
    tblAdmissionID?: true
  }

  export type TblAdmissionMinAggregateInputType = {
    tblAdmissionID?: true
    admissioncode?: true
    admissionname?: true
  }

  export type TblAdmissionMaxAggregateInputType = {
    tblAdmissionID?: true
    admissioncode?: true
    admissionname?: true
  }

  export type TblAdmissionCountAggregateInputType = {
    tblAdmissionID?: true
    admissioncode?: true
    admissionname?: true
    _all?: true
  }

  export type TblAdmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAdmission to aggregate.
     */
    where?: tblAdmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAdmissions to fetch.
     */
    orderBy?: tblAdmissionOrderByWithRelationInput | tblAdmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblAdmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAdmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAdmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblAdmissions
    **/
    _count?: true | TblAdmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblAdmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblAdmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblAdmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblAdmissionMaxAggregateInputType
  }

  export type GetTblAdmissionAggregateType<T extends TblAdmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateTblAdmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblAdmission[P]>
      : GetScalarType<T[P], AggregateTblAdmission[P]>
  }




  export type tblAdmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblAdmissionWhereInput
    orderBy?: tblAdmissionOrderByWithAggregationInput | tblAdmissionOrderByWithAggregationInput[]
    by: TblAdmissionScalarFieldEnum[] | TblAdmissionScalarFieldEnum
    having?: tblAdmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblAdmissionCountAggregateInputType | true
    _avg?: TblAdmissionAvgAggregateInputType
    _sum?: TblAdmissionSumAggregateInputType
    _min?: TblAdmissionMinAggregateInputType
    _max?: TblAdmissionMaxAggregateInputType
  }

  export type TblAdmissionGroupByOutputType = {
    tblAdmissionID: Decimal
    admissioncode: string | null
    admissionname: string | null
    _count: TblAdmissionCountAggregateOutputType | null
    _avg: TblAdmissionAvgAggregateOutputType | null
    _sum: TblAdmissionSumAggregateOutputType | null
    _min: TblAdmissionMinAggregateOutputType | null
    _max: TblAdmissionMaxAggregateOutputType | null
  }

  type GetTblAdmissionGroupByPayload<T extends tblAdmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblAdmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblAdmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblAdmissionGroupByOutputType[P]>
            : GetScalarType<T[P], TblAdmissionGroupByOutputType[P]>
        }
      >
    >


  export type tblAdmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblAdmissionID?: boolean
    admissioncode?: boolean
    admissionname?: boolean
  }, ExtArgs["result"]["tblAdmission"]>



  export type tblAdmissionSelectScalar = {
    tblAdmissionID?: boolean
    admissioncode?: boolean
    admissionname?: boolean
  }

  export type tblAdmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblAdmissionID" | "admissioncode" | "admissionname", ExtArgs["result"]["tblAdmission"]>

  export type $tblAdmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblAdmission"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblAdmissionID: Prisma.Decimal
      admissioncode: string | null
      admissionname: string | null
    }, ExtArgs["result"]["tblAdmission"]>
    composites: {}
  }

  type tblAdmissionGetPayload<S extends boolean | null | undefined | tblAdmissionDefaultArgs> = $Result.GetResult<Prisma.$tblAdmissionPayload, S>

  type tblAdmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblAdmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblAdmissionCountAggregateInputType | true
    }

  export interface tblAdmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblAdmission'], meta: { name: 'tblAdmission' } }
    /**
     * Find zero or one TblAdmission that matches the filter.
     * @param {tblAdmissionFindUniqueArgs} args - Arguments to find a TblAdmission
     * @example
     * // Get one TblAdmission
     * const tblAdmission = await prisma.tblAdmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblAdmissionFindUniqueArgs>(args: SelectSubset<T, tblAdmissionFindUniqueArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblAdmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblAdmissionFindUniqueOrThrowArgs} args - Arguments to find a TblAdmission
     * @example
     * // Get one TblAdmission
     * const tblAdmission = await prisma.tblAdmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblAdmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, tblAdmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAdmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAdmissionFindFirstArgs} args - Arguments to find a TblAdmission
     * @example
     * // Get one TblAdmission
     * const tblAdmission = await prisma.tblAdmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblAdmissionFindFirstArgs>(args?: SelectSubset<T, tblAdmissionFindFirstArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAdmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAdmissionFindFirstOrThrowArgs} args - Arguments to find a TblAdmission
     * @example
     * // Get one TblAdmission
     * const tblAdmission = await prisma.tblAdmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblAdmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, tblAdmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblAdmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAdmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblAdmissions
     * const tblAdmissions = await prisma.tblAdmission.findMany()
     * 
     * // Get first 10 TblAdmissions
     * const tblAdmissions = await prisma.tblAdmission.findMany({ take: 10 })
     * 
     * // Only select the `tblAdmissionID`
     * const tblAdmissionWithTblAdmissionIDOnly = await prisma.tblAdmission.findMany({ select: { tblAdmissionID: true } })
     * 
     */
    findMany<T extends tblAdmissionFindManyArgs>(args?: SelectSubset<T, tblAdmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblAdmission.
     * @param {tblAdmissionCreateArgs} args - Arguments to create a TblAdmission.
     * @example
     * // Create one TblAdmission
     * const TblAdmission = await prisma.tblAdmission.create({
     *   data: {
     *     // ... data to create a TblAdmission
     *   }
     * })
     * 
     */
    create<T extends tblAdmissionCreateArgs>(args: SelectSubset<T, tblAdmissionCreateArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblAdmissions.
     * @param {tblAdmissionCreateManyArgs} args - Arguments to create many TblAdmissions.
     * @example
     * // Create many TblAdmissions
     * const tblAdmission = await prisma.tblAdmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblAdmissionCreateManyArgs>(args?: SelectSubset<T, tblAdmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblAdmission.
     * @param {tblAdmissionDeleteArgs} args - Arguments to delete one TblAdmission.
     * @example
     * // Delete one TblAdmission
     * const TblAdmission = await prisma.tblAdmission.delete({
     *   where: {
     *     // ... filter to delete one TblAdmission
     *   }
     * })
     * 
     */
    delete<T extends tblAdmissionDeleteArgs>(args: SelectSubset<T, tblAdmissionDeleteArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblAdmission.
     * @param {tblAdmissionUpdateArgs} args - Arguments to update one TblAdmission.
     * @example
     * // Update one TblAdmission
     * const tblAdmission = await prisma.tblAdmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblAdmissionUpdateArgs>(args: SelectSubset<T, tblAdmissionUpdateArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblAdmissions.
     * @param {tblAdmissionDeleteManyArgs} args - Arguments to filter TblAdmissions to delete.
     * @example
     * // Delete a few TblAdmissions
     * const { count } = await prisma.tblAdmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblAdmissionDeleteManyArgs>(args?: SelectSubset<T, tblAdmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblAdmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAdmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblAdmissions
     * const tblAdmission = await prisma.tblAdmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblAdmissionUpdateManyArgs>(args: SelectSubset<T, tblAdmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblAdmission.
     * @param {tblAdmissionUpsertArgs} args - Arguments to update or create a TblAdmission.
     * @example
     * // Update or create a TblAdmission
     * const tblAdmission = await prisma.tblAdmission.upsert({
     *   create: {
     *     // ... data to create a TblAdmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblAdmission we want to update
     *   }
     * })
     */
    upsert<T extends tblAdmissionUpsertArgs>(args: SelectSubset<T, tblAdmissionUpsertArgs<ExtArgs>>): Prisma__tblAdmissionClient<$Result.GetResult<Prisma.$tblAdmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblAdmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAdmissionCountArgs} args - Arguments to filter TblAdmissions to count.
     * @example
     * // Count the number of TblAdmissions
     * const count = await prisma.tblAdmission.count({
     *   where: {
     *     // ... the filter for the TblAdmissions we want to count
     *   }
     * })
    **/
    count<T extends tblAdmissionCountArgs>(
      args?: Subset<T, tblAdmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblAdmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblAdmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblAdmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblAdmissionAggregateArgs>(args: Subset<T, TblAdmissionAggregateArgs>): Prisma.PrismaPromise<GetTblAdmissionAggregateType<T>>

    /**
     * Group by TblAdmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAdmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblAdmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblAdmissionGroupByArgs['orderBy'] }
        : { orderBy?: tblAdmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblAdmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblAdmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblAdmission model
   */
  readonly fields: tblAdmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblAdmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblAdmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblAdmission model
   */
  interface tblAdmissionFieldRefs {
    readonly tblAdmissionID: FieldRef<"tblAdmission", 'Decimal'>
    readonly admissioncode: FieldRef<"tblAdmission", 'String'>
    readonly admissionname: FieldRef<"tblAdmission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblAdmission findUnique
   */
  export type tblAdmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * Filter, which tblAdmission to fetch.
     */
    where: tblAdmissionWhereUniqueInput
  }

  /**
   * tblAdmission findUniqueOrThrow
   */
  export type tblAdmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * Filter, which tblAdmission to fetch.
     */
    where: tblAdmissionWhereUniqueInput
  }

  /**
   * tblAdmission findFirst
   */
  export type tblAdmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * Filter, which tblAdmission to fetch.
     */
    where?: tblAdmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAdmissions to fetch.
     */
    orderBy?: tblAdmissionOrderByWithRelationInput | tblAdmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAdmissions.
     */
    cursor?: tblAdmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAdmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAdmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAdmissions.
     */
    distinct?: TblAdmissionScalarFieldEnum | TblAdmissionScalarFieldEnum[]
  }

  /**
   * tblAdmission findFirstOrThrow
   */
  export type tblAdmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * Filter, which tblAdmission to fetch.
     */
    where?: tblAdmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAdmissions to fetch.
     */
    orderBy?: tblAdmissionOrderByWithRelationInput | tblAdmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAdmissions.
     */
    cursor?: tblAdmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAdmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAdmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAdmissions.
     */
    distinct?: TblAdmissionScalarFieldEnum | TblAdmissionScalarFieldEnum[]
  }

  /**
   * tblAdmission findMany
   */
  export type tblAdmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * Filter, which tblAdmissions to fetch.
     */
    where?: tblAdmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAdmissions to fetch.
     */
    orderBy?: tblAdmissionOrderByWithRelationInput | tblAdmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblAdmissions.
     */
    cursor?: tblAdmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAdmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAdmissions.
     */
    skip?: number
    distinct?: TblAdmissionScalarFieldEnum | TblAdmissionScalarFieldEnum[]
  }

  /**
   * tblAdmission create
   */
  export type tblAdmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * The data needed to create a tblAdmission.
     */
    data: XOR<tblAdmissionCreateInput, tblAdmissionUncheckedCreateInput>
  }

  /**
   * tblAdmission createMany
   */
  export type tblAdmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblAdmissions.
     */
    data: tblAdmissionCreateManyInput | tblAdmissionCreateManyInput[]
  }

  /**
   * tblAdmission update
   */
  export type tblAdmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * The data needed to update a tblAdmission.
     */
    data: XOR<tblAdmissionUpdateInput, tblAdmissionUncheckedUpdateInput>
    /**
     * Choose, which tblAdmission to update.
     */
    where: tblAdmissionWhereUniqueInput
  }

  /**
   * tblAdmission updateMany
   */
  export type tblAdmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblAdmissions.
     */
    data: XOR<tblAdmissionUpdateManyMutationInput, tblAdmissionUncheckedUpdateManyInput>
    /**
     * Filter which tblAdmissions to update
     */
    where?: tblAdmissionWhereInput
    /**
     * Limit how many tblAdmissions to update.
     */
    limit?: number
  }

  /**
   * tblAdmission upsert
   */
  export type tblAdmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * The filter to search for the tblAdmission to update in case it exists.
     */
    where: tblAdmissionWhereUniqueInput
    /**
     * In case the tblAdmission found by the `where` argument doesn't exist, create a new tblAdmission with this data.
     */
    create: XOR<tblAdmissionCreateInput, tblAdmissionUncheckedCreateInput>
    /**
     * In case the tblAdmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblAdmissionUpdateInput, tblAdmissionUncheckedUpdateInput>
  }

  /**
   * tblAdmission delete
   */
  export type tblAdmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
    /**
     * Filter which tblAdmission to delete.
     */
    where: tblAdmissionWhereUniqueInput
  }

  /**
   * tblAdmission deleteMany
   */
  export type tblAdmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAdmissions to delete
     */
    where?: tblAdmissionWhereInput
    /**
     * Limit how many tblAdmissions to delete.
     */
    limit?: number
  }

  /**
   * tblAdmission without action
   */
  export type tblAdmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAdmission
     */
    select?: tblAdmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAdmission
     */
    omit?: tblAdmissionOmit<ExtArgs> | null
  }


  /**
   * Model tblApp
   */

  export type AggregateTblApp = {
    _count: TblAppCountAggregateOutputType | null
    _avg: TblAppAvgAggregateOutputType | null
    _sum: TblAppSumAggregateOutputType | null
    _min: TblAppMinAggregateOutputType | null
    _max: TblAppMaxAggregateOutputType | null
  }

  export type TblAppAvgAggregateOutputType = {
    tblAppID: Decimal | null
    AppID: Decimal | null
  }

  export type TblAppSumAggregateOutputType = {
    tblAppID: Decimal | null
    AppID: Decimal | null
  }

  export type TblAppMinAggregateOutputType = {
    tblAppID: Decimal | null
    AppID: Decimal | null
    ApplicationName: string | null
  }

  export type TblAppMaxAggregateOutputType = {
    tblAppID: Decimal | null
    AppID: Decimal | null
    ApplicationName: string | null
  }

  export type TblAppCountAggregateOutputType = {
    tblAppID: number
    AppID: number
    ApplicationName: number
    _all: number
  }


  export type TblAppAvgAggregateInputType = {
    tblAppID?: true
    AppID?: true
  }

  export type TblAppSumAggregateInputType = {
    tblAppID?: true
    AppID?: true
  }

  export type TblAppMinAggregateInputType = {
    tblAppID?: true
    AppID?: true
    ApplicationName?: true
  }

  export type TblAppMaxAggregateInputType = {
    tblAppID?: true
    AppID?: true
    ApplicationName?: true
  }

  export type TblAppCountAggregateInputType = {
    tblAppID?: true
    AppID?: true
    ApplicationName?: true
    _all?: true
  }

  export type TblAppAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblApp to aggregate.
     */
    where?: tblAppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblApps to fetch.
     */
    orderBy?: tblAppOrderByWithRelationInput | tblAppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblAppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblApps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblApps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblApps
    **/
    _count?: true | TblAppCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblAppAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblAppSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblAppMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblAppMaxAggregateInputType
  }

  export type GetTblAppAggregateType<T extends TblAppAggregateArgs> = {
        [P in keyof T & keyof AggregateTblApp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblApp[P]>
      : GetScalarType<T[P], AggregateTblApp[P]>
  }




  export type tblAppGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblAppWhereInput
    orderBy?: tblAppOrderByWithAggregationInput | tblAppOrderByWithAggregationInput[]
    by: TblAppScalarFieldEnum[] | TblAppScalarFieldEnum
    having?: tblAppScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblAppCountAggregateInputType | true
    _avg?: TblAppAvgAggregateInputType
    _sum?: TblAppSumAggregateInputType
    _min?: TblAppMinAggregateInputType
    _max?: TblAppMaxAggregateInputType
  }

  export type TblAppGroupByOutputType = {
    tblAppID: Decimal
    AppID: Decimal | null
    ApplicationName: string | null
    _count: TblAppCountAggregateOutputType | null
    _avg: TblAppAvgAggregateOutputType | null
    _sum: TblAppSumAggregateOutputType | null
    _min: TblAppMinAggregateOutputType | null
    _max: TblAppMaxAggregateOutputType | null
  }

  type GetTblAppGroupByPayload<T extends tblAppGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblAppGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblAppGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblAppGroupByOutputType[P]>
            : GetScalarType<T[P], TblAppGroupByOutputType[P]>
        }
      >
    >


  export type tblAppSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblAppID?: boolean
    AppID?: boolean
    ApplicationName?: boolean
  }, ExtArgs["result"]["tblApp"]>



  export type tblAppSelectScalar = {
    tblAppID?: boolean
    AppID?: boolean
    ApplicationName?: boolean
  }

  export type tblAppOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblAppID" | "AppID" | "ApplicationName", ExtArgs["result"]["tblApp"]>

  export type $tblAppPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblApp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblAppID: Prisma.Decimal
      AppID: Prisma.Decimal | null
      ApplicationName: string | null
    }, ExtArgs["result"]["tblApp"]>
    composites: {}
  }

  type tblAppGetPayload<S extends boolean | null | undefined | tblAppDefaultArgs> = $Result.GetResult<Prisma.$tblAppPayload, S>

  type tblAppCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblAppFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblAppCountAggregateInputType | true
    }

  export interface tblAppDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblApp'], meta: { name: 'tblApp' } }
    /**
     * Find zero or one TblApp that matches the filter.
     * @param {tblAppFindUniqueArgs} args - Arguments to find a TblApp
     * @example
     * // Get one TblApp
     * const tblApp = await prisma.tblApp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblAppFindUniqueArgs>(args: SelectSubset<T, tblAppFindUniqueArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblApp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblAppFindUniqueOrThrowArgs} args - Arguments to find a TblApp
     * @example
     * // Get one TblApp
     * const tblApp = await prisma.tblApp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblAppFindUniqueOrThrowArgs>(args: SelectSubset<T, tblAppFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblApp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppFindFirstArgs} args - Arguments to find a TblApp
     * @example
     * // Get one TblApp
     * const tblApp = await prisma.tblApp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblAppFindFirstArgs>(args?: SelectSubset<T, tblAppFindFirstArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblApp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppFindFirstOrThrowArgs} args - Arguments to find a TblApp
     * @example
     * // Get one TblApp
     * const tblApp = await prisma.tblApp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblAppFindFirstOrThrowArgs>(args?: SelectSubset<T, tblAppFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblApps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblApps
     * const tblApps = await prisma.tblApp.findMany()
     * 
     * // Get first 10 TblApps
     * const tblApps = await prisma.tblApp.findMany({ take: 10 })
     * 
     * // Only select the `tblAppID`
     * const tblAppWithTblAppIDOnly = await prisma.tblApp.findMany({ select: { tblAppID: true } })
     * 
     */
    findMany<T extends tblAppFindManyArgs>(args?: SelectSubset<T, tblAppFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblApp.
     * @param {tblAppCreateArgs} args - Arguments to create a TblApp.
     * @example
     * // Create one TblApp
     * const TblApp = await prisma.tblApp.create({
     *   data: {
     *     // ... data to create a TblApp
     *   }
     * })
     * 
     */
    create<T extends tblAppCreateArgs>(args: SelectSubset<T, tblAppCreateArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblApps.
     * @param {tblAppCreateManyArgs} args - Arguments to create many TblApps.
     * @example
     * // Create many TblApps
     * const tblApp = await prisma.tblApp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblAppCreateManyArgs>(args?: SelectSubset<T, tblAppCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblApp.
     * @param {tblAppDeleteArgs} args - Arguments to delete one TblApp.
     * @example
     * // Delete one TblApp
     * const TblApp = await prisma.tblApp.delete({
     *   where: {
     *     // ... filter to delete one TblApp
     *   }
     * })
     * 
     */
    delete<T extends tblAppDeleteArgs>(args: SelectSubset<T, tblAppDeleteArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblApp.
     * @param {tblAppUpdateArgs} args - Arguments to update one TblApp.
     * @example
     * // Update one TblApp
     * const tblApp = await prisma.tblApp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblAppUpdateArgs>(args: SelectSubset<T, tblAppUpdateArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblApps.
     * @param {tblAppDeleteManyArgs} args - Arguments to filter TblApps to delete.
     * @example
     * // Delete a few TblApps
     * const { count } = await prisma.tblApp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblAppDeleteManyArgs>(args?: SelectSubset<T, tblAppDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblApps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblApps
     * const tblApp = await prisma.tblApp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblAppUpdateManyArgs>(args: SelectSubset<T, tblAppUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblApp.
     * @param {tblAppUpsertArgs} args - Arguments to update or create a TblApp.
     * @example
     * // Update or create a TblApp
     * const tblApp = await prisma.tblApp.upsert({
     *   create: {
     *     // ... data to create a TblApp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblApp we want to update
     *   }
     * })
     */
    upsert<T extends tblAppUpsertArgs>(args: SelectSubset<T, tblAppUpsertArgs<ExtArgs>>): Prisma__tblAppClient<$Result.GetResult<Prisma.$tblAppPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblApps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppCountArgs} args - Arguments to filter TblApps to count.
     * @example
     * // Count the number of TblApps
     * const count = await prisma.tblApp.count({
     *   where: {
     *     // ... the filter for the TblApps we want to count
     *   }
     * })
    **/
    count<T extends tblAppCountArgs>(
      args?: Subset<T, tblAppCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblAppCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblApp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblAppAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblAppAggregateArgs>(args: Subset<T, TblAppAggregateArgs>): Prisma.PrismaPromise<GetTblAppAggregateType<T>>

    /**
     * Group by TblApp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblAppGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblAppGroupByArgs['orderBy'] }
        : { orderBy?: tblAppGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblAppGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblAppGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblApp model
   */
  readonly fields: tblAppFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblApp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblAppClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblApp model
   */
  interface tblAppFieldRefs {
    readonly tblAppID: FieldRef<"tblApp", 'Decimal'>
    readonly AppID: FieldRef<"tblApp", 'Decimal'>
    readonly ApplicationName: FieldRef<"tblApp", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblApp findUnique
   */
  export type tblAppFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * Filter, which tblApp to fetch.
     */
    where: tblAppWhereUniqueInput
  }

  /**
   * tblApp findUniqueOrThrow
   */
  export type tblAppFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * Filter, which tblApp to fetch.
     */
    where: tblAppWhereUniqueInput
  }

  /**
   * tblApp findFirst
   */
  export type tblAppFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * Filter, which tblApp to fetch.
     */
    where?: tblAppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblApps to fetch.
     */
    orderBy?: tblAppOrderByWithRelationInput | tblAppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblApps.
     */
    cursor?: tblAppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblApps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblApps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblApps.
     */
    distinct?: TblAppScalarFieldEnum | TblAppScalarFieldEnum[]
  }

  /**
   * tblApp findFirstOrThrow
   */
  export type tblAppFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * Filter, which tblApp to fetch.
     */
    where?: tblAppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblApps to fetch.
     */
    orderBy?: tblAppOrderByWithRelationInput | tblAppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblApps.
     */
    cursor?: tblAppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblApps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblApps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblApps.
     */
    distinct?: TblAppScalarFieldEnum | TblAppScalarFieldEnum[]
  }

  /**
   * tblApp findMany
   */
  export type tblAppFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * Filter, which tblApps to fetch.
     */
    where?: tblAppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblApps to fetch.
     */
    orderBy?: tblAppOrderByWithRelationInput | tblAppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblApps.
     */
    cursor?: tblAppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblApps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblApps.
     */
    skip?: number
    distinct?: TblAppScalarFieldEnum | TblAppScalarFieldEnum[]
  }

  /**
   * tblApp create
   */
  export type tblAppCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * The data needed to create a tblApp.
     */
    data: XOR<tblAppCreateInput, tblAppUncheckedCreateInput>
  }

  /**
   * tblApp createMany
   */
  export type tblAppCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblApps.
     */
    data: tblAppCreateManyInput | tblAppCreateManyInput[]
  }

  /**
   * tblApp update
   */
  export type tblAppUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * The data needed to update a tblApp.
     */
    data: XOR<tblAppUpdateInput, tblAppUncheckedUpdateInput>
    /**
     * Choose, which tblApp to update.
     */
    where: tblAppWhereUniqueInput
  }

  /**
   * tblApp updateMany
   */
  export type tblAppUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblApps.
     */
    data: XOR<tblAppUpdateManyMutationInput, tblAppUncheckedUpdateManyInput>
    /**
     * Filter which tblApps to update
     */
    where?: tblAppWhereInput
    /**
     * Limit how many tblApps to update.
     */
    limit?: number
  }

  /**
   * tblApp upsert
   */
  export type tblAppUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * The filter to search for the tblApp to update in case it exists.
     */
    where: tblAppWhereUniqueInput
    /**
     * In case the tblApp found by the `where` argument doesn't exist, create a new tblApp with this data.
     */
    create: XOR<tblAppCreateInput, tblAppUncheckedCreateInput>
    /**
     * In case the tblApp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblAppUpdateInput, tblAppUncheckedUpdateInput>
  }

  /**
   * tblApp delete
   */
  export type tblAppDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
    /**
     * Filter which tblApp to delete.
     */
    where: tblAppWhereUniqueInput
  }

  /**
   * tblApp deleteMany
   */
  export type tblAppDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblApps to delete
     */
    where?: tblAppWhereInput
    /**
     * Limit how many tblApps to delete.
     */
    limit?: number
  }

  /**
   * tblApp without action
   */
  export type tblAppDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblApp
     */
    select?: tblAppSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblApp
     */
    omit?: tblAppOmit<ExtArgs> | null
  }


  /**
   * Model tblAppAuth
   */

  export type AggregateTblAppAuth = {
    _count: TblAppAuthCountAggregateOutputType | null
    _avg: TblAppAuthAvgAggregateOutputType | null
    _sum: TblAppAuthSumAggregateOutputType | null
    _min: TblAppAuthMinAggregateOutputType | null
    _max: TblAppAuthMaxAggregateOutputType | null
  }

  export type TblAppAuthAvgAggregateOutputType = {
    tblAppAuthID: Decimal | null
    appAuthID: Decimal | null
    AppID: Decimal | null
  }

  export type TblAppAuthSumAggregateOutputType = {
    tblAppAuthID: Decimal | null
    appAuthID: Decimal | null
    AppID: Decimal | null
  }

  export type TblAppAuthMinAggregateOutputType = {
    tblAppAuthID: Decimal | null
    appAuthID: Decimal | null
    AppID: Decimal | null
    userid: string | null
    last_update: Date | null
  }

  export type TblAppAuthMaxAggregateOutputType = {
    tblAppAuthID: Decimal | null
    appAuthID: Decimal | null
    AppID: Decimal | null
    userid: string | null
    last_update: Date | null
  }

  export type TblAppAuthCountAggregateOutputType = {
    tblAppAuthID: number
    appAuthID: number
    AppID: number
    userid: number
    last_update: number
    _all: number
  }


  export type TblAppAuthAvgAggregateInputType = {
    tblAppAuthID?: true
    appAuthID?: true
    AppID?: true
  }

  export type TblAppAuthSumAggregateInputType = {
    tblAppAuthID?: true
    appAuthID?: true
    AppID?: true
  }

  export type TblAppAuthMinAggregateInputType = {
    tblAppAuthID?: true
    appAuthID?: true
    AppID?: true
    userid?: true
    last_update?: true
  }

  export type TblAppAuthMaxAggregateInputType = {
    tblAppAuthID?: true
    appAuthID?: true
    AppID?: true
    userid?: true
    last_update?: true
  }

  export type TblAppAuthCountAggregateInputType = {
    tblAppAuthID?: true
    appAuthID?: true
    AppID?: true
    userid?: true
    last_update?: true
    _all?: true
  }

  export type TblAppAuthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAppAuth to aggregate.
     */
    where?: tblAppAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppAuths to fetch.
     */
    orderBy?: tblAppAuthOrderByWithRelationInput | tblAppAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblAppAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblAppAuths
    **/
    _count?: true | TblAppAuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblAppAuthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblAppAuthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblAppAuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblAppAuthMaxAggregateInputType
  }

  export type GetTblAppAuthAggregateType<T extends TblAppAuthAggregateArgs> = {
        [P in keyof T & keyof AggregateTblAppAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblAppAuth[P]>
      : GetScalarType<T[P], AggregateTblAppAuth[P]>
  }




  export type tblAppAuthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblAppAuthWhereInput
    orderBy?: tblAppAuthOrderByWithAggregationInput | tblAppAuthOrderByWithAggregationInput[]
    by: TblAppAuthScalarFieldEnum[] | TblAppAuthScalarFieldEnum
    having?: tblAppAuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblAppAuthCountAggregateInputType | true
    _avg?: TblAppAuthAvgAggregateInputType
    _sum?: TblAppAuthSumAggregateInputType
    _min?: TblAppAuthMinAggregateInputType
    _max?: TblAppAuthMaxAggregateInputType
  }

  export type TblAppAuthGroupByOutputType = {
    tblAppAuthID: Decimal
    appAuthID: Decimal | null
    AppID: Decimal | null
    userid: string | null
    last_update: Date | null
    _count: TblAppAuthCountAggregateOutputType | null
    _avg: TblAppAuthAvgAggregateOutputType | null
    _sum: TblAppAuthSumAggregateOutputType | null
    _min: TblAppAuthMinAggregateOutputType | null
    _max: TblAppAuthMaxAggregateOutputType | null
  }

  type GetTblAppAuthGroupByPayload<T extends tblAppAuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblAppAuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblAppAuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblAppAuthGroupByOutputType[P]>
            : GetScalarType<T[P], TblAppAuthGroupByOutputType[P]>
        }
      >
    >


  export type tblAppAuthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblAppAuthID?: boolean
    appAuthID?: boolean
    AppID?: boolean
    userid?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["tblAppAuth"]>



  export type tblAppAuthSelectScalar = {
    tblAppAuthID?: boolean
    appAuthID?: boolean
    AppID?: boolean
    userid?: boolean
    last_update?: boolean
  }

  export type tblAppAuthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblAppAuthID" | "appAuthID" | "AppID" | "userid" | "last_update", ExtArgs["result"]["tblAppAuth"]>

  export type $tblAppAuthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblAppAuth"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblAppAuthID: Prisma.Decimal
      appAuthID: Prisma.Decimal | null
      AppID: Prisma.Decimal | null
      userid: string | null
      last_update: Date | null
    }, ExtArgs["result"]["tblAppAuth"]>
    composites: {}
  }

  type tblAppAuthGetPayload<S extends boolean | null | undefined | tblAppAuthDefaultArgs> = $Result.GetResult<Prisma.$tblAppAuthPayload, S>

  type tblAppAuthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblAppAuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblAppAuthCountAggregateInputType | true
    }

  export interface tblAppAuthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblAppAuth'], meta: { name: 'tblAppAuth' } }
    /**
     * Find zero or one TblAppAuth that matches the filter.
     * @param {tblAppAuthFindUniqueArgs} args - Arguments to find a TblAppAuth
     * @example
     * // Get one TblAppAuth
     * const tblAppAuth = await prisma.tblAppAuth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblAppAuthFindUniqueArgs>(args: SelectSubset<T, tblAppAuthFindUniqueArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblAppAuth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblAppAuthFindUniqueOrThrowArgs} args - Arguments to find a TblAppAuth
     * @example
     * // Get one TblAppAuth
     * const tblAppAuth = await prisma.tblAppAuth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblAppAuthFindUniqueOrThrowArgs>(args: SelectSubset<T, tblAppAuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAppAuth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppAuthFindFirstArgs} args - Arguments to find a TblAppAuth
     * @example
     * // Get one TblAppAuth
     * const tblAppAuth = await prisma.tblAppAuth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblAppAuthFindFirstArgs>(args?: SelectSubset<T, tblAppAuthFindFirstArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAppAuth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppAuthFindFirstOrThrowArgs} args - Arguments to find a TblAppAuth
     * @example
     * // Get one TblAppAuth
     * const tblAppAuth = await prisma.tblAppAuth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblAppAuthFindFirstOrThrowArgs>(args?: SelectSubset<T, tblAppAuthFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblAppAuths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppAuthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblAppAuths
     * const tblAppAuths = await prisma.tblAppAuth.findMany()
     * 
     * // Get first 10 TblAppAuths
     * const tblAppAuths = await prisma.tblAppAuth.findMany({ take: 10 })
     * 
     * // Only select the `tblAppAuthID`
     * const tblAppAuthWithTblAppAuthIDOnly = await prisma.tblAppAuth.findMany({ select: { tblAppAuthID: true } })
     * 
     */
    findMany<T extends tblAppAuthFindManyArgs>(args?: SelectSubset<T, tblAppAuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblAppAuth.
     * @param {tblAppAuthCreateArgs} args - Arguments to create a TblAppAuth.
     * @example
     * // Create one TblAppAuth
     * const TblAppAuth = await prisma.tblAppAuth.create({
     *   data: {
     *     // ... data to create a TblAppAuth
     *   }
     * })
     * 
     */
    create<T extends tblAppAuthCreateArgs>(args: SelectSubset<T, tblAppAuthCreateArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblAppAuths.
     * @param {tblAppAuthCreateManyArgs} args - Arguments to create many TblAppAuths.
     * @example
     * // Create many TblAppAuths
     * const tblAppAuth = await prisma.tblAppAuth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblAppAuthCreateManyArgs>(args?: SelectSubset<T, tblAppAuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblAppAuth.
     * @param {tblAppAuthDeleteArgs} args - Arguments to delete one TblAppAuth.
     * @example
     * // Delete one TblAppAuth
     * const TblAppAuth = await prisma.tblAppAuth.delete({
     *   where: {
     *     // ... filter to delete one TblAppAuth
     *   }
     * })
     * 
     */
    delete<T extends tblAppAuthDeleteArgs>(args: SelectSubset<T, tblAppAuthDeleteArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblAppAuth.
     * @param {tblAppAuthUpdateArgs} args - Arguments to update one TblAppAuth.
     * @example
     * // Update one TblAppAuth
     * const tblAppAuth = await prisma.tblAppAuth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblAppAuthUpdateArgs>(args: SelectSubset<T, tblAppAuthUpdateArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblAppAuths.
     * @param {tblAppAuthDeleteManyArgs} args - Arguments to filter TblAppAuths to delete.
     * @example
     * // Delete a few TblAppAuths
     * const { count } = await prisma.tblAppAuth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblAppAuthDeleteManyArgs>(args?: SelectSubset<T, tblAppAuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblAppAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppAuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblAppAuths
     * const tblAppAuth = await prisma.tblAppAuth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblAppAuthUpdateManyArgs>(args: SelectSubset<T, tblAppAuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblAppAuth.
     * @param {tblAppAuthUpsertArgs} args - Arguments to update or create a TblAppAuth.
     * @example
     * // Update or create a TblAppAuth
     * const tblAppAuth = await prisma.tblAppAuth.upsert({
     *   create: {
     *     // ... data to create a TblAppAuth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblAppAuth we want to update
     *   }
     * })
     */
    upsert<T extends tblAppAuthUpsertArgs>(args: SelectSubset<T, tblAppAuthUpsertArgs<ExtArgs>>): Prisma__tblAppAuthClient<$Result.GetResult<Prisma.$tblAppAuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblAppAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppAuthCountArgs} args - Arguments to filter TblAppAuths to count.
     * @example
     * // Count the number of TblAppAuths
     * const count = await prisma.tblAppAuth.count({
     *   where: {
     *     // ... the filter for the TblAppAuths we want to count
     *   }
     * })
    **/
    count<T extends tblAppAuthCountArgs>(
      args?: Subset<T, tblAppAuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblAppAuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblAppAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblAppAuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblAppAuthAggregateArgs>(args: Subset<T, TblAppAuthAggregateArgs>): Prisma.PrismaPromise<GetTblAppAuthAggregateType<T>>

    /**
     * Group by TblAppAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppAuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblAppAuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblAppAuthGroupByArgs['orderBy'] }
        : { orderBy?: tblAppAuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblAppAuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblAppAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblAppAuth model
   */
  readonly fields: tblAppAuthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblAppAuth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblAppAuthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblAppAuth model
   */
  interface tblAppAuthFieldRefs {
    readonly tblAppAuthID: FieldRef<"tblAppAuth", 'Decimal'>
    readonly appAuthID: FieldRef<"tblAppAuth", 'Decimal'>
    readonly AppID: FieldRef<"tblAppAuth", 'Decimal'>
    readonly userid: FieldRef<"tblAppAuth", 'String'>
    readonly last_update: FieldRef<"tblAppAuth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tblAppAuth findUnique
   */
  export type tblAppAuthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppAuth to fetch.
     */
    where: tblAppAuthWhereUniqueInput
  }

  /**
   * tblAppAuth findUniqueOrThrow
   */
  export type tblAppAuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppAuth to fetch.
     */
    where: tblAppAuthWhereUniqueInput
  }

  /**
   * tblAppAuth findFirst
   */
  export type tblAppAuthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppAuth to fetch.
     */
    where?: tblAppAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppAuths to fetch.
     */
    orderBy?: tblAppAuthOrderByWithRelationInput | tblAppAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAppAuths.
     */
    cursor?: tblAppAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAppAuths.
     */
    distinct?: TblAppAuthScalarFieldEnum | TblAppAuthScalarFieldEnum[]
  }

  /**
   * tblAppAuth findFirstOrThrow
   */
  export type tblAppAuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppAuth to fetch.
     */
    where?: tblAppAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppAuths to fetch.
     */
    orderBy?: tblAppAuthOrderByWithRelationInput | tblAppAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAppAuths.
     */
    cursor?: tblAppAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAppAuths.
     */
    distinct?: TblAppAuthScalarFieldEnum | TblAppAuthScalarFieldEnum[]
  }

  /**
   * tblAppAuth findMany
   */
  export type tblAppAuthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppAuths to fetch.
     */
    where?: tblAppAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppAuths to fetch.
     */
    orderBy?: tblAppAuthOrderByWithRelationInput | tblAppAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblAppAuths.
     */
    cursor?: tblAppAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppAuths.
     */
    skip?: number
    distinct?: TblAppAuthScalarFieldEnum | TblAppAuthScalarFieldEnum[]
  }

  /**
   * tblAppAuth create
   */
  export type tblAppAuthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * The data needed to create a tblAppAuth.
     */
    data: XOR<tblAppAuthCreateInput, tblAppAuthUncheckedCreateInput>
  }

  /**
   * tblAppAuth createMany
   */
  export type tblAppAuthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblAppAuths.
     */
    data: tblAppAuthCreateManyInput | tblAppAuthCreateManyInput[]
  }

  /**
   * tblAppAuth update
   */
  export type tblAppAuthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * The data needed to update a tblAppAuth.
     */
    data: XOR<tblAppAuthUpdateInput, tblAppAuthUncheckedUpdateInput>
    /**
     * Choose, which tblAppAuth to update.
     */
    where: tblAppAuthWhereUniqueInput
  }

  /**
   * tblAppAuth updateMany
   */
  export type tblAppAuthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblAppAuths.
     */
    data: XOR<tblAppAuthUpdateManyMutationInput, tblAppAuthUncheckedUpdateManyInput>
    /**
     * Filter which tblAppAuths to update
     */
    where?: tblAppAuthWhereInput
    /**
     * Limit how many tblAppAuths to update.
     */
    limit?: number
  }

  /**
   * tblAppAuth upsert
   */
  export type tblAppAuthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * The filter to search for the tblAppAuth to update in case it exists.
     */
    where: tblAppAuthWhereUniqueInput
    /**
     * In case the tblAppAuth found by the `where` argument doesn't exist, create a new tblAppAuth with this data.
     */
    create: XOR<tblAppAuthCreateInput, tblAppAuthUncheckedCreateInput>
    /**
     * In case the tblAppAuth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblAppAuthUpdateInput, tblAppAuthUncheckedUpdateInput>
  }

  /**
   * tblAppAuth delete
   */
  export type tblAppAuthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
    /**
     * Filter which tblAppAuth to delete.
     */
    where: tblAppAuthWhereUniqueInput
  }

  /**
   * tblAppAuth deleteMany
   */
  export type tblAppAuthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAppAuths to delete
     */
    where?: tblAppAuthWhereInput
    /**
     * Limit how many tblAppAuths to delete.
     */
    limit?: number
  }

  /**
   * tblAppAuth without action
   */
  export type tblAppAuthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppAuth
     */
    select?: tblAppAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppAuth
     */
    omit?: tblAppAuthOmit<ExtArgs> | null
  }


  /**
   * Model tblAppModeAuth
   */

  export type AggregateTblAppModeAuth = {
    _count: TblAppModeAuthCountAggregateOutputType | null
    _avg: TblAppModeAuthAvgAggregateOutputType | null
    _sum: TblAppModeAuthSumAggregateOutputType | null
    _min: TblAppModeAuthMinAggregateOutputType | null
    _max: TblAppModeAuthMaxAggregateOutputType | null
  }

  export type TblAppModeAuthAvgAggregateOutputType = {
    tblUserAppModAuthID: Decimal | null
    moduleID: Decimal | null
    UserappModAuthID: Decimal | null
  }

  export type TblAppModeAuthSumAggregateOutputType = {
    tblUserAppModAuthID: Decimal | null
    moduleID: Decimal | null
    UserappModAuthID: Decimal | null
  }

  export type TblAppModeAuthMinAggregateOutputType = {
    tblUserAppModAuthID: Decimal | null
    moduleID: Decimal | null
    UserappModAuthID: Decimal | null
    userid: string | null
    last_update: Date | null
  }

  export type TblAppModeAuthMaxAggregateOutputType = {
    tblUserAppModAuthID: Decimal | null
    moduleID: Decimal | null
    UserappModAuthID: Decimal | null
    userid: string | null
    last_update: Date | null
  }

  export type TblAppModeAuthCountAggregateOutputType = {
    tblUserAppModAuthID: number
    moduleID: number
    UserappModAuthID: number
    userid: number
    last_update: number
    _all: number
  }


  export type TblAppModeAuthAvgAggregateInputType = {
    tblUserAppModAuthID?: true
    moduleID?: true
    UserappModAuthID?: true
  }

  export type TblAppModeAuthSumAggregateInputType = {
    tblUserAppModAuthID?: true
    moduleID?: true
    UserappModAuthID?: true
  }

  export type TblAppModeAuthMinAggregateInputType = {
    tblUserAppModAuthID?: true
    moduleID?: true
    UserappModAuthID?: true
    userid?: true
    last_update?: true
  }

  export type TblAppModeAuthMaxAggregateInputType = {
    tblUserAppModAuthID?: true
    moduleID?: true
    UserappModAuthID?: true
    userid?: true
    last_update?: true
  }

  export type TblAppModeAuthCountAggregateInputType = {
    tblUserAppModAuthID?: true
    moduleID?: true
    UserappModAuthID?: true
    userid?: true
    last_update?: true
    _all?: true
  }

  export type TblAppModeAuthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAppModeAuth to aggregate.
     */
    where?: tblAppModeAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModeAuths to fetch.
     */
    orderBy?: tblAppModeAuthOrderByWithRelationInput | tblAppModeAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblAppModeAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModeAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModeAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblAppModeAuths
    **/
    _count?: true | TblAppModeAuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblAppModeAuthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblAppModeAuthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblAppModeAuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblAppModeAuthMaxAggregateInputType
  }

  export type GetTblAppModeAuthAggregateType<T extends TblAppModeAuthAggregateArgs> = {
        [P in keyof T & keyof AggregateTblAppModeAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblAppModeAuth[P]>
      : GetScalarType<T[P], AggregateTblAppModeAuth[P]>
  }




  export type tblAppModeAuthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblAppModeAuthWhereInput
    orderBy?: tblAppModeAuthOrderByWithAggregationInput | tblAppModeAuthOrderByWithAggregationInput[]
    by: TblAppModeAuthScalarFieldEnum[] | TblAppModeAuthScalarFieldEnum
    having?: tblAppModeAuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblAppModeAuthCountAggregateInputType | true
    _avg?: TblAppModeAuthAvgAggregateInputType
    _sum?: TblAppModeAuthSumAggregateInputType
    _min?: TblAppModeAuthMinAggregateInputType
    _max?: TblAppModeAuthMaxAggregateInputType
  }

  export type TblAppModeAuthGroupByOutputType = {
    tblUserAppModAuthID: Decimal
    moduleID: Decimal | null
    UserappModAuthID: Decimal | null
    userid: string | null
    last_update: Date | null
    _count: TblAppModeAuthCountAggregateOutputType | null
    _avg: TblAppModeAuthAvgAggregateOutputType | null
    _sum: TblAppModeAuthSumAggregateOutputType | null
    _min: TblAppModeAuthMinAggregateOutputType | null
    _max: TblAppModeAuthMaxAggregateOutputType | null
  }

  type GetTblAppModeAuthGroupByPayload<T extends tblAppModeAuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblAppModeAuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblAppModeAuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblAppModeAuthGroupByOutputType[P]>
            : GetScalarType<T[P], TblAppModeAuthGroupByOutputType[P]>
        }
      >
    >


  export type tblAppModeAuthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblUserAppModAuthID?: boolean
    moduleID?: boolean
    UserappModAuthID?: boolean
    userid?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["tblAppModeAuth"]>



  export type tblAppModeAuthSelectScalar = {
    tblUserAppModAuthID?: boolean
    moduleID?: boolean
    UserappModAuthID?: boolean
    userid?: boolean
    last_update?: boolean
  }

  export type tblAppModeAuthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblUserAppModAuthID" | "moduleID" | "UserappModAuthID" | "userid" | "last_update", ExtArgs["result"]["tblAppModeAuth"]>

  export type $tblAppModeAuthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblAppModeAuth"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblUserAppModAuthID: Prisma.Decimal
      moduleID: Prisma.Decimal | null
      UserappModAuthID: Prisma.Decimal | null
      userid: string | null
      last_update: Date | null
    }, ExtArgs["result"]["tblAppModeAuth"]>
    composites: {}
  }

  type tblAppModeAuthGetPayload<S extends boolean | null | undefined | tblAppModeAuthDefaultArgs> = $Result.GetResult<Prisma.$tblAppModeAuthPayload, S>

  type tblAppModeAuthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblAppModeAuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblAppModeAuthCountAggregateInputType | true
    }

  export interface tblAppModeAuthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblAppModeAuth'], meta: { name: 'tblAppModeAuth' } }
    /**
     * Find zero or one TblAppModeAuth that matches the filter.
     * @param {tblAppModeAuthFindUniqueArgs} args - Arguments to find a TblAppModeAuth
     * @example
     * // Get one TblAppModeAuth
     * const tblAppModeAuth = await prisma.tblAppModeAuth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblAppModeAuthFindUniqueArgs>(args: SelectSubset<T, tblAppModeAuthFindUniqueArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblAppModeAuth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblAppModeAuthFindUniqueOrThrowArgs} args - Arguments to find a TblAppModeAuth
     * @example
     * // Get one TblAppModeAuth
     * const tblAppModeAuth = await prisma.tblAppModeAuth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblAppModeAuthFindUniqueOrThrowArgs>(args: SelectSubset<T, tblAppModeAuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAppModeAuth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModeAuthFindFirstArgs} args - Arguments to find a TblAppModeAuth
     * @example
     * // Get one TblAppModeAuth
     * const tblAppModeAuth = await prisma.tblAppModeAuth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblAppModeAuthFindFirstArgs>(args?: SelectSubset<T, tblAppModeAuthFindFirstArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAppModeAuth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModeAuthFindFirstOrThrowArgs} args - Arguments to find a TblAppModeAuth
     * @example
     * // Get one TblAppModeAuth
     * const tblAppModeAuth = await prisma.tblAppModeAuth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblAppModeAuthFindFirstOrThrowArgs>(args?: SelectSubset<T, tblAppModeAuthFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblAppModeAuths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModeAuthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblAppModeAuths
     * const tblAppModeAuths = await prisma.tblAppModeAuth.findMany()
     * 
     * // Get first 10 TblAppModeAuths
     * const tblAppModeAuths = await prisma.tblAppModeAuth.findMany({ take: 10 })
     * 
     * // Only select the `tblUserAppModAuthID`
     * const tblAppModeAuthWithTblUserAppModAuthIDOnly = await prisma.tblAppModeAuth.findMany({ select: { tblUserAppModAuthID: true } })
     * 
     */
    findMany<T extends tblAppModeAuthFindManyArgs>(args?: SelectSubset<T, tblAppModeAuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblAppModeAuth.
     * @param {tblAppModeAuthCreateArgs} args - Arguments to create a TblAppModeAuth.
     * @example
     * // Create one TblAppModeAuth
     * const TblAppModeAuth = await prisma.tblAppModeAuth.create({
     *   data: {
     *     // ... data to create a TblAppModeAuth
     *   }
     * })
     * 
     */
    create<T extends tblAppModeAuthCreateArgs>(args: SelectSubset<T, tblAppModeAuthCreateArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblAppModeAuths.
     * @param {tblAppModeAuthCreateManyArgs} args - Arguments to create many TblAppModeAuths.
     * @example
     * // Create many TblAppModeAuths
     * const tblAppModeAuth = await prisma.tblAppModeAuth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblAppModeAuthCreateManyArgs>(args?: SelectSubset<T, tblAppModeAuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblAppModeAuth.
     * @param {tblAppModeAuthDeleteArgs} args - Arguments to delete one TblAppModeAuth.
     * @example
     * // Delete one TblAppModeAuth
     * const TblAppModeAuth = await prisma.tblAppModeAuth.delete({
     *   where: {
     *     // ... filter to delete one TblAppModeAuth
     *   }
     * })
     * 
     */
    delete<T extends tblAppModeAuthDeleteArgs>(args: SelectSubset<T, tblAppModeAuthDeleteArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblAppModeAuth.
     * @param {tblAppModeAuthUpdateArgs} args - Arguments to update one TblAppModeAuth.
     * @example
     * // Update one TblAppModeAuth
     * const tblAppModeAuth = await prisma.tblAppModeAuth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblAppModeAuthUpdateArgs>(args: SelectSubset<T, tblAppModeAuthUpdateArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblAppModeAuths.
     * @param {tblAppModeAuthDeleteManyArgs} args - Arguments to filter TblAppModeAuths to delete.
     * @example
     * // Delete a few TblAppModeAuths
     * const { count } = await prisma.tblAppModeAuth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblAppModeAuthDeleteManyArgs>(args?: SelectSubset<T, tblAppModeAuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblAppModeAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModeAuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblAppModeAuths
     * const tblAppModeAuth = await prisma.tblAppModeAuth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblAppModeAuthUpdateManyArgs>(args: SelectSubset<T, tblAppModeAuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblAppModeAuth.
     * @param {tblAppModeAuthUpsertArgs} args - Arguments to update or create a TblAppModeAuth.
     * @example
     * // Update or create a TblAppModeAuth
     * const tblAppModeAuth = await prisma.tblAppModeAuth.upsert({
     *   create: {
     *     // ... data to create a TblAppModeAuth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblAppModeAuth we want to update
     *   }
     * })
     */
    upsert<T extends tblAppModeAuthUpsertArgs>(args: SelectSubset<T, tblAppModeAuthUpsertArgs<ExtArgs>>): Prisma__tblAppModeAuthClient<$Result.GetResult<Prisma.$tblAppModeAuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblAppModeAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModeAuthCountArgs} args - Arguments to filter TblAppModeAuths to count.
     * @example
     * // Count the number of TblAppModeAuths
     * const count = await prisma.tblAppModeAuth.count({
     *   where: {
     *     // ... the filter for the TblAppModeAuths we want to count
     *   }
     * })
    **/
    count<T extends tblAppModeAuthCountArgs>(
      args?: Subset<T, tblAppModeAuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblAppModeAuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblAppModeAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblAppModeAuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblAppModeAuthAggregateArgs>(args: Subset<T, TblAppModeAuthAggregateArgs>): Prisma.PrismaPromise<GetTblAppModeAuthAggregateType<T>>

    /**
     * Group by TblAppModeAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModeAuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblAppModeAuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblAppModeAuthGroupByArgs['orderBy'] }
        : { orderBy?: tblAppModeAuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblAppModeAuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblAppModeAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblAppModeAuth model
   */
  readonly fields: tblAppModeAuthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblAppModeAuth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblAppModeAuthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblAppModeAuth model
   */
  interface tblAppModeAuthFieldRefs {
    readonly tblUserAppModAuthID: FieldRef<"tblAppModeAuth", 'Decimal'>
    readonly moduleID: FieldRef<"tblAppModeAuth", 'Decimal'>
    readonly UserappModAuthID: FieldRef<"tblAppModeAuth", 'Decimal'>
    readonly userid: FieldRef<"tblAppModeAuth", 'String'>
    readonly last_update: FieldRef<"tblAppModeAuth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tblAppModeAuth findUnique
   */
  export type tblAppModeAuthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModeAuth to fetch.
     */
    where: tblAppModeAuthWhereUniqueInput
  }

  /**
   * tblAppModeAuth findUniqueOrThrow
   */
  export type tblAppModeAuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModeAuth to fetch.
     */
    where: tblAppModeAuthWhereUniqueInput
  }

  /**
   * tblAppModeAuth findFirst
   */
  export type tblAppModeAuthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModeAuth to fetch.
     */
    where?: tblAppModeAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModeAuths to fetch.
     */
    orderBy?: tblAppModeAuthOrderByWithRelationInput | tblAppModeAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAppModeAuths.
     */
    cursor?: tblAppModeAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModeAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModeAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAppModeAuths.
     */
    distinct?: TblAppModeAuthScalarFieldEnum | TblAppModeAuthScalarFieldEnum[]
  }

  /**
   * tblAppModeAuth findFirstOrThrow
   */
  export type tblAppModeAuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModeAuth to fetch.
     */
    where?: tblAppModeAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModeAuths to fetch.
     */
    orderBy?: tblAppModeAuthOrderByWithRelationInput | tblAppModeAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAppModeAuths.
     */
    cursor?: tblAppModeAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModeAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModeAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAppModeAuths.
     */
    distinct?: TblAppModeAuthScalarFieldEnum | TblAppModeAuthScalarFieldEnum[]
  }

  /**
   * tblAppModeAuth findMany
   */
  export type tblAppModeAuthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModeAuths to fetch.
     */
    where?: tblAppModeAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModeAuths to fetch.
     */
    orderBy?: tblAppModeAuthOrderByWithRelationInput | tblAppModeAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblAppModeAuths.
     */
    cursor?: tblAppModeAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModeAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModeAuths.
     */
    skip?: number
    distinct?: TblAppModeAuthScalarFieldEnum | TblAppModeAuthScalarFieldEnum[]
  }

  /**
   * tblAppModeAuth create
   */
  export type tblAppModeAuthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * The data needed to create a tblAppModeAuth.
     */
    data: XOR<tblAppModeAuthCreateInput, tblAppModeAuthUncheckedCreateInput>
  }

  /**
   * tblAppModeAuth createMany
   */
  export type tblAppModeAuthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblAppModeAuths.
     */
    data: tblAppModeAuthCreateManyInput | tblAppModeAuthCreateManyInput[]
  }

  /**
   * tblAppModeAuth update
   */
  export type tblAppModeAuthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * The data needed to update a tblAppModeAuth.
     */
    data: XOR<tblAppModeAuthUpdateInput, tblAppModeAuthUncheckedUpdateInput>
    /**
     * Choose, which tblAppModeAuth to update.
     */
    where: tblAppModeAuthWhereUniqueInput
  }

  /**
   * tblAppModeAuth updateMany
   */
  export type tblAppModeAuthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblAppModeAuths.
     */
    data: XOR<tblAppModeAuthUpdateManyMutationInput, tblAppModeAuthUncheckedUpdateManyInput>
    /**
     * Filter which tblAppModeAuths to update
     */
    where?: tblAppModeAuthWhereInput
    /**
     * Limit how many tblAppModeAuths to update.
     */
    limit?: number
  }

  /**
   * tblAppModeAuth upsert
   */
  export type tblAppModeAuthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * The filter to search for the tblAppModeAuth to update in case it exists.
     */
    where: tblAppModeAuthWhereUniqueInput
    /**
     * In case the tblAppModeAuth found by the `where` argument doesn't exist, create a new tblAppModeAuth with this data.
     */
    create: XOR<tblAppModeAuthCreateInput, tblAppModeAuthUncheckedCreateInput>
    /**
     * In case the tblAppModeAuth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblAppModeAuthUpdateInput, tblAppModeAuthUncheckedUpdateInput>
  }

  /**
   * tblAppModeAuth delete
   */
  export type tblAppModeAuthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
    /**
     * Filter which tblAppModeAuth to delete.
     */
    where: tblAppModeAuthWhereUniqueInput
  }

  /**
   * tblAppModeAuth deleteMany
   */
  export type tblAppModeAuthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAppModeAuths to delete
     */
    where?: tblAppModeAuthWhereInput
    /**
     * Limit how many tblAppModeAuths to delete.
     */
    limit?: number
  }

  /**
   * tblAppModeAuth without action
   */
  export type tblAppModeAuthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModeAuth
     */
    select?: tblAppModeAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModeAuth
     */
    omit?: tblAppModeAuthOmit<ExtArgs> | null
  }


  /**
   * Model tblAppModules
   */

  export type AggregateTblAppModules = {
    _count: TblAppModulesCountAggregateOutputType | null
    _avg: TblAppModulesAvgAggregateOutputType | null
    _sum: TblAppModulesSumAggregateOutputType | null
    _min: TblAppModulesMinAggregateOutputType | null
    _max: TblAppModulesMaxAggregateOutputType | null
  }

  export type TblAppModulesAvgAggregateOutputType = {
    tblAppModulesID: Decimal | null
    moduleID: Decimal | null
    AppID: Decimal | null
  }

  export type TblAppModulesSumAggregateOutputType = {
    tblAppModulesID: Decimal | null
    moduleID: Decimal | null
    AppID: Decimal | null
  }

  export type TblAppModulesMinAggregateOutputType = {
    tblAppModulesID: Decimal | null
    moduleID: Decimal | null
    AppID: Decimal | null
    ModuleName: string | null
  }

  export type TblAppModulesMaxAggregateOutputType = {
    tblAppModulesID: Decimal | null
    moduleID: Decimal | null
    AppID: Decimal | null
    ModuleName: string | null
  }

  export type TblAppModulesCountAggregateOutputType = {
    tblAppModulesID: number
    moduleID: number
    AppID: number
    ModuleName: number
    _all: number
  }


  export type TblAppModulesAvgAggregateInputType = {
    tblAppModulesID?: true
    moduleID?: true
    AppID?: true
  }

  export type TblAppModulesSumAggregateInputType = {
    tblAppModulesID?: true
    moduleID?: true
    AppID?: true
  }

  export type TblAppModulesMinAggregateInputType = {
    tblAppModulesID?: true
    moduleID?: true
    AppID?: true
    ModuleName?: true
  }

  export type TblAppModulesMaxAggregateInputType = {
    tblAppModulesID?: true
    moduleID?: true
    AppID?: true
    ModuleName?: true
  }

  export type TblAppModulesCountAggregateInputType = {
    tblAppModulesID?: true
    moduleID?: true
    AppID?: true
    ModuleName?: true
    _all?: true
  }

  export type TblAppModulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAppModules to aggregate.
     */
    where?: tblAppModulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModules to fetch.
     */
    orderBy?: tblAppModulesOrderByWithRelationInput | tblAppModulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblAppModulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblAppModules
    **/
    _count?: true | TblAppModulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblAppModulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblAppModulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblAppModulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblAppModulesMaxAggregateInputType
  }

  export type GetTblAppModulesAggregateType<T extends TblAppModulesAggregateArgs> = {
        [P in keyof T & keyof AggregateTblAppModules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblAppModules[P]>
      : GetScalarType<T[P], AggregateTblAppModules[P]>
  }




  export type tblAppModulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblAppModulesWhereInput
    orderBy?: tblAppModulesOrderByWithAggregationInput | tblAppModulesOrderByWithAggregationInput[]
    by: TblAppModulesScalarFieldEnum[] | TblAppModulesScalarFieldEnum
    having?: tblAppModulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblAppModulesCountAggregateInputType | true
    _avg?: TblAppModulesAvgAggregateInputType
    _sum?: TblAppModulesSumAggregateInputType
    _min?: TblAppModulesMinAggregateInputType
    _max?: TblAppModulesMaxAggregateInputType
  }

  export type TblAppModulesGroupByOutputType = {
    tblAppModulesID: Decimal
    moduleID: Decimal | null
    AppID: Decimal | null
    ModuleName: string | null
    _count: TblAppModulesCountAggregateOutputType | null
    _avg: TblAppModulesAvgAggregateOutputType | null
    _sum: TblAppModulesSumAggregateOutputType | null
    _min: TblAppModulesMinAggregateOutputType | null
    _max: TblAppModulesMaxAggregateOutputType | null
  }

  type GetTblAppModulesGroupByPayload<T extends tblAppModulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblAppModulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblAppModulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblAppModulesGroupByOutputType[P]>
            : GetScalarType<T[P], TblAppModulesGroupByOutputType[P]>
        }
      >
    >


  export type tblAppModulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblAppModulesID?: boolean
    moduleID?: boolean
    AppID?: boolean
    ModuleName?: boolean
  }, ExtArgs["result"]["tblAppModules"]>



  export type tblAppModulesSelectScalar = {
    tblAppModulesID?: boolean
    moduleID?: boolean
    AppID?: boolean
    ModuleName?: boolean
  }

  export type tblAppModulesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblAppModulesID" | "moduleID" | "AppID" | "ModuleName", ExtArgs["result"]["tblAppModules"]>

  export type $tblAppModulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblAppModules"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblAppModulesID: Prisma.Decimal
      moduleID: Prisma.Decimal | null
      AppID: Prisma.Decimal | null
      ModuleName: string | null
    }, ExtArgs["result"]["tblAppModules"]>
    composites: {}
  }

  type tblAppModulesGetPayload<S extends boolean | null | undefined | tblAppModulesDefaultArgs> = $Result.GetResult<Prisma.$tblAppModulesPayload, S>

  type tblAppModulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblAppModulesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblAppModulesCountAggregateInputType | true
    }

  export interface tblAppModulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblAppModules'], meta: { name: 'tblAppModules' } }
    /**
     * Find zero or one TblAppModules that matches the filter.
     * @param {tblAppModulesFindUniqueArgs} args - Arguments to find a TblAppModules
     * @example
     * // Get one TblAppModules
     * const tblAppModules = await prisma.tblAppModules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblAppModulesFindUniqueArgs>(args: SelectSubset<T, tblAppModulesFindUniqueArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblAppModules that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblAppModulesFindUniqueOrThrowArgs} args - Arguments to find a TblAppModules
     * @example
     * // Get one TblAppModules
     * const tblAppModules = await prisma.tblAppModules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblAppModulesFindUniqueOrThrowArgs>(args: SelectSubset<T, tblAppModulesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAppModules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModulesFindFirstArgs} args - Arguments to find a TblAppModules
     * @example
     * // Get one TblAppModules
     * const tblAppModules = await prisma.tblAppModules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblAppModulesFindFirstArgs>(args?: SelectSubset<T, tblAppModulesFindFirstArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblAppModules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModulesFindFirstOrThrowArgs} args - Arguments to find a TblAppModules
     * @example
     * // Get one TblAppModules
     * const tblAppModules = await prisma.tblAppModules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblAppModulesFindFirstOrThrowArgs>(args?: SelectSubset<T, tblAppModulesFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblAppModules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblAppModules
     * const tblAppModules = await prisma.tblAppModules.findMany()
     * 
     * // Get first 10 TblAppModules
     * const tblAppModules = await prisma.tblAppModules.findMany({ take: 10 })
     * 
     * // Only select the `tblAppModulesID`
     * const tblAppModulesWithTblAppModulesIDOnly = await prisma.tblAppModules.findMany({ select: { tblAppModulesID: true } })
     * 
     */
    findMany<T extends tblAppModulesFindManyArgs>(args?: SelectSubset<T, tblAppModulesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblAppModules.
     * @param {tblAppModulesCreateArgs} args - Arguments to create a TblAppModules.
     * @example
     * // Create one TblAppModules
     * const TblAppModules = await prisma.tblAppModules.create({
     *   data: {
     *     // ... data to create a TblAppModules
     *   }
     * })
     * 
     */
    create<T extends tblAppModulesCreateArgs>(args: SelectSubset<T, tblAppModulesCreateArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblAppModules.
     * @param {tblAppModulesCreateManyArgs} args - Arguments to create many TblAppModules.
     * @example
     * // Create many TblAppModules
     * const tblAppModules = await prisma.tblAppModules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblAppModulesCreateManyArgs>(args?: SelectSubset<T, tblAppModulesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblAppModules.
     * @param {tblAppModulesDeleteArgs} args - Arguments to delete one TblAppModules.
     * @example
     * // Delete one TblAppModules
     * const TblAppModules = await prisma.tblAppModules.delete({
     *   where: {
     *     // ... filter to delete one TblAppModules
     *   }
     * })
     * 
     */
    delete<T extends tblAppModulesDeleteArgs>(args: SelectSubset<T, tblAppModulesDeleteArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblAppModules.
     * @param {tblAppModulesUpdateArgs} args - Arguments to update one TblAppModules.
     * @example
     * // Update one TblAppModules
     * const tblAppModules = await prisma.tblAppModules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblAppModulesUpdateArgs>(args: SelectSubset<T, tblAppModulesUpdateArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblAppModules.
     * @param {tblAppModulesDeleteManyArgs} args - Arguments to filter TblAppModules to delete.
     * @example
     * // Delete a few TblAppModules
     * const { count } = await prisma.tblAppModules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblAppModulesDeleteManyArgs>(args?: SelectSubset<T, tblAppModulesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblAppModules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblAppModules
     * const tblAppModules = await prisma.tblAppModules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblAppModulesUpdateManyArgs>(args: SelectSubset<T, tblAppModulesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblAppModules.
     * @param {tblAppModulesUpsertArgs} args - Arguments to update or create a TblAppModules.
     * @example
     * // Update or create a TblAppModules
     * const tblAppModules = await prisma.tblAppModules.upsert({
     *   create: {
     *     // ... data to create a TblAppModules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblAppModules we want to update
     *   }
     * })
     */
    upsert<T extends tblAppModulesUpsertArgs>(args: SelectSubset<T, tblAppModulesUpsertArgs<ExtArgs>>): Prisma__tblAppModulesClient<$Result.GetResult<Prisma.$tblAppModulesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblAppModules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModulesCountArgs} args - Arguments to filter TblAppModules to count.
     * @example
     * // Count the number of TblAppModules
     * const count = await prisma.tblAppModules.count({
     *   where: {
     *     // ... the filter for the TblAppModules we want to count
     *   }
     * })
    **/
    count<T extends tblAppModulesCountArgs>(
      args?: Subset<T, tblAppModulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblAppModulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblAppModules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblAppModulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblAppModulesAggregateArgs>(args: Subset<T, TblAppModulesAggregateArgs>): Prisma.PrismaPromise<GetTblAppModulesAggregateType<T>>

    /**
     * Group by TblAppModules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblAppModulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblAppModulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblAppModulesGroupByArgs['orderBy'] }
        : { orderBy?: tblAppModulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblAppModulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblAppModulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblAppModules model
   */
  readonly fields: tblAppModulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblAppModules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblAppModulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblAppModules model
   */
  interface tblAppModulesFieldRefs {
    readonly tblAppModulesID: FieldRef<"tblAppModules", 'Decimal'>
    readonly moduleID: FieldRef<"tblAppModules", 'Decimal'>
    readonly AppID: FieldRef<"tblAppModules", 'Decimal'>
    readonly ModuleName: FieldRef<"tblAppModules", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblAppModules findUnique
   */
  export type tblAppModulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModules to fetch.
     */
    where: tblAppModulesWhereUniqueInput
  }

  /**
   * tblAppModules findUniqueOrThrow
   */
  export type tblAppModulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModules to fetch.
     */
    where: tblAppModulesWhereUniqueInput
  }

  /**
   * tblAppModules findFirst
   */
  export type tblAppModulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModules to fetch.
     */
    where?: tblAppModulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModules to fetch.
     */
    orderBy?: tblAppModulesOrderByWithRelationInput | tblAppModulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAppModules.
     */
    cursor?: tblAppModulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAppModules.
     */
    distinct?: TblAppModulesScalarFieldEnum | TblAppModulesScalarFieldEnum[]
  }

  /**
   * tblAppModules findFirstOrThrow
   */
  export type tblAppModulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModules to fetch.
     */
    where?: tblAppModulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModules to fetch.
     */
    orderBy?: tblAppModulesOrderByWithRelationInput | tblAppModulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblAppModules.
     */
    cursor?: tblAppModulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblAppModules.
     */
    distinct?: TblAppModulesScalarFieldEnum | TblAppModulesScalarFieldEnum[]
  }

  /**
   * tblAppModules findMany
   */
  export type tblAppModulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * Filter, which tblAppModules to fetch.
     */
    where?: tblAppModulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblAppModules to fetch.
     */
    orderBy?: tblAppModulesOrderByWithRelationInput | tblAppModulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblAppModules.
     */
    cursor?: tblAppModulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblAppModules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblAppModules.
     */
    skip?: number
    distinct?: TblAppModulesScalarFieldEnum | TblAppModulesScalarFieldEnum[]
  }

  /**
   * tblAppModules create
   */
  export type tblAppModulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * The data needed to create a tblAppModules.
     */
    data: XOR<tblAppModulesCreateInput, tblAppModulesUncheckedCreateInput>
  }

  /**
   * tblAppModules createMany
   */
  export type tblAppModulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblAppModules.
     */
    data: tblAppModulesCreateManyInput | tblAppModulesCreateManyInput[]
  }

  /**
   * tblAppModules update
   */
  export type tblAppModulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * The data needed to update a tblAppModules.
     */
    data: XOR<tblAppModulesUpdateInput, tblAppModulesUncheckedUpdateInput>
    /**
     * Choose, which tblAppModules to update.
     */
    where: tblAppModulesWhereUniqueInput
  }

  /**
   * tblAppModules updateMany
   */
  export type tblAppModulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblAppModules.
     */
    data: XOR<tblAppModulesUpdateManyMutationInput, tblAppModulesUncheckedUpdateManyInput>
    /**
     * Filter which tblAppModules to update
     */
    where?: tblAppModulesWhereInput
    /**
     * Limit how many tblAppModules to update.
     */
    limit?: number
  }

  /**
   * tblAppModules upsert
   */
  export type tblAppModulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * The filter to search for the tblAppModules to update in case it exists.
     */
    where: tblAppModulesWhereUniqueInput
    /**
     * In case the tblAppModules found by the `where` argument doesn't exist, create a new tblAppModules with this data.
     */
    create: XOR<tblAppModulesCreateInput, tblAppModulesUncheckedCreateInput>
    /**
     * In case the tblAppModules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblAppModulesUpdateInput, tblAppModulesUncheckedUpdateInput>
  }

  /**
   * tblAppModules delete
   */
  export type tblAppModulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
    /**
     * Filter which tblAppModules to delete.
     */
    where: tblAppModulesWhereUniqueInput
  }

  /**
   * tblAppModules deleteMany
   */
  export type tblAppModulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblAppModules to delete
     */
    where?: tblAppModulesWhereInput
    /**
     * Limit how many tblAppModules to delete.
     */
    limit?: number
  }

  /**
   * tblAppModules without action
   */
  export type tblAppModulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblAppModules
     */
    select?: tblAppModulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblAppModules
     */
    omit?: tblAppModulesOmit<ExtArgs> | null
  }


  /**
   * Model tblConsult
   */

  export type AggregateTblConsult = {
    _count: TblConsultCountAggregateOutputType | null
    _avg: TblConsultAvgAggregateOutputType | null
    _sum: TblConsultSumAggregateOutputType | null
    _min: TblConsultMinAggregateOutputType | null
    _max: TblConsultMaxAggregateOutputType | null
  }

  export type TblConsultAvgAggregateOutputType = {
    tblConsultID: Decimal | null
    tblconsultspecialtyid: Decimal | null
  }

  export type TblConsultSumAggregateOutputType = {
    tblConsultID: Decimal | null
    tblconsultspecialtyid: Decimal | null
  }

  export type TblConsultMinAggregateOutputType = {
    tblConsultID: Decimal | null
    tblconsultspecialtyid: Decimal | null
    specialtyname: string | null
  }

  export type TblConsultMaxAggregateOutputType = {
    tblConsultID: Decimal | null
    tblconsultspecialtyid: Decimal | null
    specialtyname: string | null
  }

  export type TblConsultCountAggregateOutputType = {
    tblConsultID: number
    tblconsultspecialtyid: number
    specialtyname: number
    _all: number
  }


  export type TblConsultAvgAggregateInputType = {
    tblConsultID?: true
    tblconsultspecialtyid?: true
  }

  export type TblConsultSumAggregateInputType = {
    tblConsultID?: true
    tblconsultspecialtyid?: true
  }

  export type TblConsultMinAggregateInputType = {
    tblConsultID?: true
    tblconsultspecialtyid?: true
    specialtyname?: true
  }

  export type TblConsultMaxAggregateInputType = {
    tblConsultID?: true
    tblconsultspecialtyid?: true
    specialtyname?: true
  }

  export type TblConsultCountAggregateInputType = {
    tblConsultID?: true
    tblconsultspecialtyid?: true
    specialtyname?: true
    _all?: true
  }

  export type TblConsultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblConsult to aggregate.
     */
    where?: tblConsultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblConsults to fetch.
     */
    orderBy?: tblConsultOrderByWithRelationInput | tblConsultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblConsultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblConsults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblConsults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblConsults
    **/
    _count?: true | TblConsultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblConsultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblConsultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblConsultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblConsultMaxAggregateInputType
  }

  export type GetTblConsultAggregateType<T extends TblConsultAggregateArgs> = {
        [P in keyof T & keyof AggregateTblConsult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblConsult[P]>
      : GetScalarType<T[P], AggregateTblConsult[P]>
  }




  export type tblConsultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblConsultWhereInput
    orderBy?: tblConsultOrderByWithAggregationInput | tblConsultOrderByWithAggregationInput[]
    by: TblConsultScalarFieldEnum[] | TblConsultScalarFieldEnum
    having?: tblConsultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblConsultCountAggregateInputType | true
    _avg?: TblConsultAvgAggregateInputType
    _sum?: TblConsultSumAggregateInputType
    _min?: TblConsultMinAggregateInputType
    _max?: TblConsultMaxAggregateInputType
  }

  export type TblConsultGroupByOutputType = {
    tblConsultID: Decimal
    tblconsultspecialtyid: Decimal | null
    specialtyname: string | null
    _count: TblConsultCountAggregateOutputType | null
    _avg: TblConsultAvgAggregateOutputType | null
    _sum: TblConsultSumAggregateOutputType | null
    _min: TblConsultMinAggregateOutputType | null
    _max: TblConsultMaxAggregateOutputType | null
  }

  type GetTblConsultGroupByPayload<T extends tblConsultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblConsultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblConsultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblConsultGroupByOutputType[P]>
            : GetScalarType<T[P], TblConsultGroupByOutputType[P]>
        }
      >
    >


  export type tblConsultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblConsultID?: boolean
    tblconsultspecialtyid?: boolean
    specialtyname?: boolean
  }, ExtArgs["result"]["tblConsult"]>



  export type tblConsultSelectScalar = {
    tblConsultID?: boolean
    tblconsultspecialtyid?: boolean
    specialtyname?: boolean
  }

  export type tblConsultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblConsultID" | "tblconsultspecialtyid" | "specialtyname", ExtArgs["result"]["tblConsult"]>

  export type $tblConsultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblConsult"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblConsultID: Prisma.Decimal
      tblconsultspecialtyid: Prisma.Decimal | null
      specialtyname: string | null
    }, ExtArgs["result"]["tblConsult"]>
    composites: {}
  }

  type tblConsultGetPayload<S extends boolean | null | undefined | tblConsultDefaultArgs> = $Result.GetResult<Prisma.$tblConsultPayload, S>

  type tblConsultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblConsultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblConsultCountAggregateInputType | true
    }

  export interface tblConsultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblConsult'], meta: { name: 'tblConsult' } }
    /**
     * Find zero or one TblConsult that matches the filter.
     * @param {tblConsultFindUniqueArgs} args - Arguments to find a TblConsult
     * @example
     * // Get one TblConsult
     * const tblConsult = await prisma.tblConsult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblConsultFindUniqueArgs>(args: SelectSubset<T, tblConsultFindUniqueArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblConsult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblConsultFindUniqueOrThrowArgs} args - Arguments to find a TblConsult
     * @example
     * // Get one TblConsult
     * const tblConsult = await prisma.tblConsult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblConsultFindUniqueOrThrowArgs>(args: SelectSubset<T, tblConsultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblConsult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblConsultFindFirstArgs} args - Arguments to find a TblConsult
     * @example
     * // Get one TblConsult
     * const tblConsult = await prisma.tblConsult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblConsultFindFirstArgs>(args?: SelectSubset<T, tblConsultFindFirstArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblConsult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblConsultFindFirstOrThrowArgs} args - Arguments to find a TblConsult
     * @example
     * // Get one TblConsult
     * const tblConsult = await prisma.tblConsult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblConsultFindFirstOrThrowArgs>(args?: SelectSubset<T, tblConsultFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblConsults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblConsultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblConsults
     * const tblConsults = await prisma.tblConsult.findMany()
     * 
     * // Get first 10 TblConsults
     * const tblConsults = await prisma.tblConsult.findMany({ take: 10 })
     * 
     * // Only select the `tblConsultID`
     * const tblConsultWithTblConsultIDOnly = await prisma.tblConsult.findMany({ select: { tblConsultID: true } })
     * 
     */
    findMany<T extends tblConsultFindManyArgs>(args?: SelectSubset<T, tblConsultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblConsult.
     * @param {tblConsultCreateArgs} args - Arguments to create a TblConsult.
     * @example
     * // Create one TblConsult
     * const TblConsult = await prisma.tblConsult.create({
     *   data: {
     *     // ... data to create a TblConsult
     *   }
     * })
     * 
     */
    create<T extends tblConsultCreateArgs>(args: SelectSubset<T, tblConsultCreateArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblConsults.
     * @param {tblConsultCreateManyArgs} args - Arguments to create many TblConsults.
     * @example
     * // Create many TblConsults
     * const tblConsult = await prisma.tblConsult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblConsultCreateManyArgs>(args?: SelectSubset<T, tblConsultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblConsult.
     * @param {tblConsultDeleteArgs} args - Arguments to delete one TblConsult.
     * @example
     * // Delete one TblConsult
     * const TblConsult = await prisma.tblConsult.delete({
     *   where: {
     *     // ... filter to delete one TblConsult
     *   }
     * })
     * 
     */
    delete<T extends tblConsultDeleteArgs>(args: SelectSubset<T, tblConsultDeleteArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblConsult.
     * @param {tblConsultUpdateArgs} args - Arguments to update one TblConsult.
     * @example
     * // Update one TblConsult
     * const tblConsult = await prisma.tblConsult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblConsultUpdateArgs>(args: SelectSubset<T, tblConsultUpdateArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblConsults.
     * @param {tblConsultDeleteManyArgs} args - Arguments to filter TblConsults to delete.
     * @example
     * // Delete a few TblConsults
     * const { count } = await prisma.tblConsult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblConsultDeleteManyArgs>(args?: SelectSubset<T, tblConsultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblConsults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblConsultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblConsults
     * const tblConsult = await prisma.tblConsult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblConsultUpdateManyArgs>(args: SelectSubset<T, tblConsultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblConsult.
     * @param {tblConsultUpsertArgs} args - Arguments to update or create a TblConsult.
     * @example
     * // Update or create a TblConsult
     * const tblConsult = await prisma.tblConsult.upsert({
     *   create: {
     *     // ... data to create a TblConsult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblConsult we want to update
     *   }
     * })
     */
    upsert<T extends tblConsultUpsertArgs>(args: SelectSubset<T, tblConsultUpsertArgs<ExtArgs>>): Prisma__tblConsultClient<$Result.GetResult<Prisma.$tblConsultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblConsults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblConsultCountArgs} args - Arguments to filter TblConsults to count.
     * @example
     * // Count the number of TblConsults
     * const count = await prisma.tblConsult.count({
     *   where: {
     *     // ... the filter for the TblConsults we want to count
     *   }
     * })
    **/
    count<T extends tblConsultCountArgs>(
      args?: Subset<T, tblConsultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblConsultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblConsult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblConsultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblConsultAggregateArgs>(args: Subset<T, TblConsultAggregateArgs>): Prisma.PrismaPromise<GetTblConsultAggregateType<T>>

    /**
     * Group by TblConsult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblConsultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblConsultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblConsultGroupByArgs['orderBy'] }
        : { orderBy?: tblConsultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblConsultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblConsultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblConsult model
   */
  readonly fields: tblConsultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblConsult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblConsultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblConsult model
   */
  interface tblConsultFieldRefs {
    readonly tblConsultID: FieldRef<"tblConsult", 'Decimal'>
    readonly tblconsultspecialtyid: FieldRef<"tblConsult", 'Decimal'>
    readonly specialtyname: FieldRef<"tblConsult", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblConsult findUnique
   */
  export type tblConsultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * Filter, which tblConsult to fetch.
     */
    where: tblConsultWhereUniqueInput
  }

  /**
   * tblConsult findUniqueOrThrow
   */
  export type tblConsultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * Filter, which tblConsult to fetch.
     */
    where: tblConsultWhereUniqueInput
  }

  /**
   * tblConsult findFirst
   */
  export type tblConsultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * Filter, which tblConsult to fetch.
     */
    where?: tblConsultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblConsults to fetch.
     */
    orderBy?: tblConsultOrderByWithRelationInput | tblConsultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblConsults.
     */
    cursor?: tblConsultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblConsults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblConsults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblConsults.
     */
    distinct?: TblConsultScalarFieldEnum | TblConsultScalarFieldEnum[]
  }

  /**
   * tblConsult findFirstOrThrow
   */
  export type tblConsultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * Filter, which tblConsult to fetch.
     */
    where?: tblConsultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblConsults to fetch.
     */
    orderBy?: tblConsultOrderByWithRelationInput | tblConsultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblConsults.
     */
    cursor?: tblConsultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblConsults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblConsults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblConsults.
     */
    distinct?: TblConsultScalarFieldEnum | TblConsultScalarFieldEnum[]
  }

  /**
   * tblConsult findMany
   */
  export type tblConsultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * Filter, which tblConsults to fetch.
     */
    where?: tblConsultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblConsults to fetch.
     */
    orderBy?: tblConsultOrderByWithRelationInput | tblConsultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblConsults.
     */
    cursor?: tblConsultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblConsults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblConsults.
     */
    skip?: number
    distinct?: TblConsultScalarFieldEnum | TblConsultScalarFieldEnum[]
  }

  /**
   * tblConsult create
   */
  export type tblConsultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * The data needed to create a tblConsult.
     */
    data: XOR<tblConsultCreateInput, tblConsultUncheckedCreateInput>
  }

  /**
   * tblConsult createMany
   */
  export type tblConsultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblConsults.
     */
    data: tblConsultCreateManyInput | tblConsultCreateManyInput[]
  }

  /**
   * tblConsult update
   */
  export type tblConsultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * The data needed to update a tblConsult.
     */
    data: XOR<tblConsultUpdateInput, tblConsultUncheckedUpdateInput>
    /**
     * Choose, which tblConsult to update.
     */
    where: tblConsultWhereUniqueInput
  }

  /**
   * tblConsult updateMany
   */
  export type tblConsultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblConsults.
     */
    data: XOR<tblConsultUpdateManyMutationInput, tblConsultUncheckedUpdateManyInput>
    /**
     * Filter which tblConsults to update
     */
    where?: tblConsultWhereInput
    /**
     * Limit how many tblConsults to update.
     */
    limit?: number
  }

  /**
   * tblConsult upsert
   */
  export type tblConsultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * The filter to search for the tblConsult to update in case it exists.
     */
    where: tblConsultWhereUniqueInput
    /**
     * In case the tblConsult found by the `where` argument doesn't exist, create a new tblConsult with this data.
     */
    create: XOR<tblConsultCreateInput, tblConsultUncheckedCreateInput>
    /**
     * In case the tblConsult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblConsultUpdateInput, tblConsultUncheckedUpdateInput>
  }

  /**
   * tblConsult delete
   */
  export type tblConsultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
    /**
     * Filter which tblConsult to delete.
     */
    where: tblConsultWhereUniqueInput
  }

  /**
   * tblConsult deleteMany
   */
  export type tblConsultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblConsults to delete
     */
    where?: tblConsultWhereInput
    /**
     * Limit how many tblConsults to delete.
     */
    limit?: number
  }

  /**
   * tblConsult without action
   */
  export type tblConsultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblConsult
     */
    select?: tblConsultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblConsult
     */
    omit?: tblConsultOmit<ExtArgs> | null
  }


  /**
   * Model tblCounter
   */

  export type AggregateTblCounter = {
    _count: TblCounterCountAggregateOutputType | null
    _avg: TblCounterAvgAggregateOutputType | null
    _sum: TblCounterSumAggregateOutputType | null
    _min: TblCounterMinAggregateOutputType | null
    _max: TblCounterMaxAggregateOutputType | null
  }

  export type TblCounterAvgAggregateOutputType = {
    tblCounterID: Decimal | null
    currentCount: Decimal | null
    ratz: Decimal | null
    acu: Decimal | null
    ucc: Decimal | null
    triageout: Decimal | null
  }

  export type TblCounterSumAggregateOutputType = {
    tblCounterID: Decimal | null
    currentCount: Decimal | null
    ratz: Decimal | null
    acu: Decimal | null
    ucc: Decimal | null
    triageout: Decimal | null
  }

  export type TblCounterMinAggregateOutputType = {
    tblCounterID: Decimal | null
    currentCount: Decimal | null
    ratz: Decimal | null
    acu: Decimal | null
    ucc: Decimal | null
    triageout: Decimal | null
  }

  export type TblCounterMaxAggregateOutputType = {
    tblCounterID: Decimal | null
    currentCount: Decimal | null
    ratz: Decimal | null
    acu: Decimal | null
    ucc: Decimal | null
    triageout: Decimal | null
  }

  export type TblCounterCountAggregateOutputType = {
    tblCounterID: number
    currentCount: number
    ratz: number
    acu: number
    ucc: number
    triageout: number
    _all: number
  }


  export type TblCounterAvgAggregateInputType = {
    tblCounterID?: true
    currentCount?: true
    ratz?: true
    acu?: true
    ucc?: true
    triageout?: true
  }

  export type TblCounterSumAggregateInputType = {
    tblCounterID?: true
    currentCount?: true
    ratz?: true
    acu?: true
    ucc?: true
    triageout?: true
  }

  export type TblCounterMinAggregateInputType = {
    tblCounterID?: true
    currentCount?: true
    ratz?: true
    acu?: true
    ucc?: true
    triageout?: true
  }

  export type TblCounterMaxAggregateInputType = {
    tblCounterID?: true
    currentCount?: true
    ratz?: true
    acu?: true
    ucc?: true
    triageout?: true
  }

  export type TblCounterCountAggregateInputType = {
    tblCounterID?: true
    currentCount?: true
    ratz?: true
    acu?: true
    ucc?: true
    triageout?: true
    _all?: true
  }

  export type TblCounterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblCounter to aggregate.
     */
    where?: tblCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblCounters to fetch.
     */
    orderBy?: tblCounterOrderByWithRelationInput | tblCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblCounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblCounters
    **/
    _count?: true | TblCounterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblCounterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblCounterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblCounterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblCounterMaxAggregateInputType
  }

  export type GetTblCounterAggregateType<T extends TblCounterAggregateArgs> = {
        [P in keyof T & keyof AggregateTblCounter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblCounter[P]>
      : GetScalarType<T[P], AggregateTblCounter[P]>
  }




  export type tblCounterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblCounterWhereInput
    orderBy?: tblCounterOrderByWithAggregationInput | tblCounterOrderByWithAggregationInput[]
    by: TblCounterScalarFieldEnum[] | TblCounterScalarFieldEnum
    having?: tblCounterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblCounterCountAggregateInputType | true
    _avg?: TblCounterAvgAggregateInputType
    _sum?: TblCounterSumAggregateInputType
    _min?: TblCounterMinAggregateInputType
    _max?: TblCounterMaxAggregateInputType
  }

  export type TblCounterGroupByOutputType = {
    tblCounterID: Decimal
    currentCount: Decimal | null
    ratz: Decimal | null
    acu: Decimal | null
    ucc: Decimal | null
    triageout: Decimal | null
    _count: TblCounterCountAggregateOutputType | null
    _avg: TblCounterAvgAggregateOutputType | null
    _sum: TblCounterSumAggregateOutputType | null
    _min: TblCounterMinAggregateOutputType | null
    _max: TblCounterMaxAggregateOutputType | null
  }

  type GetTblCounterGroupByPayload<T extends tblCounterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblCounterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblCounterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblCounterGroupByOutputType[P]>
            : GetScalarType<T[P], TblCounterGroupByOutputType[P]>
        }
      >
    >


  export type tblCounterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblCounterID?: boolean
    currentCount?: boolean
    ratz?: boolean
    acu?: boolean
    ucc?: boolean
    triageout?: boolean
  }, ExtArgs["result"]["tblCounter"]>



  export type tblCounterSelectScalar = {
    tblCounterID?: boolean
    currentCount?: boolean
    ratz?: boolean
    acu?: boolean
    ucc?: boolean
    triageout?: boolean
  }

  export type tblCounterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblCounterID" | "currentCount" | "ratz" | "acu" | "ucc" | "triageout", ExtArgs["result"]["tblCounter"]>

  export type $tblCounterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblCounter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblCounterID: Prisma.Decimal
      currentCount: Prisma.Decimal | null
      ratz: Prisma.Decimal | null
      acu: Prisma.Decimal | null
      ucc: Prisma.Decimal | null
      triageout: Prisma.Decimal | null
    }, ExtArgs["result"]["tblCounter"]>
    composites: {}
  }

  type tblCounterGetPayload<S extends boolean | null | undefined | tblCounterDefaultArgs> = $Result.GetResult<Prisma.$tblCounterPayload, S>

  type tblCounterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblCounterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblCounterCountAggregateInputType | true
    }

  export interface tblCounterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblCounter'], meta: { name: 'tblCounter' } }
    /**
     * Find zero or one TblCounter that matches the filter.
     * @param {tblCounterFindUniqueArgs} args - Arguments to find a TblCounter
     * @example
     * // Get one TblCounter
     * const tblCounter = await prisma.tblCounter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblCounterFindUniqueArgs>(args: SelectSubset<T, tblCounterFindUniqueArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblCounter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblCounterFindUniqueOrThrowArgs} args - Arguments to find a TblCounter
     * @example
     * // Get one TblCounter
     * const tblCounter = await prisma.tblCounter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblCounterFindUniqueOrThrowArgs>(args: SelectSubset<T, tblCounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblCounter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblCounterFindFirstArgs} args - Arguments to find a TblCounter
     * @example
     * // Get one TblCounter
     * const tblCounter = await prisma.tblCounter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblCounterFindFirstArgs>(args?: SelectSubset<T, tblCounterFindFirstArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblCounter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblCounterFindFirstOrThrowArgs} args - Arguments to find a TblCounter
     * @example
     * // Get one TblCounter
     * const tblCounter = await prisma.tblCounter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblCounterFindFirstOrThrowArgs>(args?: SelectSubset<T, tblCounterFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblCounters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblCounterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblCounters
     * const tblCounters = await prisma.tblCounter.findMany()
     * 
     * // Get first 10 TblCounters
     * const tblCounters = await prisma.tblCounter.findMany({ take: 10 })
     * 
     * // Only select the `tblCounterID`
     * const tblCounterWithTblCounterIDOnly = await prisma.tblCounter.findMany({ select: { tblCounterID: true } })
     * 
     */
    findMany<T extends tblCounterFindManyArgs>(args?: SelectSubset<T, tblCounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblCounter.
     * @param {tblCounterCreateArgs} args - Arguments to create a TblCounter.
     * @example
     * // Create one TblCounter
     * const TblCounter = await prisma.tblCounter.create({
     *   data: {
     *     // ... data to create a TblCounter
     *   }
     * })
     * 
     */
    create<T extends tblCounterCreateArgs>(args: SelectSubset<T, tblCounterCreateArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblCounters.
     * @param {tblCounterCreateManyArgs} args - Arguments to create many TblCounters.
     * @example
     * // Create many TblCounters
     * const tblCounter = await prisma.tblCounter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblCounterCreateManyArgs>(args?: SelectSubset<T, tblCounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblCounter.
     * @param {tblCounterDeleteArgs} args - Arguments to delete one TblCounter.
     * @example
     * // Delete one TblCounter
     * const TblCounter = await prisma.tblCounter.delete({
     *   where: {
     *     // ... filter to delete one TblCounter
     *   }
     * })
     * 
     */
    delete<T extends tblCounterDeleteArgs>(args: SelectSubset<T, tblCounterDeleteArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblCounter.
     * @param {tblCounterUpdateArgs} args - Arguments to update one TblCounter.
     * @example
     * // Update one TblCounter
     * const tblCounter = await prisma.tblCounter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblCounterUpdateArgs>(args: SelectSubset<T, tblCounterUpdateArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblCounters.
     * @param {tblCounterDeleteManyArgs} args - Arguments to filter TblCounters to delete.
     * @example
     * // Delete a few TblCounters
     * const { count } = await prisma.tblCounter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblCounterDeleteManyArgs>(args?: SelectSubset<T, tblCounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblCounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblCounterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblCounters
     * const tblCounter = await prisma.tblCounter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblCounterUpdateManyArgs>(args: SelectSubset<T, tblCounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblCounter.
     * @param {tblCounterUpsertArgs} args - Arguments to update or create a TblCounter.
     * @example
     * // Update or create a TblCounter
     * const tblCounter = await prisma.tblCounter.upsert({
     *   create: {
     *     // ... data to create a TblCounter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblCounter we want to update
     *   }
     * })
     */
    upsert<T extends tblCounterUpsertArgs>(args: SelectSubset<T, tblCounterUpsertArgs<ExtArgs>>): Prisma__tblCounterClient<$Result.GetResult<Prisma.$tblCounterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblCounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblCounterCountArgs} args - Arguments to filter TblCounters to count.
     * @example
     * // Count the number of TblCounters
     * const count = await prisma.tblCounter.count({
     *   where: {
     *     // ... the filter for the TblCounters we want to count
     *   }
     * })
    **/
    count<T extends tblCounterCountArgs>(
      args?: Subset<T, tblCounterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblCounterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblCounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblCounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblCounterAggregateArgs>(args: Subset<T, TblCounterAggregateArgs>): Prisma.PrismaPromise<GetTblCounterAggregateType<T>>

    /**
     * Group by TblCounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblCounterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblCounterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblCounterGroupByArgs['orderBy'] }
        : { orderBy?: tblCounterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblCounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblCounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblCounter model
   */
  readonly fields: tblCounterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblCounter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblCounterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblCounter model
   */
  interface tblCounterFieldRefs {
    readonly tblCounterID: FieldRef<"tblCounter", 'Decimal'>
    readonly currentCount: FieldRef<"tblCounter", 'Decimal'>
    readonly ratz: FieldRef<"tblCounter", 'Decimal'>
    readonly acu: FieldRef<"tblCounter", 'Decimal'>
    readonly ucc: FieldRef<"tblCounter", 'Decimal'>
    readonly triageout: FieldRef<"tblCounter", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tblCounter findUnique
   */
  export type tblCounterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * Filter, which tblCounter to fetch.
     */
    where: tblCounterWhereUniqueInput
  }

  /**
   * tblCounter findUniqueOrThrow
   */
  export type tblCounterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * Filter, which tblCounter to fetch.
     */
    where: tblCounterWhereUniqueInput
  }

  /**
   * tblCounter findFirst
   */
  export type tblCounterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * Filter, which tblCounter to fetch.
     */
    where?: tblCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblCounters to fetch.
     */
    orderBy?: tblCounterOrderByWithRelationInput | tblCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblCounters.
     */
    cursor?: tblCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblCounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblCounters.
     */
    distinct?: TblCounterScalarFieldEnum | TblCounterScalarFieldEnum[]
  }

  /**
   * tblCounter findFirstOrThrow
   */
  export type tblCounterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * Filter, which tblCounter to fetch.
     */
    where?: tblCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblCounters to fetch.
     */
    orderBy?: tblCounterOrderByWithRelationInput | tblCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblCounters.
     */
    cursor?: tblCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblCounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblCounters.
     */
    distinct?: TblCounterScalarFieldEnum | TblCounterScalarFieldEnum[]
  }

  /**
   * tblCounter findMany
   */
  export type tblCounterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * Filter, which tblCounters to fetch.
     */
    where?: tblCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblCounters to fetch.
     */
    orderBy?: tblCounterOrderByWithRelationInput | tblCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblCounters.
     */
    cursor?: tblCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblCounters.
     */
    skip?: number
    distinct?: TblCounterScalarFieldEnum | TblCounterScalarFieldEnum[]
  }

  /**
   * tblCounter create
   */
  export type tblCounterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * The data needed to create a tblCounter.
     */
    data: XOR<tblCounterCreateInput, tblCounterUncheckedCreateInput>
  }

  /**
   * tblCounter createMany
   */
  export type tblCounterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblCounters.
     */
    data: tblCounterCreateManyInput | tblCounterCreateManyInput[]
  }

  /**
   * tblCounter update
   */
  export type tblCounterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * The data needed to update a tblCounter.
     */
    data: XOR<tblCounterUpdateInput, tblCounterUncheckedUpdateInput>
    /**
     * Choose, which tblCounter to update.
     */
    where: tblCounterWhereUniqueInput
  }

  /**
   * tblCounter updateMany
   */
  export type tblCounterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblCounters.
     */
    data: XOR<tblCounterUpdateManyMutationInput, tblCounterUncheckedUpdateManyInput>
    /**
     * Filter which tblCounters to update
     */
    where?: tblCounterWhereInput
    /**
     * Limit how many tblCounters to update.
     */
    limit?: number
  }

  /**
   * tblCounter upsert
   */
  export type tblCounterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * The filter to search for the tblCounter to update in case it exists.
     */
    where: tblCounterWhereUniqueInput
    /**
     * In case the tblCounter found by the `where` argument doesn't exist, create a new tblCounter with this data.
     */
    create: XOR<tblCounterCreateInput, tblCounterUncheckedCreateInput>
    /**
     * In case the tblCounter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblCounterUpdateInput, tblCounterUncheckedUpdateInput>
  }

  /**
   * tblCounter delete
   */
  export type tblCounterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
    /**
     * Filter which tblCounter to delete.
     */
    where: tblCounterWhereUniqueInput
  }

  /**
   * tblCounter deleteMany
   */
  export type tblCounterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblCounters to delete
     */
    where?: tblCounterWhereInput
    /**
     * Limit how many tblCounters to delete.
     */
    limit?: number
  }

  /**
   * tblCounter without action
   */
  export type tblCounterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblCounter
     */
    select?: tblCounterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblCounter
     */
    omit?: tblCounterOmit<ExtArgs> | null
  }


  /**
   * Model tblDepartment
   */

  export type AggregateTblDepartment = {
    _count: TblDepartmentCountAggregateOutputType | null
    _avg: TblDepartmentAvgAggregateOutputType | null
    _sum: TblDepartmentSumAggregateOutputType | null
    _min: TblDepartmentMinAggregateOutputType | null
    _max: TblDepartmentMaxAggregateOutputType | null
  }

  export type TblDepartmentAvgAggregateOutputType = {
    tblDepartmentID: Decimal | null
  }

  export type TblDepartmentSumAggregateOutputType = {
    tblDepartmentID: Decimal | null
  }

  export type TblDepartmentMinAggregateOutputType = {
    tblDepartmentID: Decimal | null
    deptcode: string | null
    deptname: string | null
  }

  export type TblDepartmentMaxAggregateOutputType = {
    tblDepartmentID: Decimal | null
    deptcode: string | null
    deptname: string | null
  }

  export type TblDepartmentCountAggregateOutputType = {
    tblDepartmentID: number
    deptcode: number
    deptname: number
    _all: number
  }


  export type TblDepartmentAvgAggregateInputType = {
    tblDepartmentID?: true
  }

  export type TblDepartmentSumAggregateInputType = {
    tblDepartmentID?: true
  }

  export type TblDepartmentMinAggregateInputType = {
    tblDepartmentID?: true
    deptcode?: true
    deptname?: true
  }

  export type TblDepartmentMaxAggregateInputType = {
    tblDepartmentID?: true
    deptcode?: true
    deptname?: true
  }

  export type TblDepartmentCountAggregateInputType = {
    tblDepartmentID?: true
    deptcode?: true
    deptname?: true
    _all?: true
  }

  export type TblDepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblDepartment to aggregate.
     */
    where?: tblDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblDepartments to fetch.
     */
    orderBy?: tblDepartmentOrderByWithRelationInput | tblDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblDepartments
    **/
    _count?: true | TblDepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblDepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblDepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblDepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblDepartmentMaxAggregateInputType
  }

  export type GetTblDepartmentAggregateType<T extends TblDepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTblDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblDepartment[P]>
      : GetScalarType<T[P], AggregateTblDepartment[P]>
  }




  export type tblDepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblDepartmentWhereInput
    orderBy?: tblDepartmentOrderByWithAggregationInput | tblDepartmentOrderByWithAggregationInput[]
    by: TblDepartmentScalarFieldEnum[] | TblDepartmentScalarFieldEnum
    having?: tblDepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblDepartmentCountAggregateInputType | true
    _avg?: TblDepartmentAvgAggregateInputType
    _sum?: TblDepartmentSumAggregateInputType
    _min?: TblDepartmentMinAggregateInputType
    _max?: TblDepartmentMaxAggregateInputType
  }

  export type TblDepartmentGroupByOutputType = {
    tblDepartmentID: Decimal
    deptcode: string | null
    deptname: string | null
    _count: TblDepartmentCountAggregateOutputType | null
    _avg: TblDepartmentAvgAggregateOutputType | null
    _sum: TblDepartmentSumAggregateOutputType | null
    _min: TblDepartmentMinAggregateOutputType | null
    _max: TblDepartmentMaxAggregateOutputType | null
  }

  type GetTblDepartmentGroupByPayload<T extends tblDepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblDepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblDepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblDepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], TblDepartmentGroupByOutputType[P]>
        }
      >
    >


  export type tblDepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblDepartmentID?: boolean
    deptcode?: boolean
    deptname?: boolean
    Patient?: boolean | tblDepartment$PatientArgs<ExtArgs>
    _count?: boolean | TblDepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tblDepartment"]>



  export type tblDepartmentSelectScalar = {
    tblDepartmentID?: boolean
    deptcode?: boolean
    deptname?: boolean
  }

  export type tblDepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblDepartmentID" | "deptcode" | "deptname", ExtArgs["result"]["tblDepartment"]>
  export type tblDepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | tblDepartment$PatientArgs<ExtArgs>
    _count?: boolean | TblDepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $tblDepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblDepartment"
    objects: {
      Patient: Prisma.$PatientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      tblDepartmentID: Prisma.Decimal
      deptcode: string | null
      deptname: string | null
    }, ExtArgs["result"]["tblDepartment"]>
    composites: {}
  }

  type tblDepartmentGetPayload<S extends boolean | null | undefined | tblDepartmentDefaultArgs> = $Result.GetResult<Prisma.$tblDepartmentPayload, S>

  type tblDepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblDepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblDepartmentCountAggregateInputType | true
    }

  export interface tblDepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblDepartment'], meta: { name: 'tblDepartment' } }
    /**
     * Find zero or one TblDepartment that matches the filter.
     * @param {tblDepartmentFindUniqueArgs} args - Arguments to find a TblDepartment
     * @example
     * // Get one TblDepartment
     * const tblDepartment = await prisma.tblDepartment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblDepartmentFindUniqueArgs>(args: SelectSubset<T, tblDepartmentFindUniqueArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblDepartment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblDepartmentFindUniqueOrThrowArgs} args - Arguments to find a TblDepartment
     * @example
     * // Get one TblDepartment
     * const tblDepartment = await prisma.tblDepartment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblDepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, tblDepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblDepartment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblDepartmentFindFirstArgs} args - Arguments to find a TblDepartment
     * @example
     * // Get one TblDepartment
     * const tblDepartment = await prisma.tblDepartment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblDepartmentFindFirstArgs>(args?: SelectSubset<T, tblDepartmentFindFirstArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblDepartment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblDepartmentFindFirstOrThrowArgs} args - Arguments to find a TblDepartment
     * @example
     * // Get one TblDepartment
     * const tblDepartment = await prisma.tblDepartment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblDepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, tblDepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblDepartments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblDepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblDepartments
     * const tblDepartments = await prisma.tblDepartment.findMany()
     * 
     * // Get first 10 TblDepartments
     * const tblDepartments = await prisma.tblDepartment.findMany({ take: 10 })
     * 
     * // Only select the `tblDepartmentID`
     * const tblDepartmentWithTblDepartmentIDOnly = await prisma.tblDepartment.findMany({ select: { tblDepartmentID: true } })
     * 
     */
    findMany<T extends tblDepartmentFindManyArgs>(args?: SelectSubset<T, tblDepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblDepartment.
     * @param {tblDepartmentCreateArgs} args - Arguments to create a TblDepartment.
     * @example
     * // Create one TblDepartment
     * const TblDepartment = await prisma.tblDepartment.create({
     *   data: {
     *     // ... data to create a TblDepartment
     *   }
     * })
     * 
     */
    create<T extends tblDepartmentCreateArgs>(args: SelectSubset<T, tblDepartmentCreateArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblDepartments.
     * @param {tblDepartmentCreateManyArgs} args - Arguments to create many TblDepartments.
     * @example
     * // Create many TblDepartments
     * const tblDepartment = await prisma.tblDepartment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblDepartmentCreateManyArgs>(args?: SelectSubset<T, tblDepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblDepartment.
     * @param {tblDepartmentDeleteArgs} args - Arguments to delete one TblDepartment.
     * @example
     * // Delete one TblDepartment
     * const TblDepartment = await prisma.tblDepartment.delete({
     *   where: {
     *     // ... filter to delete one TblDepartment
     *   }
     * })
     * 
     */
    delete<T extends tblDepartmentDeleteArgs>(args: SelectSubset<T, tblDepartmentDeleteArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblDepartment.
     * @param {tblDepartmentUpdateArgs} args - Arguments to update one TblDepartment.
     * @example
     * // Update one TblDepartment
     * const tblDepartment = await prisma.tblDepartment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblDepartmentUpdateArgs>(args: SelectSubset<T, tblDepartmentUpdateArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblDepartments.
     * @param {tblDepartmentDeleteManyArgs} args - Arguments to filter TblDepartments to delete.
     * @example
     * // Delete a few TblDepartments
     * const { count } = await prisma.tblDepartment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblDepartmentDeleteManyArgs>(args?: SelectSubset<T, tblDepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblDepartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblDepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblDepartments
     * const tblDepartment = await prisma.tblDepartment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblDepartmentUpdateManyArgs>(args: SelectSubset<T, tblDepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblDepartment.
     * @param {tblDepartmentUpsertArgs} args - Arguments to update or create a TblDepartment.
     * @example
     * // Update or create a TblDepartment
     * const tblDepartment = await prisma.tblDepartment.upsert({
     *   create: {
     *     // ... data to create a TblDepartment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblDepartment we want to update
     *   }
     * })
     */
    upsert<T extends tblDepartmentUpsertArgs>(args: SelectSubset<T, tblDepartmentUpsertArgs<ExtArgs>>): Prisma__tblDepartmentClient<$Result.GetResult<Prisma.$tblDepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblDepartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblDepartmentCountArgs} args - Arguments to filter TblDepartments to count.
     * @example
     * // Count the number of TblDepartments
     * const count = await prisma.tblDepartment.count({
     *   where: {
     *     // ... the filter for the TblDepartments we want to count
     *   }
     * })
    **/
    count<T extends tblDepartmentCountArgs>(
      args?: Subset<T, tblDepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblDepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblDepartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblDepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblDepartmentAggregateArgs>(args: Subset<T, TblDepartmentAggregateArgs>): Prisma.PrismaPromise<GetTblDepartmentAggregateType<T>>

    /**
     * Group by TblDepartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblDepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblDepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblDepartmentGroupByArgs['orderBy'] }
        : { orderBy?: tblDepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblDepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblDepartment model
   */
  readonly fields: tblDepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblDepartment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblDepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Patient<T extends tblDepartment$PatientArgs<ExtArgs> = {}>(args?: Subset<T, tblDepartment$PatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblDepartment model
   */
  interface tblDepartmentFieldRefs {
    readonly tblDepartmentID: FieldRef<"tblDepartment", 'Decimal'>
    readonly deptcode: FieldRef<"tblDepartment", 'String'>
    readonly deptname: FieldRef<"tblDepartment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblDepartment findUnique
   */
  export type tblDepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which tblDepartment to fetch.
     */
    where: tblDepartmentWhereUniqueInput
  }

  /**
   * tblDepartment findUniqueOrThrow
   */
  export type tblDepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which tblDepartment to fetch.
     */
    where: tblDepartmentWhereUniqueInput
  }

  /**
   * tblDepartment findFirst
   */
  export type tblDepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which tblDepartment to fetch.
     */
    where?: tblDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblDepartments to fetch.
     */
    orderBy?: tblDepartmentOrderByWithRelationInput | tblDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblDepartments.
     */
    cursor?: tblDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblDepartments.
     */
    distinct?: TblDepartmentScalarFieldEnum | TblDepartmentScalarFieldEnum[]
  }

  /**
   * tblDepartment findFirstOrThrow
   */
  export type tblDepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which tblDepartment to fetch.
     */
    where?: tblDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblDepartments to fetch.
     */
    orderBy?: tblDepartmentOrderByWithRelationInput | tblDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblDepartments.
     */
    cursor?: tblDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblDepartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblDepartments.
     */
    distinct?: TblDepartmentScalarFieldEnum | TblDepartmentScalarFieldEnum[]
  }

  /**
   * tblDepartment findMany
   */
  export type tblDepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * Filter, which tblDepartments to fetch.
     */
    where?: tblDepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblDepartments to fetch.
     */
    orderBy?: tblDepartmentOrderByWithRelationInput | tblDepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblDepartments.
     */
    cursor?: tblDepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblDepartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblDepartments.
     */
    skip?: number
    distinct?: TblDepartmentScalarFieldEnum | TblDepartmentScalarFieldEnum[]
  }

  /**
   * tblDepartment create
   */
  export type tblDepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a tblDepartment.
     */
    data: XOR<tblDepartmentCreateInput, tblDepartmentUncheckedCreateInput>
  }

  /**
   * tblDepartment createMany
   */
  export type tblDepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblDepartments.
     */
    data: tblDepartmentCreateManyInput | tblDepartmentCreateManyInput[]
  }

  /**
   * tblDepartment update
   */
  export type tblDepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a tblDepartment.
     */
    data: XOR<tblDepartmentUpdateInput, tblDepartmentUncheckedUpdateInput>
    /**
     * Choose, which tblDepartment to update.
     */
    where: tblDepartmentWhereUniqueInput
  }

  /**
   * tblDepartment updateMany
   */
  export type tblDepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblDepartments.
     */
    data: XOR<tblDepartmentUpdateManyMutationInput, tblDepartmentUncheckedUpdateManyInput>
    /**
     * Filter which tblDepartments to update
     */
    where?: tblDepartmentWhereInput
    /**
     * Limit how many tblDepartments to update.
     */
    limit?: number
  }

  /**
   * tblDepartment upsert
   */
  export type tblDepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the tblDepartment to update in case it exists.
     */
    where: tblDepartmentWhereUniqueInput
    /**
     * In case the tblDepartment found by the `where` argument doesn't exist, create a new tblDepartment with this data.
     */
    create: XOR<tblDepartmentCreateInput, tblDepartmentUncheckedCreateInput>
    /**
     * In case the tblDepartment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblDepartmentUpdateInput, tblDepartmentUncheckedUpdateInput>
  }

  /**
   * tblDepartment delete
   */
  export type tblDepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
    /**
     * Filter which tblDepartment to delete.
     */
    where: tblDepartmentWhereUniqueInput
  }

  /**
   * tblDepartment deleteMany
   */
  export type tblDepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblDepartments to delete
     */
    where?: tblDepartmentWhereInput
    /**
     * Limit how many tblDepartments to delete.
     */
    limit?: number
  }

  /**
   * tblDepartment.Patient
   */
  export type tblDepartment$PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * tblDepartment without action
   */
  export type tblDepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblDepartment
     */
    select?: tblDepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblDepartment
     */
    omit?: tblDepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tblDepartmentInclude<ExtArgs> | null
  }


  /**
   * Model tblLocation
   */

  export type AggregateTblLocation = {
    _count: TblLocationCountAggregateOutputType | null
    _avg: TblLocationAvgAggregateOutputType | null
    _sum: TblLocationSumAggregateOutputType | null
    _min: TblLocationMinAggregateOutputType | null
    _max: TblLocationMaxAggregateOutputType | null
  }

  export type TblLocationAvgAggregateOutputType = {
    tblLocationID: Decimal | null
  }

  export type TblLocationSumAggregateOutputType = {
    tblLocationID: Decimal | null
  }

  export type TblLocationMinAggregateOutputType = {
    tblLocationID: Decimal | null
    loccode: string | null
    deptcode: string | null
    locationname: string | null
  }

  export type TblLocationMaxAggregateOutputType = {
    tblLocationID: Decimal | null
    loccode: string | null
    deptcode: string | null
    locationname: string | null
  }

  export type TblLocationCountAggregateOutputType = {
    tblLocationID: number
    loccode: number
    deptcode: number
    locationname: number
    _all: number
  }


  export type TblLocationAvgAggregateInputType = {
    tblLocationID?: true
  }

  export type TblLocationSumAggregateInputType = {
    tblLocationID?: true
  }

  export type TblLocationMinAggregateInputType = {
    tblLocationID?: true
    loccode?: true
    deptcode?: true
    locationname?: true
  }

  export type TblLocationMaxAggregateInputType = {
    tblLocationID?: true
    loccode?: true
    deptcode?: true
    locationname?: true
  }

  export type TblLocationCountAggregateInputType = {
    tblLocationID?: true
    loccode?: true
    deptcode?: true
    locationname?: true
    _all?: true
  }

  export type TblLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblLocation to aggregate.
     */
    where?: tblLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocations to fetch.
     */
    orderBy?: tblLocationOrderByWithRelationInput | tblLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblLocations
    **/
    _count?: true | TblLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblLocationMaxAggregateInputType
  }

  export type GetTblLocationAggregateType<T extends TblLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateTblLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblLocation[P]>
      : GetScalarType<T[P], AggregateTblLocation[P]>
  }




  export type tblLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblLocationWhereInput
    orderBy?: tblLocationOrderByWithAggregationInput | tblLocationOrderByWithAggregationInput[]
    by: TblLocationScalarFieldEnum[] | TblLocationScalarFieldEnum
    having?: tblLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblLocationCountAggregateInputType | true
    _avg?: TblLocationAvgAggregateInputType
    _sum?: TblLocationSumAggregateInputType
    _min?: TblLocationMinAggregateInputType
    _max?: TblLocationMaxAggregateInputType
  }

  export type TblLocationGroupByOutputType = {
    tblLocationID: Decimal
    loccode: string | null
    deptcode: string | null
    locationname: string | null
    _count: TblLocationCountAggregateOutputType | null
    _avg: TblLocationAvgAggregateOutputType | null
    _sum: TblLocationSumAggregateOutputType | null
    _min: TblLocationMinAggregateOutputType | null
    _max: TblLocationMaxAggregateOutputType | null
  }

  type GetTblLocationGroupByPayload<T extends tblLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblLocationGroupByOutputType[P]>
            : GetScalarType<T[P], TblLocationGroupByOutputType[P]>
        }
      >
    >


  export type tblLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblLocationID?: boolean
    loccode?: boolean
    deptcode?: boolean
    locationname?: boolean
  }, ExtArgs["result"]["tblLocation"]>



  export type tblLocationSelectScalar = {
    tblLocationID?: boolean
    loccode?: boolean
    deptcode?: boolean
    locationname?: boolean
  }

  export type tblLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblLocationID" | "loccode" | "deptcode" | "locationname", ExtArgs["result"]["tblLocation"]>

  export type $tblLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblLocation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblLocationID: Prisma.Decimal
      loccode: string | null
      deptcode: string | null
      locationname: string | null
    }, ExtArgs["result"]["tblLocation"]>
    composites: {}
  }

  type tblLocationGetPayload<S extends boolean | null | undefined | tblLocationDefaultArgs> = $Result.GetResult<Prisma.$tblLocationPayload, S>

  type tblLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblLocationCountAggregateInputType | true
    }

  export interface tblLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblLocation'], meta: { name: 'tblLocation' } }
    /**
     * Find zero or one TblLocation that matches the filter.
     * @param {tblLocationFindUniqueArgs} args - Arguments to find a TblLocation
     * @example
     * // Get one TblLocation
     * const tblLocation = await prisma.tblLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblLocationFindUniqueArgs>(args: SelectSubset<T, tblLocationFindUniqueArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblLocationFindUniqueOrThrowArgs} args - Arguments to find a TblLocation
     * @example
     * // Get one TblLocation
     * const tblLocation = await prisma.tblLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, tblLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationFindFirstArgs} args - Arguments to find a TblLocation
     * @example
     * // Get one TblLocation
     * const tblLocation = await prisma.tblLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblLocationFindFirstArgs>(args?: SelectSubset<T, tblLocationFindFirstArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationFindFirstOrThrowArgs} args - Arguments to find a TblLocation
     * @example
     * // Get one TblLocation
     * const tblLocation = await prisma.tblLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, tblLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblLocations
     * const tblLocations = await prisma.tblLocation.findMany()
     * 
     * // Get first 10 TblLocations
     * const tblLocations = await prisma.tblLocation.findMany({ take: 10 })
     * 
     * // Only select the `tblLocationID`
     * const tblLocationWithTblLocationIDOnly = await prisma.tblLocation.findMany({ select: { tblLocationID: true } })
     * 
     */
    findMany<T extends tblLocationFindManyArgs>(args?: SelectSubset<T, tblLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblLocation.
     * @param {tblLocationCreateArgs} args - Arguments to create a TblLocation.
     * @example
     * // Create one TblLocation
     * const TblLocation = await prisma.tblLocation.create({
     *   data: {
     *     // ... data to create a TblLocation
     *   }
     * })
     * 
     */
    create<T extends tblLocationCreateArgs>(args: SelectSubset<T, tblLocationCreateArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblLocations.
     * @param {tblLocationCreateManyArgs} args - Arguments to create many TblLocations.
     * @example
     * // Create many TblLocations
     * const tblLocation = await prisma.tblLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblLocationCreateManyArgs>(args?: SelectSubset<T, tblLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblLocation.
     * @param {tblLocationDeleteArgs} args - Arguments to delete one TblLocation.
     * @example
     * // Delete one TblLocation
     * const TblLocation = await prisma.tblLocation.delete({
     *   where: {
     *     // ... filter to delete one TblLocation
     *   }
     * })
     * 
     */
    delete<T extends tblLocationDeleteArgs>(args: SelectSubset<T, tblLocationDeleteArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblLocation.
     * @param {tblLocationUpdateArgs} args - Arguments to update one TblLocation.
     * @example
     * // Update one TblLocation
     * const tblLocation = await prisma.tblLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblLocationUpdateArgs>(args: SelectSubset<T, tblLocationUpdateArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblLocations.
     * @param {tblLocationDeleteManyArgs} args - Arguments to filter TblLocations to delete.
     * @example
     * // Delete a few TblLocations
     * const { count } = await prisma.tblLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblLocationDeleteManyArgs>(args?: SelectSubset<T, tblLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblLocations
     * const tblLocation = await prisma.tblLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblLocationUpdateManyArgs>(args: SelectSubset<T, tblLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblLocation.
     * @param {tblLocationUpsertArgs} args - Arguments to update or create a TblLocation.
     * @example
     * // Update or create a TblLocation
     * const tblLocation = await prisma.tblLocation.upsert({
     *   create: {
     *     // ... data to create a TblLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblLocation we want to update
     *   }
     * })
     */
    upsert<T extends tblLocationUpsertArgs>(args: SelectSubset<T, tblLocationUpsertArgs<ExtArgs>>): Prisma__tblLocationClient<$Result.GetResult<Prisma.$tblLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationCountArgs} args - Arguments to filter TblLocations to count.
     * @example
     * // Count the number of TblLocations
     * const count = await prisma.tblLocation.count({
     *   where: {
     *     // ... the filter for the TblLocations we want to count
     *   }
     * })
    **/
    count<T extends tblLocationCountArgs>(
      args?: Subset<T, tblLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblLocationAggregateArgs>(args: Subset<T, TblLocationAggregateArgs>): Prisma.PrismaPromise<GetTblLocationAggregateType<T>>

    /**
     * Group by TblLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblLocationGroupByArgs['orderBy'] }
        : { orderBy?: tblLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblLocation model
   */
  readonly fields: tblLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblLocation model
   */
  interface tblLocationFieldRefs {
    readonly tblLocationID: FieldRef<"tblLocation", 'Decimal'>
    readonly loccode: FieldRef<"tblLocation", 'String'>
    readonly deptcode: FieldRef<"tblLocation", 'String'>
    readonly locationname: FieldRef<"tblLocation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblLocation findUnique
   */
  export type tblLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblLocation to fetch.
     */
    where: tblLocationWhereUniqueInput
  }

  /**
   * tblLocation findUniqueOrThrow
   */
  export type tblLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblLocation to fetch.
     */
    where: tblLocationWhereUniqueInput
  }

  /**
   * tblLocation findFirst
   */
  export type tblLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblLocation to fetch.
     */
    where?: tblLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocations to fetch.
     */
    orderBy?: tblLocationOrderByWithRelationInput | tblLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblLocations.
     */
    cursor?: tblLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblLocations.
     */
    distinct?: TblLocationScalarFieldEnum | TblLocationScalarFieldEnum[]
  }

  /**
   * tblLocation findFirstOrThrow
   */
  export type tblLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblLocation to fetch.
     */
    where?: tblLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocations to fetch.
     */
    orderBy?: tblLocationOrderByWithRelationInput | tblLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblLocations.
     */
    cursor?: tblLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblLocations.
     */
    distinct?: TblLocationScalarFieldEnum | TblLocationScalarFieldEnum[]
  }

  /**
   * tblLocation findMany
   */
  export type tblLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblLocations to fetch.
     */
    where?: tblLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocations to fetch.
     */
    orderBy?: tblLocationOrderByWithRelationInput | tblLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblLocations.
     */
    cursor?: tblLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocations.
     */
    skip?: number
    distinct?: TblLocationScalarFieldEnum | TblLocationScalarFieldEnum[]
  }

  /**
   * tblLocation create
   */
  export type tblLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * The data needed to create a tblLocation.
     */
    data: XOR<tblLocationCreateInput, tblLocationUncheckedCreateInput>
  }

  /**
   * tblLocation createMany
   */
  export type tblLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblLocations.
     */
    data: tblLocationCreateManyInput | tblLocationCreateManyInput[]
  }

  /**
   * tblLocation update
   */
  export type tblLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * The data needed to update a tblLocation.
     */
    data: XOR<tblLocationUpdateInput, tblLocationUncheckedUpdateInput>
    /**
     * Choose, which tblLocation to update.
     */
    where: tblLocationWhereUniqueInput
  }

  /**
   * tblLocation updateMany
   */
  export type tblLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblLocations.
     */
    data: XOR<tblLocationUpdateManyMutationInput, tblLocationUncheckedUpdateManyInput>
    /**
     * Filter which tblLocations to update
     */
    where?: tblLocationWhereInput
    /**
     * Limit how many tblLocations to update.
     */
    limit?: number
  }

  /**
   * tblLocation upsert
   */
  export type tblLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * The filter to search for the tblLocation to update in case it exists.
     */
    where: tblLocationWhereUniqueInput
    /**
     * In case the tblLocation found by the `where` argument doesn't exist, create a new tblLocation with this data.
     */
    create: XOR<tblLocationCreateInput, tblLocationUncheckedCreateInput>
    /**
     * In case the tblLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblLocationUpdateInput, tblLocationUncheckedUpdateInput>
  }

  /**
   * tblLocation delete
   */
  export type tblLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
    /**
     * Filter which tblLocation to delete.
     */
    where: tblLocationWhereUniqueInput
  }

  /**
   * tblLocation deleteMany
   */
  export type tblLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblLocations to delete
     */
    where?: tblLocationWhereInput
    /**
     * Limit how many tblLocations to delete.
     */
    limit?: number
  }

  /**
   * tblLocation without action
   */
  export type tblLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocation
     */
    select?: tblLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocation
     */
    omit?: tblLocationOmit<ExtArgs> | null
  }


  /**
   * Model tblLocationSession
   */

  export type AggregateTblLocationSession = {
    _count: TblLocationSessionCountAggregateOutputType | null
    _avg: TblLocationSessionAvgAggregateOutputType | null
    _sum: TblLocationSessionSumAggregateOutputType | null
    _min: TblLocationSessionMinAggregateOutputType | null
    _max: TblLocationSessionMaxAggregateOutputType | null
  }

  export type TblLocationSessionAvgAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
    dept_counter: Decimal | null
    status: Decimal | null
  }

  export type TblLocationSessionSumAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
    dept_counter: Decimal | null
    status: Decimal | null
  }

  export type TblLocationSessionMinAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    loccode: string | null
    deptcode: string | null
    qnumber: Decimal | null
    start_dt: Date | null
    finish_dt: Date | null
    tblQueueID: Decimal | null
    name: string | null
    dept_counter: Decimal | null
    locationname: string | null
    status: Decimal | null
  }

  export type TblLocationSessionMaxAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    loccode: string | null
    deptcode: string | null
    qnumber: Decimal | null
    start_dt: Date | null
    finish_dt: Date | null
    tblQueueID: Decimal | null
    name: string | null
    dept_counter: Decimal | null
    locationname: string | null
    status: Decimal | null
  }

  export type TblLocationSessionCountAggregateOutputType = {
    tblLocationSessionID: number
    loccode: number
    deptcode: number
    qnumber: number
    start_dt: number
    finish_dt: number
    tblQueueID: number
    name: number
    dept_counter: number
    locationname: number
    status: number
    _all: number
  }


  export type TblLocationSessionAvgAggregateInputType = {
    tblLocationSessionID?: true
    qnumber?: true
    tblQueueID?: true
    dept_counter?: true
    status?: true
  }

  export type TblLocationSessionSumAggregateInputType = {
    tblLocationSessionID?: true
    qnumber?: true
    tblQueueID?: true
    dept_counter?: true
    status?: true
  }

  export type TblLocationSessionMinAggregateInputType = {
    tblLocationSessionID?: true
    loccode?: true
    deptcode?: true
    qnumber?: true
    start_dt?: true
    finish_dt?: true
    tblQueueID?: true
    name?: true
    dept_counter?: true
    locationname?: true
    status?: true
  }

  export type TblLocationSessionMaxAggregateInputType = {
    tblLocationSessionID?: true
    loccode?: true
    deptcode?: true
    qnumber?: true
    start_dt?: true
    finish_dt?: true
    tblQueueID?: true
    name?: true
    dept_counter?: true
    locationname?: true
    status?: true
  }

  export type TblLocationSessionCountAggregateInputType = {
    tblLocationSessionID?: true
    loccode?: true
    deptcode?: true
    qnumber?: true
    start_dt?: true
    finish_dt?: true
    tblQueueID?: true
    name?: true
    dept_counter?: true
    locationname?: true
    status?: true
    _all?: true
  }

  export type TblLocationSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblLocationSession to aggregate.
     */
    where?: tblLocationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocationSessions to fetch.
     */
    orderBy?: tblLocationSessionOrderByWithRelationInput | tblLocationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblLocationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblLocationSessions
    **/
    _count?: true | TblLocationSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblLocationSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblLocationSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblLocationSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblLocationSessionMaxAggregateInputType
  }

  export type GetTblLocationSessionAggregateType<T extends TblLocationSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateTblLocationSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblLocationSession[P]>
      : GetScalarType<T[P], AggregateTblLocationSession[P]>
  }




  export type tblLocationSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblLocationSessionWhereInput
    orderBy?: tblLocationSessionOrderByWithAggregationInput | tblLocationSessionOrderByWithAggregationInput[]
    by: TblLocationSessionScalarFieldEnum[] | TblLocationSessionScalarFieldEnum
    having?: tblLocationSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblLocationSessionCountAggregateInputType | true
    _avg?: TblLocationSessionAvgAggregateInputType
    _sum?: TblLocationSessionSumAggregateInputType
    _min?: TblLocationSessionMinAggregateInputType
    _max?: TblLocationSessionMaxAggregateInputType
  }

  export type TblLocationSessionGroupByOutputType = {
    tblLocationSessionID: Decimal
    loccode: string
    deptcode: string | null
    qnumber: Decimal
    start_dt: Date | null
    finish_dt: Date | null
    tblQueueID: Decimal | null
    name: string | null
    dept_counter: Decimal | null
    locationname: string | null
    status: Decimal | null
    _count: TblLocationSessionCountAggregateOutputType | null
    _avg: TblLocationSessionAvgAggregateOutputType | null
    _sum: TblLocationSessionSumAggregateOutputType | null
    _min: TblLocationSessionMinAggregateOutputType | null
    _max: TblLocationSessionMaxAggregateOutputType | null
  }

  type GetTblLocationSessionGroupByPayload<T extends tblLocationSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblLocationSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblLocationSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblLocationSessionGroupByOutputType[P]>
            : GetScalarType<T[P], TblLocationSessionGroupByOutputType[P]>
        }
      >
    >


  export type tblLocationSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblLocationSessionID?: boolean
    loccode?: boolean
    deptcode?: boolean
    qnumber?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    tblQueueID?: boolean
    name?: boolean
    dept_counter?: boolean
    locationname?: boolean
    status?: boolean
  }, ExtArgs["result"]["tblLocationSession"]>



  export type tblLocationSessionSelectScalar = {
    tblLocationSessionID?: boolean
    loccode?: boolean
    deptcode?: boolean
    qnumber?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    tblQueueID?: boolean
    name?: boolean
    dept_counter?: boolean
    locationname?: boolean
    status?: boolean
  }

  export type tblLocationSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblLocationSessionID" | "loccode" | "deptcode" | "qnumber" | "start_dt" | "finish_dt" | "tblQueueID" | "name" | "dept_counter" | "locationname" | "status", ExtArgs["result"]["tblLocationSession"]>

  export type $tblLocationSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblLocationSession"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblLocationSessionID: Prisma.Decimal
      loccode: string
      deptcode: string | null
      qnumber: Prisma.Decimal
      start_dt: Date | null
      finish_dt: Date | null
      tblQueueID: Prisma.Decimal | null
      name: string | null
      dept_counter: Prisma.Decimal | null
      locationname: string | null
      status: Prisma.Decimal | null
    }, ExtArgs["result"]["tblLocationSession"]>
    composites: {}
  }

  type tblLocationSessionGetPayload<S extends boolean | null | undefined | tblLocationSessionDefaultArgs> = $Result.GetResult<Prisma.$tblLocationSessionPayload, S>

  type tblLocationSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblLocationSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblLocationSessionCountAggregateInputType | true
    }

  export interface tblLocationSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblLocationSession'], meta: { name: 'tblLocationSession' } }
    /**
     * Find zero or one TblLocationSession that matches the filter.
     * @param {tblLocationSessionFindUniqueArgs} args - Arguments to find a TblLocationSession
     * @example
     * // Get one TblLocationSession
     * const tblLocationSession = await prisma.tblLocationSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblLocationSessionFindUniqueArgs>(args: SelectSubset<T, tblLocationSessionFindUniqueArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblLocationSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblLocationSessionFindUniqueOrThrowArgs} args - Arguments to find a TblLocationSession
     * @example
     * // Get one TblLocationSession
     * const tblLocationSession = await prisma.tblLocationSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblLocationSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, tblLocationSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblLocationSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationSessionFindFirstArgs} args - Arguments to find a TblLocationSession
     * @example
     * // Get one TblLocationSession
     * const tblLocationSession = await prisma.tblLocationSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblLocationSessionFindFirstArgs>(args?: SelectSubset<T, tblLocationSessionFindFirstArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblLocationSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationSessionFindFirstOrThrowArgs} args - Arguments to find a TblLocationSession
     * @example
     * // Get one TblLocationSession
     * const tblLocationSession = await prisma.tblLocationSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblLocationSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, tblLocationSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblLocationSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblLocationSessions
     * const tblLocationSessions = await prisma.tblLocationSession.findMany()
     * 
     * // Get first 10 TblLocationSessions
     * const tblLocationSessions = await prisma.tblLocationSession.findMany({ take: 10 })
     * 
     * // Only select the `tblLocationSessionID`
     * const tblLocationSessionWithTblLocationSessionIDOnly = await prisma.tblLocationSession.findMany({ select: { tblLocationSessionID: true } })
     * 
     */
    findMany<T extends tblLocationSessionFindManyArgs>(args?: SelectSubset<T, tblLocationSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblLocationSession.
     * @param {tblLocationSessionCreateArgs} args - Arguments to create a TblLocationSession.
     * @example
     * // Create one TblLocationSession
     * const TblLocationSession = await prisma.tblLocationSession.create({
     *   data: {
     *     // ... data to create a TblLocationSession
     *   }
     * })
     * 
     */
    create<T extends tblLocationSessionCreateArgs>(args: SelectSubset<T, tblLocationSessionCreateArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblLocationSessions.
     * @param {tblLocationSessionCreateManyArgs} args - Arguments to create many TblLocationSessions.
     * @example
     * // Create many TblLocationSessions
     * const tblLocationSession = await prisma.tblLocationSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblLocationSessionCreateManyArgs>(args?: SelectSubset<T, tblLocationSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblLocationSession.
     * @param {tblLocationSessionDeleteArgs} args - Arguments to delete one TblLocationSession.
     * @example
     * // Delete one TblLocationSession
     * const TblLocationSession = await prisma.tblLocationSession.delete({
     *   where: {
     *     // ... filter to delete one TblLocationSession
     *   }
     * })
     * 
     */
    delete<T extends tblLocationSessionDeleteArgs>(args: SelectSubset<T, tblLocationSessionDeleteArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblLocationSession.
     * @param {tblLocationSessionUpdateArgs} args - Arguments to update one TblLocationSession.
     * @example
     * // Update one TblLocationSession
     * const tblLocationSession = await prisma.tblLocationSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblLocationSessionUpdateArgs>(args: SelectSubset<T, tblLocationSessionUpdateArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblLocationSessions.
     * @param {tblLocationSessionDeleteManyArgs} args - Arguments to filter TblLocationSessions to delete.
     * @example
     * // Delete a few TblLocationSessions
     * const { count } = await prisma.tblLocationSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblLocationSessionDeleteManyArgs>(args?: SelectSubset<T, tblLocationSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblLocationSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblLocationSessions
     * const tblLocationSession = await prisma.tblLocationSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblLocationSessionUpdateManyArgs>(args: SelectSubset<T, tblLocationSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblLocationSession.
     * @param {tblLocationSessionUpsertArgs} args - Arguments to update or create a TblLocationSession.
     * @example
     * // Update or create a TblLocationSession
     * const tblLocationSession = await prisma.tblLocationSession.upsert({
     *   create: {
     *     // ... data to create a TblLocationSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblLocationSession we want to update
     *   }
     * })
     */
    upsert<T extends tblLocationSessionUpsertArgs>(args: SelectSubset<T, tblLocationSessionUpsertArgs<ExtArgs>>): Prisma__tblLocationSessionClient<$Result.GetResult<Prisma.$tblLocationSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblLocationSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationSessionCountArgs} args - Arguments to filter TblLocationSessions to count.
     * @example
     * // Count the number of TblLocationSessions
     * const count = await prisma.tblLocationSession.count({
     *   where: {
     *     // ... the filter for the TblLocationSessions we want to count
     *   }
     * })
    **/
    count<T extends tblLocationSessionCountArgs>(
      args?: Subset<T, tblLocationSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblLocationSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblLocationSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblLocationSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblLocationSessionAggregateArgs>(args: Subset<T, TblLocationSessionAggregateArgs>): Prisma.PrismaPromise<GetTblLocationSessionAggregateType<T>>

    /**
     * Group by TblLocationSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblLocationSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblLocationSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblLocationSessionGroupByArgs['orderBy'] }
        : { orderBy?: tblLocationSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblLocationSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblLocationSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblLocationSession model
   */
  readonly fields: tblLocationSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblLocationSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblLocationSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblLocationSession model
   */
  interface tblLocationSessionFieldRefs {
    readonly tblLocationSessionID: FieldRef<"tblLocationSession", 'Decimal'>
    readonly loccode: FieldRef<"tblLocationSession", 'String'>
    readonly deptcode: FieldRef<"tblLocationSession", 'String'>
    readonly qnumber: FieldRef<"tblLocationSession", 'Decimal'>
    readonly start_dt: FieldRef<"tblLocationSession", 'DateTime'>
    readonly finish_dt: FieldRef<"tblLocationSession", 'DateTime'>
    readonly tblQueueID: FieldRef<"tblLocationSession", 'Decimal'>
    readonly name: FieldRef<"tblLocationSession", 'String'>
    readonly dept_counter: FieldRef<"tblLocationSession", 'Decimal'>
    readonly locationname: FieldRef<"tblLocationSession", 'String'>
    readonly status: FieldRef<"tblLocationSession", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tblLocationSession findUnique
   */
  export type tblLocationSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblLocationSession to fetch.
     */
    where: tblLocationSessionWhereUniqueInput
  }

  /**
   * tblLocationSession findUniqueOrThrow
   */
  export type tblLocationSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblLocationSession to fetch.
     */
    where: tblLocationSessionWhereUniqueInput
  }

  /**
   * tblLocationSession findFirst
   */
  export type tblLocationSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblLocationSession to fetch.
     */
    where?: tblLocationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocationSessions to fetch.
     */
    orderBy?: tblLocationSessionOrderByWithRelationInput | tblLocationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblLocationSessions.
     */
    cursor?: tblLocationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblLocationSessions.
     */
    distinct?: TblLocationSessionScalarFieldEnum | TblLocationSessionScalarFieldEnum[]
  }

  /**
   * tblLocationSession findFirstOrThrow
   */
  export type tblLocationSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblLocationSession to fetch.
     */
    where?: tblLocationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocationSessions to fetch.
     */
    orderBy?: tblLocationSessionOrderByWithRelationInput | tblLocationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblLocationSessions.
     */
    cursor?: tblLocationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocationSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblLocationSessions.
     */
    distinct?: TblLocationSessionScalarFieldEnum | TblLocationSessionScalarFieldEnum[]
  }

  /**
   * tblLocationSession findMany
   */
  export type tblLocationSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblLocationSessions to fetch.
     */
    where?: tblLocationSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblLocationSessions to fetch.
     */
    orderBy?: tblLocationSessionOrderByWithRelationInput | tblLocationSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblLocationSessions.
     */
    cursor?: tblLocationSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblLocationSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblLocationSessions.
     */
    skip?: number
    distinct?: TblLocationSessionScalarFieldEnum | TblLocationSessionScalarFieldEnum[]
  }

  /**
   * tblLocationSession create
   */
  export type tblLocationSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * The data needed to create a tblLocationSession.
     */
    data: XOR<tblLocationSessionCreateInput, tblLocationSessionUncheckedCreateInput>
  }

  /**
   * tblLocationSession createMany
   */
  export type tblLocationSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblLocationSessions.
     */
    data: tblLocationSessionCreateManyInput | tblLocationSessionCreateManyInput[]
  }

  /**
   * tblLocationSession update
   */
  export type tblLocationSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * The data needed to update a tblLocationSession.
     */
    data: XOR<tblLocationSessionUpdateInput, tblLocationSessionUncheckedUpdateInput>
    /**
     * Choose, which tblLocationSession to update.
     */
    where: tblLocationSessionWhereUniqueInput
  }

  /**
   * tblLocationSession updateMany
   */
  export type tblLocationSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblLocationSessions.
     */
    data: XOR<tblLocationSessionUpdateManyMutationInput, tblLocationSessionUncheckedUpdateManyInput>
    /**
     * Filter which tblLocationSessions to update
     */
    where?: tblLocationSessionWhereInput
    /**
     * Limit how many tblLocationSessions to update.
     */
    limit?: number
  }

  /**
   * tblLocationSession upsert
   */
  export type tblLocationSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * The filter to search for the tblLocationSession to update in case it exists.
     */
    where: tblLocationSessionWhereUniqueInput
    /**
     * In case the tblLocationSession found by the `where` argument doesn't exist, create a new tblLocationSession with this data.
     */
    create: XOR<tblLocationSessionCreateInput, tblLocationSessionUncheckedCreateInput>
    /**
     * In case the tblLocationSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblLocationSessionUpdateInput, tblLocationSessionUncheckedUpdateInput>
  }

  /**
   * tblLocationSession delete
   */
  export type tblLocationSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
    /**
     * Filter which tblLocationSession to delete.
     */
    where: tblLocationSessionWhereUniqueInput
  }

  /**
   * tblLocationSession deleteMany
   */
  export type tblLocationSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblLocationSessions to delete
     */
    where?: tblLocationSessionWhereInput
    /**
     * Limit how many tblLocationSessions to delete.
     */
    limit?: number
  }

  /**
   * tblLocationSession without action
   */
  export type tblLocationSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblLocationSession
     */
    select?: tblLocationSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblLocationSession
     */
    omit?: tblLocationSessionOmit<ExtArgs> | null
  }


  /**
   * Model tbllocationsessionArchieve
   */

  export type AggregateTbllocationsessionArchieve = {
    _count: TbllocationsessionArchieveCountAggregateOutputType | null
    _avg: TbllocationsessionArchieveAvgAggregateOutputType | null
    _sum: TbllocationsessionArchieveSumAggregateOutputType | null
    _min: TbllocationsessionArchieveMinAggregateOutputType | null
    _max: TbllocationsessionArchieveMaxAggregateOutputType | null
  }

  export type TbllocationsessionArchieveAvgAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
    dept_counter: Decimal | null
    status: Decimal | null
  }

  export type TbllocationsessionArchieveSumAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
    dept_counter: Decimal | null
    status: Decimal | null
  }

  export type TbllocationsessionArchieveMinAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    loccode: string | null
    deptcode: string | null
    qnumber: Decimal | null
    start_dt: Date | null
    finish_dt: Date | null
    tblQueueID: Decimal | null
    name: string | null
    dept_counter: Decimal | null
    locationname: string | null
    status: Decimal | null
  }

  export type TbllocationsessionArchieveMaxAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    loccode: string | null
    deptcode: string | null
    qnumber: Decimal | null
    start_dt: Date | null
    finish_dt: Date | null
    tblQueueID: Decimal | null
    name: string | null
    dept_counter: Decimal | null
    locationname: string | null
    status: Decimal | null
  }

  export type TbllocationsessionArchieveCountAggregateOutputType = {
    tblLocationSessionID: number
    loccode: number
    deptcode: number
    qnumber: number
    start_dt: number
    finish_dt: number
    tblQueueID: number
    name: number
    dept_counter: number
    locationname: number
    status: number
    _all: number
  }


  export type TbllocationsessionArchieveAvgAggregateInputType = {
    tblLocationSessionID?: true
    qnumber?: true
    tblQueueID?: true
    dept_counter?: true
    status?: true
  }

  export type TbllocationsessionArchieveSumAggregateInputType = {
    tblLocationSessionID?: true
    qnumber?: true
    tblQueueID?: true
    dept_counter?: true
    status?: true
  }

  export type TbllocationsessionArchieveMinAggregateInputType = {
    tblLocationSessionID?: true
    loccode?: true
    deptcode?: true
    qnumber?: true
    start_dt?: true
    finish_dt?: true
    tblQueueID?: true
    name?: true
    dept_counter?: true
    locationname?: true
    status?: true
  }

  export type TbllocationsessionArchieveMaxAggregateInputType = {
    tblLocationSessionID?: true
    loccode?: true
    deptcode?: true
    qnumber?: true
    start_dt?: true
    finish_dt?: true
    tblQueueID?: true
    name?: true
    dept_counter?: true
    locationname?: true
    status?: true
  }

  export type TbllocationsessionArchieveCountAggregateInputType = {
    tblLocationSessionID?: true
    loccode?: true
    deptcode?: true
    qnumber?: true
    start_dt?: true
    finish_dt?: true
    tblQueueID?: true
    name?: true
    dept_counter?: true
    locationname?: true
    status?: true
    _all?: true
  }

  export type TbllocationsessionArchieveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tbllocationsessionArchieve to aggregate.
     */
    where?: tbllocationsessionArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbllocationsessionArchieves to fetch.
     */
    orderBy?: tbllocationsessionArchieveOrderByWithRelationInput | tbllocationsessionArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tbllocationsessionArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbllocationsessionArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbllocationsessionArchieves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbllocationsessionArchieves
    **/
    _count?: true | TbllocationsessionArchieveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TbllocationsessionArchieveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TbllocationsessionArchieveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TbllocationsessionArchieveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TbllocationsessionArchieveMaxAggregateInputType
  }

  export type GetTbllocationsessionArchieveAggregateType<T extends TbllocationsessionArchieveAggregateArgs> = {
        [P in keyof T & keyof AggregateTbllocationsessionArchieve]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbllocationsessionArchieve[P]>
      : GetScalarType<T[P], AggregateTbllocationsessionArchieve[P]>
  }




  export type tbllocationsessionArchieveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tbllocationsessionArchieveWhereInput
    orderBy?: tbllocationsessionArchieveOrderByWithAggregationInput | tbllocationsessionArchieveOrderByWithAggregationInput[]
    by: TbllocationsessionArchieveScalarFieldEnum[] | TbllocationsessionArchieveScalarFieldEnum
    having?: tbllocationsessionArchieveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TbllocationsessionArchieveCountAggregateInputType | true
    _avg?: TbllocationsessionArchieveAvgAggregateInputType
    _sum?: TbllocationsessionArchieveSumAggregateInputType
    _min?: TbllocationsessionArchieveMinAggregateInputType
    _max?: TbllocationsessionArchieveMaxAggregateInputType
  }

  export type TbllocationsessionArchieveGroupByOutputType = {
    tblLocationSessionID: Decimal
    loccode: string | null
    deptcode: string | null
    qnumber: Decimal
    start_dt: Date | null
    finish_dt: Date | null
    tblQueueID: Decimal | null
    name: string | null
    dept_counter: Decimal | null
    locationname: string | null
    status: Decimal | null
    _count: TbllocationsessionArchieveCountAggregateOutputType | null
    _avg: TbllocationsessionArchieveAvgAggregateOutputType | null
    _sum: TbllocationsessionArchieveSumAggregateOutputType | null
    _min: TbllocationsessionArchieveMinAggregateOutputType | null
    _max: TbllocationsessionArchieveMaxAggregateOutputType | null
  }

  type GetTbllocationsessionArchieveGroupByPayload<T extends tbllocationsessionArchieveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TbllocationsessionArchieveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TbllocationsessionArchieveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TbllocationsessionArchieveGroupByOutputType[P]>
            : GetScalarType<T[P], TbllocationsessionArchieveGroupByOutputType[P]>
        }
      >
    >


  export type tbllocationsessionArchieveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblLocationSessionID?: boolean
    loccode?: boolean
    deptcode?: boolean
    qnumber?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    tblQueueID?: boolean
    name?: boolean
    dept_counter?: boolean
    locationname?: boolean
    status?: boolean
  }, ExtArgs["result"]["tbllocationsessionArchieve"]>



  export type tbllocationsessionArchieveSelectScalar = {
    tblLocationSessionID?: boolean
    loccode?: boolean
    deptcode?: boolean
    qnumber?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    tblQueueID?: boolean
    name?: boolean
    dept_counter?: boolean
    locationname?: boolean
    status?: boolean
  }

  export type tbllocationsessionArchieveOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblLocationSessionID" | "loccode" | "deptcode" | "qnumber" | "start_dt" | "finish_dt" | "tblQueueID" | "name" | "dept_counter" | "locationname" | "status", ExtArgs["result"]["tbllocationsessionArchieve"]>

  export type $tbllocationsessionArchievePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tbllocationsessionArchieve"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblLocationSessionID: Prisma.Decimal
      loccode: string | null
      deptcode: string | null
      qnumber: Prisma.Decimal
      start_dt: Date | null
      finish_dt: Date | null
      tblQueueID: Prisma.Decimal | null
      name: string | null
      dept_counter: Prisma.Decimal | null
      locationname: string | null
      status: Prisma.Decimal | null
    }, ExtArgs["result"]["tbllocationsessionArchieve"]>
    composites: {}
  }

  type tbllocationsessionArchieveGetPayload<S extends boolean | null | undefined | tbllocationsessionArchieveDefaultArgs> = $Result.GetResult<Prisma.$tbllocationsessionArchievePayload, S>

  type tbllocationsessionArchieveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tbllocationsessionArchieveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TbllocationsessionArchieveCountAggregateInputType | true
    }

  export interface tbllocationsessionArchieveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tbllocationsessionArchieve'], meta: { name: 'tbllocationsessionArchieve' } }
    /**
     * Find zero or one TbllocationsessionArchieve that matches the filter.
     * @param {tbllocationsessionArchieveFindUniqueArgs} args - Arguments to find a TbllocationsessionArchieve
     * @example
     * // Get one TbllocationsessionArchieve
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tbllocationsessionArchieveFindUniqueArgs>(args: SelectSubset<T, tbllocationsessionArchieveFindUniqueArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TbllocationsessionArchieve that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tbllocationsessionArchieveFindUniqueOrThrowArgs} args - Arguments to find a TbllocationsessionArchieve
     * @example
     * // Get one TbllocationsessionArchieve
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tbllocationsessionArchieveFindUniqueOrThrowArgs>(args: SelectSubset<T, tbllocationsessionArchieveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TbllocationsessionArchieve that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbllocationsessionArchieveFindFirstArgs} args - Arguments to find a TbllocationsessionArchieve
     * @example
     * // Get one TbllocationsessionArchieve
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tbllocationsessionArchieveFindFirstArgs>(args?: SelectSubset<T, tbllocationsessionArchieveFindFirstArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TbllocationsessionArchieve that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbllocationsessionArchieveFindFirstOrThrowArgs} args - Arguments to find a TbllocationsessionArchieve
     * @example
     * // Get one TbllocationsessionArchieve
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tbllocationsessionArchieveFindFirstOrThrowArgs>(args?: SelectSubset<T, tbllocationsessionArchieveFindFirstOrThrowArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TbllocationsessionArchieves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbllocationsessionArchieveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TbllocationsessionArchieves
     * const tbllocationsessionArchieves = await prisma.tbllocationsessionArchieve.findMany()
     * 
     * // Get first 10 TbllocationsessionArchieves
     * const tbllocationsessionArchieves = await prisma.tbllocationsessionArchieve.findMany({ take: 10 })
     * 
     * // Only select the `tblLocationSessionID`
     * const tbllocationsessionArchieveWithTblLocationSessionIDOnly = await prisma.tbllocationsessionArchieve.findMany({ select: { tblLocationSessionID: true } })
     * 
     */
    findMany<T extends tbllocationsessionArchieveFindManyArgs>(args?: SelectSubset<T, tbllocationsessionArchieveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TbllocationsessionArchieve.
     * @param {tbllocationsessionArchieveCreateArgs} args - Arguments to create a TbllocationsessionArchieve.
     * @example
     * // Create one TbllocationsessionArchieve
     * const TbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.create({
     *   data: {
     *     // ... data to create a TbllocationsessionArchieve
     *   }
     * })
     * 
     */
    create<T extends tbllocationsessionArchieveCreateArgs>(args: SelectSubset<T, tbllocationsessionArchieveCreateArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TbllocationsessionArchieves.
     * @param {tbllocationsessionArchieveCreateManyArgs} args - Arguments to create many TbllocationsessionArchieves.
     * @example
     * // Create many TbllocationsessionArchieves
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tbllocationsessionArchieveCreateManyArgs>(args?: SelectSubset<T, tbllocationsessionArchieveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TbllocationsessionArchieve.
     * @param {tbllocationsessionArchieveDeleteArgs} args - Arguments to delete one TbllocationsessionArchieve.
     * @example
     * // Delete one TbllocationsessionArchieve
     * const TbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.delete({
     *   where: {
     *     // ... filter to delete one TbllocationsessionArchieve
     *   }
     * })
     * 
     */
    delete<T extends tbllocationsessionArchieveDeleteArgs>(args: SelectSubset<T, tbllocationsessionArchieveDeleteArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TbllocationsessionArchieve.
     * @param {tbllocationsessionArchieveUpdateArgs} args - Arguments to update one TbllocationsessionArchieve.
     * @example
     * // Update one TbllocationsessionArchieve
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tbllocationsessionArchieveUpdateArgs>(args: SelectSubset<T, tbllocationsessionArchieveUpdateArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TbllocationsessionArchieves.
     * @param {tbllocationsessionArchieveDeleteManyArgs} args - Arguments to filter TbllocationsessionArchieves to delete.
     * @example
     * // Delete a few TbllocationsessionArchieves
     * const { count } = await prisma.tbllocationsessionArchieve.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tbllocationsessionArchieveDeleteManyArgs>(args?: SelectSubset<T, tbllocationsessionArchieveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TbllocationsessionArchieves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbllocationsessionArchieveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TbllocationsessionArchieves
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tbllocationsessionArchieveUpdateManyArgs>(args: SelectSubset<T, tbllocationsessionArchieveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TbllocationsessionArchieve.
     * @param {tbllocationsessionArchieveUpsertArgs} args - Arguments to update or create a TbllocationsessionArchieve.
     * @example
     * // Update or create a TbllocationsessionArchieve
     * const tbllocationsessionArchieve = await prisma.tbllocationsessionArchieve.upsert({
     *   create: {
     *     // ... data to create a TbllocationsessionArchieve
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TbllocationsessionArchieve we want to update
     *   }
     * })
     */
    upsert<T extends tbllocationsessionArchieveUpsertArgs>(args: SelectSubset<T, tbllocationsessionArchieveUpsertArgs<ExtArgs>>): Prisma__tbllocationsessionArchieveClient<$Result.GetResult<Prisma.$tbllocationsessionArchievePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TbllocationsessionArchieves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbllocationsessionArchieveCountArgs} args - Arguments to filter TbllocationsessionArchieves to count.
     * @example
     * // Count the number of TbllocationsessionArchieves
     * const count = await prisma.tbllocationsessionArchieve.count({
     *   where: {
     *     // ... the filter for the TbllocationsessionArchieves we want to count
     *   }
     * })
    **/
    count<T extends tbllocationsessionArchieveCountArgs>(
      args?: Subset<T, tbllocationsessionArchieveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TbllocationsessionArchieveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TbllocationsessionArchieve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TbllocationsessionArchieveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TbllocationsessionArchieveAggregateArgs>(args: Subset<T, TbllocationsessionArchieveAggregateArgs>): Prisma.PrismaPromise<GetTbllocationsessionArchieveAggregateType<T>>

    /**
     * Group by TbllocationsessionArchieve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbllocationsessionArchieveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tbllocationsessionArchieveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tbllocationsessionArchieveGroupByArgs['orderBy'] }
        : { orderBy?: tbllocationsessionArchieveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tbllocationsessionArchieveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbllocationsessionArchieveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tbllocationsessionArchieve model
   */
  readonly fields: tbllocationsessionArchieveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbllocationsessionArchieve.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tbllocationsessionArchieveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tbllocationsessionArchieve model
   */
  interface tbllocationsessionArchieveFieldRefs {
    readonly tblLocationSessionID: FieldRef<"tbllocationsessionArchieve", 'Decimal'>
    readonly loccode: FieldRef<"tbllocationsessionArchieve", 'String'>
    readonly deptcode: FieldRef<"tbllocationsessionArchieve", 'String'>
    readonly qnumber: FieldRef<"tbllocationsessionArchieve", 'Decimal'>
    readonly start_dt: FieldRef<"tbllocationsessionArchieve", 'DateTime'>
    readonly finish_dt: FieldRef<"tbllocationsessionArchieve", 'DateTime'>
    readonly tblQueueID: FieldRef<"tbllocationsessionArchieve", 'Decimal'>
    readonly name: FieldRef<"tbllocationsessionArchieve", 'String'>
    readonly dept_counter: FieldRef<"tbllocationsessionArchieve", 'Decimal'>
    readonly locationname: FieldRef<"tbllocationsessionArchieve", 'String'>
    readonly status: FieldRef<"tbllocationsessionArchieve", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tbllocationsessionArchieve findUnique
   */
  export type tbllocationsessionArchieveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tbllocationsessionArchieve to fetch.
     */
    where: tbllocationsessionArchieveWhereUniqueInput
  }

  /**
   * tbllocationsessionArchieve findUniqueOrThrow
   */
  export type tbllocationsessionArchieveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tbllocationsessionArchieve to fetch.
     */
    where: tbllocationsessionArchieveWhereUniqueInput
  }

  /**
   * tbllocationsessionArchieve findFirst
   */
  export type tbllocationsessionArchieveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tbllocationsessionArchieve to fetch.
     */
    where?: tbllocationsessionArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbllocationsessionArchieves to fetch.
     */
    orderBy?: tbllocationsessionArchieveOrderByWithRelationInput | tbllocationsessionArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbllocationsessionArchieves.
     */
    cursor?: tbllocationsessionArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbllocationsessionArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbllocationsessionArchieves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbllocationsessionArchieves.
     */
    distinct?: TbllocationsessionArchieveScalarFieldEnum | TbllocationsessionArchieveScalarFieldEnum[]
  }

  /**
   * tbllocationsessionArchieve findFirstOrThrow
   */
  export type tbllocationsessionArchieveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tbllocationsessionArchieve to fetch.
     */
    where?: tbllocationsessionArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbllocationsessionArchieves to fetch.
     */
    orderBy?: tbllocationsessionArchieveOrderByWithRelationInput | tbllocationsessionArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbllocationsessionArchieves.
     */
    cursor?: tbllocationsessionArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbllocationsessionArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbllocationsessionArchieves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbllocationsessionArchieves.
     */
    distinct?: TbllocationsessionArchieveScalarFieldEnum | TbllocationsessionArchieveScalarFieldEnum[]
  }

  /**
   * tbllocationsessionArchieve findMany
   */
  export type tbllocationsessionArchieveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tbllocationsessionArchieves to fetch.
     */
    where?: tbllocationsessionArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbllocationsessionArchieves to fetch.
     */
    orderBy?: tbllocationsessionArchieveOrderByWithRelationInput | tbllocationsessionArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbllocationsessionArchieves.
     */
    cursor?: tbllocationsessionArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbllocationsessionArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbllocationsessionArchieves.
     */
    skip?: number
    distinct?: TbllocationsessionArchieveScalarFieldEnum | TbllocationsessionArchieveScalarFieldEnum[]
  }

  /**
   * tbllocationsessionArchieve create
   */
  export type tbllocationsessionArchieveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * The data needed to create a tbllocationsessionArchieve.
     */
    data: XOR<tbllocationsessionArchieveCreateInput, tbllocationsessionArchieveUncheckedCreateInput>
  }

  /**
   * tbllocationsessionArchieve createMany
   */
  export type tbllocationsessionArchieveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tbllocationsessionArchieves.
     */
    data: tbllocationsessionArchieveCreateManyInput | tbllocationsessionArchieveCreateManyInput[]
  }

  /**
   * tbllocationsessionArchieve update
   */
  export type tbllocationsessionArchieveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * The data needed to update a tbllocationsessionArchieve.
     */
    data: XOR<tbllocationsessionArchieveUpdateInput, tbllocationsessionArchieveUncheckedUpdateInput>
    /**
     * Choose, which tbllocationsessionArchieve to update.
     */
    where: tbllocationsessionArchieveWhereUniqueInput
  }

  /**
   * tbllocationsessionArchieve updateMany
   */
  export type tbllocationsessionArchieveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tbllocationsessionArchieves.
     */
    data: XOR<tbllocationsessionArchieveUpdateManyMutationInput, tbllocationsessionArchieveUncheckedUpdateManyInput>
    /**
     * Filter which tbllocationsessionArchieves to update
     */
    where?: tbllocationsessionArchieveWhereInput
    /**
     * Limit how many tbllocationsessionArchieves to update.
     */
    limit?: number
  }

  /**
   * tbllocationsessionArchieve upsert
   */
  export type tbllocationsessionArchieveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * The filter to search for the tbllocationsessionArchieve to update in case it exists.
     */
    where: tbllocationsessionArchieveWhereUniqueInput
    /**
     * In case the tbllocationsessionArchieve found by the `where` argument doesn't exist, create a new tbllocationsessionArchieve with this data.
     */
    create: XOR<tbllocationsessionArchieveCreateInput, tbllocationsessionArchieveUncheckedCreateInput>
    /**
     * In case the tbllocationsessionArchieve was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tbllocationsessionArchieveUpdateInput, tbllocationsessionArchieveUncheckedUpdateInput>
  }

  /**
   * tbllocationsessionArchieve delete
   */
  export type tbllocationsessionArchieveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
    /**
     * Filter which tbllocationsessionArchieve to delete.
     */
    where: tbllocationsessionArchieveWhereUniqueInput
  }

  /**
   * tbllocationsessionArchieve deleteMany
   */
  export type tbllocationsessionArchieveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tbllocationsessionArchieves to delete
     */
    where?: tbllocationsessionArchieveWhereInput
    /**
     * Limit how many tbllocationsessionArchieves to delete.
     */
    limit?: number
  }

  /**
   * tbllocationsessionArchieve without action
   */
  export type tbllocationsessionArchieveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tbllocationsessionArchieve
     */
    select?: tbllocationsessionArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tbllocationsessionArchieve
     */
    omit?: tbllocationsessionArchieveOmit<ExtArgs> | null
  }


  /**
   * Model tblQueue
   */

  export type AggregateTblQueue = {
    _count: TblQueueCountAggregateOutputType | null
    _avg: TblQueueAvgAggregateOutputType | null
    _sum: TblQueueSumAggregateOutputType | null
    _min: TblQueueMinAggregateOutputType | null
    _max: TblQueueMaxAggregateOutputType | null
  }

  export type TblQueueAvgAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
    returnvisit72Hrs: number | null
    admitted: number | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    transferred: number | null
    transferid: Decimal | null
    ticket: number | null
  }

  export type TblQueueSumAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
    returnvisit72Hrs: number | null
    admitted: number | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    transferred: number | null
    transferid: Decimal | null
    ticket: number | null
  }

  export type TblQueueMinAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
    Pmh: string | null
    ticket: number | null
  }

  export type TblQueueMaxAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
    Pmh: string | null
    ticket: number | null
  }

  export type TblQueueCountAggregateOutputType = {
    tblQueueID: number
    deptcode: number
    qnumber: number
    issued_dt: number
    start_dt: number
    finish_dt: number
    status: number
    waiting: number
    barcode: number
    deptname: number
    name: number
    userid: number
    locationname: number
    nationality: number
    id: number
    patient_age: number
    gender: number
    complain: number
    triage_dt: number
    bp: number
    temp: number
    hr: number
    rr: number
    spo2: number
    rbs: number
    height: number
    weight: number
    allergies: number
    bedassignment: number
    override: number
    critical: number
    criticalmsg: number
    category: number
    dept_counter: number
    toremarks: number
    last_update: number
    mobileno: number
    returnvisit72Hrs: number
    admitted: number
    admittedIn: number
    consulted: number
    consultspecialtyid: number
    consultassign: number
    consultarrive: number
    consultdesicion: number
    transferred: number
    transferid: number
    Pmh: number
    ticket: number
    _all: number
  }


  export type TblQueueAvgAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
    returnvisit72Hrs?: true
    admitted?: true
    consulted?: true
    consultspecialtyid?: true
    transferred?: true
    transferid?: true
    ticket?: true
  }

  export type TblQueueSumAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
    returnvisit72Hrs?: true
    admitted?: true
    consulted?: true
    consultspecialtyid?: true
    transferred?: true
    transferid?: true
    ticket?: true
  }

  export type TblQueueMinAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
    Pmh?: true
    ticket?: true
  }

  export type TblQueueMaxAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
    Pmh?: true
    ticket?: true
  }

  export type TblQueueCountAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
    Pmh?: true
    ticket?: true
    _all?: true
  }

  export type TblQueueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueue to aggregate.
     */
    where?: tblQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueues to fetch.
     */
    orderBy?: tblQueueOrderByWithRelationInput | tblQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblQueues
    **/
    _count?: true | TblQueueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblQueueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblQueueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblQueueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblQueueMaxAggregateInputType
  }

  export type GetTblQueueAggregateType<T extends TblQueueAggregateArgs> = {
        [P in keyof T & keyof AggregateTblQueue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblQueue[P]>
      : GetScalarType<T[P], AggregateTblQueue[P]>
  }




  export type tblQueueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblQueueWhereInput
    orderBy?: tblQueueOrderByWithAggregationInput | tblQueueOrderByWithAggregationInput[]
    by: TblQueueScalarFieldEnum[] | TblQueueScalarFieldEnum
    having?: tblQueueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblQueueCountAggregateInputType | true
    _avg?: TblQueueAvgAggregateInputType
    _sum?: TblQueueSumAggregateInputType
    _min?: TblQueueMinAggregateInputType
    _max?: TblQueueMaxAggregateInputType
  }

  export type TblQueueGroupByOutputType = {
    tblQueueID: Decimal
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
    Pmh: string | null
    ticket: number | null
    _count: TblQueueCountAggregateOutputType | null
    _avg: TblQueueAvgAggregateOutputType | null
    _sum: TblQueueSumAggregateOutputType | null
    _min: TblQueueMinAggregateOutputType | null
    _max: TblQueueMaxAggregateOutputType | null
  }

  type GetTblQueueGroupByPayload<T extends tblQueueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblQueueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblQueueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblQueueGroupByOutputType[P]>
            : GetScalarType<T[P], TblQueueGroupByOutputType[P]>
        }
      >
    >


  export type tblQueueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
    returnvisit72Hrs?: boolean
    admitted?: boolean
    admittedIn?: boolean
    consulted?: boolean
    consultspecialtyid?: boolean
    consultassign?: boolean
    consultarrive?: boolean
    consultdesicion?: boolean
    transferred?: boolean
    transferid?: boolean
    Pmh?: boolean
    ticket?: boolean
  }, ExtArgs["result"]["tblQueue"]>



  export type tblQueueSelectScalar = {
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
    returnvisit72Hrs?: boolean
    admitted?: boolean
    admittedIn?: boolean
    consulted?: boolean
    consultspecialtyid?: boolean
    consultassign?: boolean
    consultarrive?: boolean
    consultdesicion?: boolean
    transferred?: boolean
    transferid?: boolean
    Pmh?: boolean
    ticket?: boolean
  }

  export type tblQueueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblQueueID" | "deptcode" | "qnumber" | "issued_dt" | "start_dt" | "finish_dt" | "status" | "waiting" | "barcode" | "deptname" | "name" | "userid" | "locationname" | "nationality" | "id" | "patient_age" | "gender" | "complain" | "triage_dt" | "bp" | "temp" | "hr" | "rr" | "spo2" | "rbs" | "height" | "weight" | "allergies" | "bedassignment" | "override" | "critical" | "criticalmsg" | "category" | "dept_counter" | "toremarks" | "last_update" | "mobileno" | "returnvisit72Hrs" | "admitted" | "admittedIn" | "consulted" | "consultspecialtyid" | "consultassign" | "consultarrive" | "consultdesicion" | "transferred" | "transferid" | "Pmh" | "ticket", ExtArgs["result"]["tblQueue"]>

  export type $tblQueuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblQueue"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblQueueID: Prisma.Decimal
      deptcode: string | null
      qnumber: Prisma.Decimal | null
      issued_dt: Date | null
      start_dt: Date | null
      finish_dt: Date | null
      status: Prisma.Decimal | null
      waiting: Prisma.Decimal | null
      barcode: string | null
      deptname: string | null
      name: string | null
      userid: string | null
      locationname: string | null
      nationality: string | null
      id: string | null
      patient_age: Prisma.Decimal | null
      gender: string | null
      complain: string | null
      triage_dt: Date | null
      bp: string | null
      temp: string | null
      hr: string | null
      rr: string | null
      spo2: string | null
      rbs: string | null
      height: string | null
      weight: string | null
      allergies: string | null
      bedassignment: string | null
      override: number | null
      critical: number | null
      criticalmsg: string | null
      category: Prisma.Decimal | null
      dept_counter: Prisma.Decimal | null
      toremarks: string | null
      last_update: Date | null
      mobileno: string | null
      returnvisit72Hrs: number | null
      admitted: number | null
      admittedIn: string | null
      consulted: number | null
      consultspecialtyid: Prisma.Decimal | null
      consultassign: Date | null
      consultarrive: Date | null
      consultdesicion: Date | null
      transferred: number | null
      transferid: Prisma.Decimal | null
      Pmh: string | null
      ticket: number | null
    }, ExtArgs["result"]["tblQueue"]>
    composites: {}
  }

  type tblQueueGetPayload<S extends boolean | null | undefined | tblQueueDefaultArgs> = $Result.GetResult<Prisma.$tblQueuePayload, S>

  type tblQueueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblQueueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblQueueCountAggregateInputType | true
    }

  export interface tblQueueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblQueue'], meta: { name: 'tblQueue' } }
    /**
     * Find zero or one TblQueue that matches the filter.
     * @param {tblQueueFindUniqueArgs} args - Arguments to find a TblQueue
     * @example
     * // Get one TblQueue
     * const tblQueue = await prisma.tblQueue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblQueueFindUniqueArgs>(args: SelectSubset<T, tblQueueFindUniqueArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblQueue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblQueueFindUniqueOrThrowArgs} args - Arguments to find a TblQueue
     * @example
     * // Get one TblQueue
     * const tblQueue = await prisma.tblQueue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblQueueFindUniqueOrThrowArgs>(args: SelectSubset<T, tblQueueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueFindFirstArgs} args - Arguments to find a TblQueue
     * @example
     * // Get one TblQueue
     * const tblQueue = await prisma.tblQueue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblQueueFindFirstArgs>(args?: SelectSubset<T, tblQueueFindFirstArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueFindFirstOrThrowArgs} args - Arguments to find a TblQueue
     * @example
     * // Get one TblQueue
     * const tblQueue = await prisma.tblQueue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblQueueFindFirstOrThrowArgs>(args?: SelectSubset<T, tblQueueFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblQueues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblQueues
     * const tblQueues = await prisma.tblQueue.findMany()
     * 
     * // Get first 10 TblQueues
     * const tblQueues = await prisma.tblQueue.findMany({ take: 10 })
     * 
     * // Only select the `tblQueueID`
     * const tblQueueWithTblQueueIDOnly = await prisma.tblQueue.findMany({ select: { tblQueueID: true } })
     * 
     */
    findMany<T extends tblQueueFindManyArgs>(args?: SelectSubset<T, tblQueueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblQueue.
     * @param {tblQueueCreateArgs} args - Arguments to create a TblQueue.
     * @example
     * // Create one TblQueue
     * const TblQueue = await prisma.tblQueue.create({
     *   data: {
     *     // ... data to create a TblQueue
     *   }
     * })
     * 
     */
    create<T extends tblQueueCreateArgs>(args: SelectSubset<T, tblQueueCreateArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblQueues.
     * @param {tblQueueCreateManyArgs} args - Arguments to create many TblQueues.
     * @example
     * // Create many TblQueues
     * const tblQueue = await prisma.tblQueue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblQueueCreateManyArgs>(args?: SelectSubset<T, tblQueueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblQueue.
     * @param {tblQueueDeleteArgs} args - Arguments to delete one TblQueue.
     * @example
     * // Delete one TblQueue
     * const TblQueue = await prisma.tblQueue.delete({
     *   where: {
     *     // ... filter to delete one TblQueue
     *   }
     * })
     * 
     */
    delete<T extends tblQueueDeleteArgs>(args: SelectSubset<T, tblQueueDeleteArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblQueue.
     * @param {tblQueueUpdateArgs} args - Arguments to update one TblQueue.
     * @example
     * // Update one TblQueue
     * const tblQueue = await prisma.tblQueue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblQueueUpdateArgs>(args: SelectSubset<T, tblQueueUpdateArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblQueues.
     * @param {tblQueueDeleteManyArgs} args - Arguments to filter TblQueues to delete.
     * @example
     * // Delete a few TblQueues
     * const { count } = await prisma.tblQueue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblQueueDeleteManyArgs>(args?: SelectSubset<T, tblQueueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblQueues
     * const tblQueue = await prisma.tblQueue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblQueueUpdateManyArgs>(args: SelectSubset<T, tblQueueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblQueue.
     * @param {tblQueueUpsertArgs} args - Arguments to update or create a TblQueue.
     * @example
     * // Update or create a TblQueue
     * const tblQueue = await prisma.tblQueue.upsert({
     *   create: {
     *     // ... data to create a TblQueue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblQueue we want to update
     *   }
     * })
     */
    upsert<T extends tblQueueUpsertArgs>(args: SelectSubset<T, tblQueueUpsertArgs<ExtArgs>>): Prisma__tblQueueClient<$Result.GetResult<Prisma.$tblQueuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueCountArgs} args - Arguments to filter TblQueues to count.
     * @example
     * // Count the number of TblQueues
     * const count = await prisma.tblQueue.count({
     *   where: {
     *     // ... the filter for the TblQueues we want to count
     *   }
     * })
    **/
    count<T extends tblQueueCountArgs>(
      args?: Subset<T, tblQueueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblQueueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblQueueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblQueueAggregateArgs>(args: Subset<T, TblQueueAggregateArgs>): Prisma.PrismaPromise<GetTblQueueAggregateType<T>>

    /**
     * Group by TblQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblQueueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblQueueGroupByArgs['orderBy'] }
        : { orderBy?: tblQueueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblQueueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblQueueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblQueue model
   */
  readonly fields: tblQueueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblQueue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblQueueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblQueue model
   */
  interface tblQueueFieldRefs {
    readonly tblQueueID: FieldRef<"tblQueue", 'Decimal'>
    readonly deptcode: FieldRef<"tblQueue", 'String'>
    readonly qnumber: FieldRef<"tblQueue", 'Decimal'>
    readonly issued_dt: FieldRef<"tblQueue", 'DateTime'>
    readonly start_dt: FieldRef<"tblQueue", 'DateTime'>
    readonly finish_dt: FieldRef<"tblQueue", 'DateTime'>
    readonly status: FieldRef<"tblQueue", 'Decimal'>
    readonly waiting: FieldRef<"tblQueue", 'Decimal'>
    readonly barcode: FieldRef<"tblQueue", 'String'>
    readonly deptname: FieldRef<"tblQueue", 'String'>
    readonly name: FieldRef<"tblQueue", 'String'>
    readonly userid: FieldRef<"tblQueue", 'String'>
    readonly locationname: FieldRef<"tblQueue", 'String'>
    readonly nationality: FieldRef<"tblQueue", 'String'>
    readonly id: FieldRef<"tblQueue", 'String'>
    readonly patient_age: FieldRef<"tblQueue", 'Decimal'>
    readonly gender: FieldRef<"tblQueue", 'String'>
    readonly complain: FieldRef<"tblQueue", 'String'>
    readonly triage_dt: FieldRef<"tblQueue", 'DateTime'>
    readonly bp: FieldRef<"tblQueue", 'String'>
    readonly temp: FieldRef<"tblQueue", 'String'>
    readonly hr: FieldRef<"tblQueue", 'String'>
    readonly rr: FieldRef<"tblQueue", 'String'>
    readonly spo2: FieldRef<"tblQueue", 'String'>
    readonly rbs: FieldRef<"tblQueue", 'String'>
    readonly height: FieldRef<"tblQueue", 'String'>
    readonly weight: FieldRef<"tblQueue", 'String'>
    readonly allergies: FieldRef<"tblQueue", 'String'>
    readonly bedassignment: FieldRef<"tblQueue", 'String'>
    readonly override: FieldRef<"tblQueue", 'Int'>
    readonly critical: FieldRef<"tblQueue", 'Int'>
    readonly criticalmsg: FieldRef<"tblQueue", 'String'>
    readonly category: FieldRef<"tblQueue", 'Decimal'>
    readonly dept_counter: FieldRef<"tblQueue", 'Decimal'>
    readonly toremarks: FieldRef<"tblQueue", 'String'>
    readonly last_update: FieldRef<"tblQueue", 'DateTime'>
    readonly mobileno: FieldRef<"tblQueue", 'String'>
    readonly returnvisit72Hrs: FieldRef<"tblQueue", 'Int'>
    readonly admitted: FieldRef<"tblQueue", 'Int'>
    readonly admittedIn: FieldRef<"tblQueue", 'String'>
    readonly consulted: FieldRef<"tblQueue", 'Int'>
    readonly consultspecialtyid: FieldRef<"tblQueue", 'Decimal'>
    readonly consultassign: FieldRef<"tblQueue", 'DateTime'>
    readonly consultarrive: FieldRef<"tblQueue", 'DateTime'>
    readonly consultdesicion: FieldRef<"tblQueue", 'DateTime'>
    readonly transferred: FieldRef<"tblQueue", 'Int'>
    readonly transferid: FieldRef<"tblQueue", 'Decimal'>
    readonly Pmh: FieldRef<"tblQueue", 'String'>
    readonly ticket: FieldRef<"tblQueue", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * tblQueue findUnique
   */
  export type tblQueueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * Filter, which tblQueue to fetch.
     */
    where: tblQueueWhereUniqueInput
  }

  /**
   * tblQueue findUniqueOrThrow
   */
  export type tblQueueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * Filter, which tblQueue to fetch.
     */
    where: tblQueueWhereUniqueInput
  }

  /**
   * tblQueue findFirst
   */
  export type tblQueueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * Filter, which tblQueue to fetch.
     */
    where?: tblQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueues to fetch.
     */
    orderBy?: tblQueueOrderByWithRelationInput | tblQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueues.
     */
    cursor?: tblQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueues.
     */
    distinct?: TblQueueScalarFieldEnum | TblQueueScalarFieldEnum[]
  }

  /**
   * tblQueue findFirstOrThrow
   */
  export type tblQueueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * Filter, which tblQueue to fetch.
     */
    where?: tblQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueues to fetch.
     */
    orderBy?: tblQueueOrderByWithRelationInput | tblQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueues.
     */
    cursor?: tblQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueues.
     */
    distinct?: TblQueueScalarFieldEnum | TblQueueScalarFieldEnum[]
  }

  /**
   * tblQueue findMany
   */
  export type tblQueueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * Filter, which tblQueues to fetch.
     */
    where?: tblQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueues to fetch.
     */
    orderBy?: tblQueueOrderByWithRelationInput | tblQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblQueues.
     */
    cursor?: tblQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueues.
     */
    skip?: number
    distinct?: TblQueueScalarFieldEnum | TblQueueScalarFieldEnum[]
  }

  /**
   * tblQueue create
   */
  export type tblQueueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * The data needed to create a tblQueue.
     */
    data: XOR<tblQueueCreateInput, tblQueueUncheckedCreateInput>
  }

  /**
   * tblQueue createMany
   */
  export type tblQueueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblQueues.
     */
    data: tblQueueCreateManyInput | tblQueueCreateManyInput[]
  }

  /**
   * tblQueue update
   */
  export type tblQueueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * The data needed to update a tblQueue.
     */
    data: XOR<tblQueueUpdateInput, tblQueueUncheckedUpdateInput>
    /**
     * Choose, which tblQueue to update.
     */
    where: tblQueueWhereUniqueInput
  }

  /**
   * tblQueue updateMany
   */
  export type tblQueueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblQueues.
     */
    data: XOR<tblQueueUpdateManyMutationInput, tblQueueUncheckedUpdateManyInput>
    /**
     * Filter which tblQueues to update
     */
    where?: tblQueueWhereInput
    /**
     * Limit how many tblQueues to update.
     */
    limit?: number
  }

  /**
   * tblQueue upsert
   */
  export type tblQueueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * The filter to search for the tblQueue to update in case it exists.
     */
    where: tblQueueWhereUniqueInput
    /**
     * In case the tblQueue found by the `where` argument doesn't exist, create a new tblQueue with this data.
     */
    create: XOR<tblQueueCreateInput, tblQueueUncheckedCreateInput>
    /**
     * In case the tblQueue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblQueueUpdateInput, tblQueueUncheckedUpdateInput>
  }

  /**
   * tblQueue delete
   */
  export type tblQueueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
    /**
     * Filter which tblQueue to delete.
     */
    where: tblQueueWhereUniqueInput
  }

  /**
   * tblQueue deleteMany
   */
  export type tblQueueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueues to delete
     */
    where?: tblQueueWhereInput
    /**
     * Limit how many tblQueues to delete.
     */
    limit?: number
  }

  /**
   * tblQueue without action
   */
  export type tblQueueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueue
     */
    select?: tblQueueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueue
     */
    omit?: tblQueueOmit<ExtArgs> | null
  }


  /**
   * Model tblQueueArchieve
   */

  export type AggregateTblQueueArchieve = {
    _count: TblQueueArchieveCountAggregateOutputType | null
    _avg: TblQueueArchieveAvgAggregateOutputType | null
    _sum: TblQueueArchieveSumAggregateOutputType | null
    _min: TblQueueArchieveMinAggregateOutputType | null
    _max: TblQueueArchieveMaxAggregateOutputType | null
  }

  export type TblQueueArchieveAvgAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
    returnvisit72Hrs: number | null
    admitted: number | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    transferred: number | null
    transferid: Decimal | null
    ticket: number | null
  }

  export type TblQueueArchieveSumAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
    returnvisit72Hrs: number | null
    admitted: number | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    transferred: number | null
    transferid: Decimal | null
    ticket: number | null
  }

  export type TblQueueArchieveMinAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
    ticket: number | null
    Pmh: string | null
  }

  export type TblQueueArchieveMaxAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
    ticket: number | null
    Pmh: string | null
  }

  export type TblQueueArchieveCountAggregateOutputType = {
    tblQueueID: number
    deptcode: number
    qnumber: number
    issued_dt: number
    start_dt: number
    finish_dt: number
    status: number
    waiting: number
    barcode: number
    deptname: number
    name: number
    userid: number
    locationname: number
    nationality: number
    id: number
    patient_age: number
    gender: number
    complain: number
    triage_dt: number
    bp: number
    temp: number
    hr: number
    rr: number
    spo2: number
    rbs: number
    height: number
    weight: number
    allergies: number
    bedassignment: number
    override: number
    critical: number
    criticalmsg: number
    category: number
    dept_counter: number
    toremarks: number
    last_update: number
    mobileno: number
    returnvisit72Hrs: number
    admitted: number
    admittedIn: number
    consulted: number
    consultspecialtyid: number
    consultassign: number
    consultarrive: number
    consultdesicion: number
    transferred: number
    transferid: number
    ticket: number
    Pmh: number
    _all: number
  }


  export type TblQueueArchieveAvgAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
    returnvisit72Hrs?: true
    admitted?: true
    consulted?: true
    consultspecialtyid?: true
    transferred?: true
    transferid?: true
    ticket?: true
  }

  export type TblQueueArchieveSumAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
    returnvisit72Hrs?: true
    admitted?: true
    consulted?: true
    consultspecialtyid?: true
    transferred?: true
    transferid?: true
    ticket?: true
  }

  export type TblQueueArchieveMinAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
    ticket?: true
    Pmh?: true
  }

  export type TblQueueArchieveMaxAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
    ticket?: true
    Pmh?: true
  }

  export type TblQueueArchieveCountAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
    ticket?: true
    Pmh?: true
    _all?: true
  }

  export type TblQueueArchieveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueArchieve to aggregate.
     */
    where?: tblQueueArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieves to fetch.
     */
    orderBy?: tblQueueArchieveOrderByWithRelationInput | tblQueueArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblQueueArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblQueueArchieves
    **/
    _count?: true | TblQueueArchieveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblQueueArchieveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblQueueArchieveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblQueueArchieveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblQueueArchieveMaxAggregateInputType
  }

  export type GetTblQueueArchieveAggregateType<T extends TblQueueArchieveAggregateArgs> = {
        [P in keyof T & keyof AggregateTblQueueArchieve]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblQueueArchieve[P]>
      : GetScalarType<T[P], AggregateTblQueueArchieve[P]>
  }




  export type tblQueueArchieveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblQueueArchieveWhereInput
    orderBy?: tblQueueArchieveOrderByWithAggregationInput | tblQueueArchieveOrderByWithAggregationInput[]
    by: TblQueueArchieveScalarFieldEnum[] | TblQueueArchieveScalarFieldEnum
    having?: tblQueueArchieveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblQueueArchieveCountAggregateInputType | true
    _avg?: TblQueueArchieveAvgAggregateInputType
    _sum?: TblQueueArchieveSumAggregateInputType
    _min?: TblQueueArchieveMinAggregateInputType
    _max?: TblQueueArchieveMaxAggregateInputType
  }

  export type TblQueueArchieveGroupByOutputType = {
    tblQueueID: Decimal
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
    ticket: number | null
    Pmh: string | null
    _count: TblQueueArchieveCountAggregateOutputType | null
    _avg: TblQueueArchieveAvgAggregateOutputType | null
    _sum: TblQueueArchieveSumAggregateOutputType | null
    _min: TblQueueArchieveMinAggregateOutputType | null
    _max: TblQueueArchieveMaxAggregateOutputType | null
  }

  type GetTblQueueArchieveGroupByPayload<T extends tblQueueArchieveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblQueueArchieveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblQueueArchieveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblQueueArchieveGroupByOutputType[P]>
            : GetScalarType<T[P], TblQueueArchieveGroupByOutputType[P]>
        }
      >
    >


  export type tblQueueArchieveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
    returnvisit72Hrs?: boolean
    admitted?: boolean
    admittedIn?: boolean
    consulted?: boolean
    consultspecialtyid?: boolean
    consultassign?: boolean
    consultarrive?: boolean
    consultdesicion?: boolean
    transferred?: boolean
    transferid?: boolean
    ticket?: boolean
    Pmh?: boolean
  }, ExtArgs["result"]["tblQueueArchieve"]>



  export type tblQueueArchieveSelectScalar = {
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
    returnvisit72Hrs?: boolean
    admitted?: boolean
    admittedIn?: boolean
    consulted?: boolean
    consultspecialtyid?: boolean
    consultassign?: boolean
    consultarrive?: boolean
    consultdesicion?: boolean
    transferred?: boolean
    transferid?: boolean
    ticket?: boolean
    Pmh?: boolean
  }

  export type tblQueueArchieveOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblQueueID" | "deptcode" | "qnumber" | "issued_dt" | "start_dt" | "finish_dt" | "status" | "waiting" | "barcode" | "deptname" | "name" | "userid" | "locationname" | "nationality" | "id" | "patient_age" | "gender" | "complain" | "triage_dt" | "bp" | "temp" | "hr" | "rr" | "spo2" | "rbs" | "height" | "weight" | "allergies" | "bedassignment" | "override" | "critical" | "criticalmsg" | "category" | "dept_counter" | "toremarks" | "last_update" | "mobileno" | "returnvisit72Hrs" | "admitted" | "admittedIn" | "consulted" | "consultspecialtyid" | "consultassign" | "consultarrive" | "consultdesicion" | "transferred" | "transferid" | "ticket" | "Pmh", ExtArgs["result"]["tblQueueArchieve"]>

  export type $tblQueueArchievePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblQueueArchieve"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblQueueID: Prisma.Decimal
      deptcode: string | null
      qnumber: Prisma.Decimal | null
      issued_dt: Date | null
      start_dt: Date | null
      finish_dt: Date | null
      status: Prisma.Decimal | null
      waiting: Prisma.Decimal | null
      barcode: string | null
      deptname: string | null
      name: string | null
      userid: string | null
      locationname: string | null
      nationality: string | null
      id: string | null
      patient_age: Prisma.Decimal | null
      gender: string | null
      complain: string | null
      triage_dt: Date | null
      bp: string | null
      temp: string | null
      hr: string | null
      rr: string | null
      spo2: string | null
      rbs: string | null
      height: string | null
      weight: string | null
      allergies: string | null
      bedassignment: string | null
      override: number | null
      critical: number | null
      criticalmsg: string | null
      category: Prisma.Decimal | null
      dept_counter: Prisma.Decimal | null
      toremarks: string | null
      last_update: Date | null
      mobileno: string | null
      returnvisit72Hrs: number | null
      admitted: number | null
      admittedIn: string | null
      consulted: number | null
      consultspecialtyid: Prisma.Decimal | null
      consultassign: Date | null
      consultarrive: Date | null
      consultdesicion: Date | null
      transferred: number | null
      transferid: Prisma.Decimal | null
      ticket: number | null
      Pmh: string | null
    }, ExtArgs["result"]["tblQueueArchieve"]>
    composites: {}
  }

  type tblQueueArchieveGetPayload<S extends boolean | null | undefined | tblQueueArchieveDefaultArgs> = $Result.GetResult<Prisma.$tblQueueArchievePayload, S>

  type tblQueueArchieveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblQueueArchieveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblQueueArchieveCountAggregateInputType | true
    }

  export interface tblQueueArchieveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblQueueArchieve'], meta: { name: 'tblQueueArchieve' } }
    /**
     * Find zero or one TblQueueArchieve that matches the filter.
     * @param {tblQueueArchieveFindUniqueArgs} args - Arguments to find a TblQueueArchieve
     * @example
     * // Get one TblQueueArchieve
     * const tblQueueArchieve = await prisma.tblQueueArchieve.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblQueueArchieveFindUniqueArgs>(args: SelectSubset<T, tblQueueArchieveFindUniqueArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblQueueArchieve that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblQueueArchieveFindUniqueOrThrowArgs} args - Arguments to find a TblQueueArchieve
     * @example
     * // Get one TblQueueArchieve
     * const tblQueueArchieve = await prisma.tblQueueArchieve.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblQueueArchieveFindUniqueOrThrowArgs>(args: SelectSubset<T, tblQueueArchieveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueArchieve that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveFindFirstArgs} args - Arguments to find a TblQueueArchieve
     * @example
     * // Get one TblQueueArchieve
     * const tblQueueArchieve = await prisma.tblQueueArchieve.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblQueueArchieveFindFirstArgs>(args?: SelectSubset<T, tblQueueArchieveFindFirstArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueArchieve that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveFindFirstOrThrowArgs} args - Arguments to find a TblQueueArchieve
     * @example
     * // Get one TblQueueArchieve
     * const tblQueueArchieve = await prisma.tblQueueArchieve.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblQueueArchieveFindFirstOrThrowArgs>(args?: SelectSubset<T, tblQueueArchieveFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblQueueArchieves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblQueueArchieves
     * const tblQueueArchieves = await prisma.tblQueueArchieve.findMany()
     * 
     * // Get first 10 TblQueueArchieves
     * const tblQueueArchieves = await prisma.tblQueueArchieve.findMany({ take: 10 })
     * 
     * // Only select the `tblQueueID`
     * const tblQueueArchieveWithTblQueueIDOnly = await prisma.tblQueueArchieve.findMany({ select: { tblQueueID: true } })
     * 
     */
    findMany<T extends tblQueueArchieveFindManyArgs>(args?: SelectSubset<T, tblQueueArchieveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblQueueArchieve.
     * @param {tblQueueArchieveCreateArgs} args - Arguments to create a TblQueueArchieve.
     * @example
     * // Create one TblQueueArchieve
     * const TblQueueArchieve = await prisma.tblQueueArchieve.create({
     *   data: {
     *     // ... data to create a TblQueueArchieve
     *   }
     * })
     * 
     */
    create<T extends tblQueueArchieveCreateArgs>(args: SelectSubset<T, tblQueueArchieveCreateArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblQueueArchieves.
     * @param {tblQueueArchieveCreateManyArgs} args - Arguments to create many TblQueueArchieves.
     * @example
     * // Create many TblQueueArchieves
     * const tblQueueArchieve = await prisma.tblQueueArchieve.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblQueueArchieveCreateManyArgs>(args?: SelectSubset<T, tblQueueArchieveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblQueueArchieve.
     * @param {tblQueueArchieveDeleteArgs} args - Arguments to delete one TblQueueArchieve.
     * @example
     * // Delete one TblQueueArchieve
     * const TblQueueArchieve = await prisma.tblQueueArchieve.delete({
     *   where: {
     *     // ... filter to delete one TblQueueArchieve
     *   }
     * })
     * 
     */
    delete<T extends tblQueueArchieveDeleteArgs>(args: SelectSubset<T, tblQueueArchieveDeleteArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblQueueArchieve.
     * @param {tblQueueArchieveUpdateArgs} args - Arguments to update one TblQueueArchieve.
     * @example
     * // Update one TblQueueArchieve
     * const tblQueueArchieve = await prisma.tblQueueArchieve.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblQueueArchieveUpdateArgs>(args: SelectSubset<T, tblQueueArchieveUpdateArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblQueueArchieves.
     * @param {tblQueueArchieveDeleteManyArgs} args - Arguments to filter TblQueueArchieves to delete.
     * @example
     * // Delete a few TblQueueArchieves
     * const { count } = await prisma.tblQueueArchieve.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblQueueArchieveDeleteManyArgs>(args?: SelectSubset<T, tblQueueArchieveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblQueueArchieves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblQueueArchieves
     * const tblQueueArchieve = await prisma.tblQueueArchieve.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblQueueArchieveUpdateManyArgs>(args: SelectSubset<T, tblQueueArchieveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblQueueArchieve.
     * @param {tblQueueArchieveUpsertArgs} args - Arguments to update or create a TblQueueArchieve.
     * @example
     * // Update or create a TblQueueArchieve
     * const tblQueueArchieve = await prisma.tblQueueArchieve.upsert({
     *   create: {
     *     // ... data to create a TblQueueArchieve
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblQueueArchieve we want to update
     *   }
     * })
     */
    upsert<T extends tblQueueArchieveUpsertArgs>(args: SelectSubset<T, tblQueueArchieveUpsertArgs<ExtArgs>>): Prisma__tblQueueArchieveClient<$Result.GetResult<Prisma.$tblQueueArchievePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblQueueArchieves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveCountArgs} args - Arguments to filter TblQueueArchieves to count.
     * @example
     * // Count the number of TblQueueArchieves
     * const count = await prisma.tblQueueArchieve.count({
     *   where: {
     *     // ... the filter for the TblQueueArchieves we want to count
     *   }
     * })
    **/
    count<T extends tblQueueArchieveCountArgs>(
      args?: Subset<T, tblQueueArchieveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblQueueArchieveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblQueueArchieve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblQueueArchieveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblQueueArchieveAggregateArgs>(args: Subset<T, TblQueueArchieveAggregateArgs>): Prisma.PrismaPromise<GetTblQueueArchieveAggregateType<T>>

    /**
     * Group by TblQueueArchieve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblQueueArchieveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblQueueArchieveGroupByArgs['orderBy'] }
        : { orderBy?: tblQueueArchieveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblQueueArchieveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblQueueArchieveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblQueueArchieve model
   */
  readonly fields: tblQueueArchieveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblQueueArchieve.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblQueueArchieveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblQueueArchieve model
   */
  interface tblQueueArchieveFieldRefs {
    readonly tblQueueID: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly deptcode: FieldRef<"tblQueueArchieve", 'String'>
    readonly qnumber: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly issued_dt: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly start_dt: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly finish_dt: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly status: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly waiting: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly barcode: FieldRef<"tblQueueArchieve", 'String'>
    readonly deptname: FieldRef<"tblQueueArchieve", 'String'>
    readonly name: FieldRef<"tblQueueArchieve", 'String'>
    readonly userid: FieldRef<"tblQueueArchieve", 'String'>
    readonly locationname: FieldRef<"tblQueueArchieve", 'String'>
    readonly nationality: FieldRef<"tblQueueArchieve", 'String'>
    readonly id: FieldRef<"tblQueueArchieve", 'String'>
    readonly patient_age: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly gender: FieldRef<"tblQueueArchieve", 'String'>
    readonly complain: FieldRef<"tblQueueArchieve", 'String'>
    readonly triage_dt: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly bp: FieldRef<"tblQueueArchieve", 'String'>
    readonly temp: FieldRef<"tblQueueArchieve", 'String'>
    readonly hr: FieldRef<"tblQueueArchieve", 'String'>
    readonly rr: FieldRef<"tblQueueArchieve", 'String'>
    readonly spo2: FieldRef<"tblQueueArchieve", 'String'>
    readonly rbs: FieldRef<"tblQueueArchieve", 'String'>
    readonly height: FieldRef<"tblQueueArchieve", 'String'>
    readonly weight: FieldRef<"tblQueueArchieve", 'String'>
    readonly allergies: FieldRef<"tblQueueArchieve", 'String'>
    readonly bedassignment: FieldRef<"tblQueueArchieve", 'String'>
    readonly override: FieldRef<"tblQueueArchieve", 'Int'>
    readonly critical: FieldRef<"tblQueueArchieve", 'Int'>
    readonly criticalmsg: FieldRef<"tblQueueArchieve", 'String'>
    readonly category: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly dept_counter: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly toremarks: FieldRef<"tblQueueArchieve", 'String'>
    readonly last_update: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly mobileno: FieldRef<"tblQueueArchieve", 'String'>
    readonly returnvisit72Hrs: FieldRef<"tblQueueArchieve", 'Int'>
    readonly admitted: FieldRef<"tblQueueArchieve", 'Int'>
    readonly admittedIn: FieldRef<"tblQueueArchieve", 'String'>
    readonly consulted: FieldRef<"tblQueueArchieve", 'Int'>
    readonly consultspecialtyid: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly consultassign: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly consultarrive: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly consultdesicion: FieldRef<"tblQueueArchieve", 'DateTime'>
    readonly transferred: FieldRef<"tblQueueArchieve", 'Int'>
    readonly transferid: FieldRef<"tblQueueArchieve", 'Decimal'>
    readonly ticket: FieldRef<"tblQueueArchieve", 'Int'>
    readonly Pmh: FieldRef<"tblQueueArchieve", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblQueueArchieve findUnique
   */
  export type tblQueueArchieveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieve to fetch.
     */
    where: tblQueueArchieveWhereUniqueInput
  }

  /**
   * tblQueueArchieve findUniqueOrThrow
   */
  export type tblQueueArchieveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieve to fetch.
     */
    where: tblQueueArchieveWhereUniqueInput
  }

  /**
   * tblQueueArchieve findFirst
   */
  export type tblQueueArchieveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieve to fetch.
     */
    where?: tblQueueArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieves to fetch.
     */
    orderBy?: tblQueueArchieveOrderByWithRelationInput | tblQueueArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueArchieves.
     */
    cursor?: tblQueueArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueArchieves.
     */
    distinct?: TblQueueArchieveScalarFieldEnum | TblQueueArchieveScalarFieldEnum[]
  }

  /**
   * tblQueueArchieve findFirstOrThrow
   */
  export type tblQueueArchieveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieve to fetch.
     */
    where?: tblQueueArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieves to fetch.
     */
    orderBy?: tblQueueArchieveOrderByWithRelationInput | tblQueueArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueArchieves.
     */
    cursor?: tblQueueArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueArchieves.
     */
    distinct?: TblQueueArchieveScalarFieldEnum | TblQueueArchieveScalarFieldEnum[]
  }

  /**
   * tblQueueArchieve findMany
   */
  export type tblQueueArchieveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieves to fetch.
     */
    where?: tblQueueArchieveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieves to fetch.
     */
    orderBy?: tblQueueArchieveOrderByWithRelationInput | tblQueueArchieveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblQueueArchieves.
     */
    cursor?: tblQueueArchieveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieves.
     */
    skip?: number
    distinct?: TblQueueArchieveScalarFieldEnum | TblQueueArchieveScalarFieldEnum[]
  }

  /**
   * tblQueueArchieve create
   */
  export type tblQueueArchieveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * The data needed to create a tblQueueArchieve.
     */
    data: XOR<tblQueueArchieveCreateInput, tblQueueArchieveUncheckedCreateInput>
  }

  /**
   * tblQueueArchieve createMany
   */
  export type tblQueueArchieveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblQueueArchieves.
     */
    data: tblQueueArchieveCreateManyInput | tblQueueArchieveCreateManyInput[]
  }

  /**
   * tblQueueArchieve update
   */
  export type tblQueueArchieveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * The data needed to update a tblQueueArchieve.
     */
    data: XOR<tblQueueArchieveUpdateInput, tblQueueArchieveUncheckedUpdateInput>
    /**
     * Choose, which tblQueueArchieve to update.
     */
    where: tblQueueArchieveWhereUniqueInput
  }

  /**
   * tblQueueArchieve updateMany
   */
  export type tblQueueArchieveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblQueueArchieves.
     */
    data: XOR<tblQueueArchieveUpdateManyMutationInput, tblQueueArchieveUncheckedUpdateManyInput>
    /**
     * Filter which tblQueueArchieves to update
     */
    where?: tblQueueArchieveWhereInput
    /**
     * Limit how many tblQueueArchieves to update.
     */
    limit?: number
  }

  /**
   * tblQueueArchieve upsert
   */
  export type tblQueueArchieveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * The filter to search for the tblQueueArchieve to update in case it exists.
     */
    where: tblQueueArchieveWhereUniqueInput
    /**
     * In case the tblQueueArchieve found by the `where` argument doesn't exist, create a new tblQueueArchieve with this data.
     */
    create: XOR<tblQueueArchieveCreateInput, tblQueueArchieveUncheckedCreateInput>
    /**
     * In case the tblQueueArchieve was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblQueueArchieveUpdateInput, tblQueueArchieveUncheckedUpdateInput>
  }

  /**
   * tblQueueArchieve delete
   */
  export type tblQueueArchieveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
    /**
     * Filter which tblQueueArchieve to delete.
     */
    where: tblQueueArchieveWhereUniqueInput
  }

  /**
   * tblQueueArchieve deleteMany
   */
  export type tblQueueArchieveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueArchieves to delete
     */
    where?: tblQueueArchieveWhereInput
    /**
     * Limit how many tblQueueArchieves to delete.
     */
    limit?: number
  }

  /**
   * tblQueueArchieve without action
   */
  export type tblQueueArchieveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieve
     */
    select?: tblQueueArchieveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieve
     */
    omit?: tblQueueArchieveOmit<ExtArgs> | null
  }


  /**
   * Model tblQueueArchieveTemp
   */

  export type AggregateTblQueueArchieveTemp = {
    _count: TblQueueArchieveTempCountAggregateOutputType | null
    _avg: TblQueueArchieveTempAvgAggregateOutputType | null
    _sum: TblQueueArchieveTempSumAggregateOutputType | null
    _min: TblQueueArchieveTempMinAggregateOutputType | null
    _max: TblQueueArchieveTempMaxAggregateOutputType | null
  }

  export type TblQueueArchieveTempAvgAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
  }

  export type TblQueueArchieveTempSumAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
  }

  export type TblQueueArchieveTempMinAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
  }

  export type TblQueueArchieveTempMaxAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
  }

  export type TblQueueArchieveTempCountAggregateOutputType = {
    tblQueueID: number
    deptcode: number
    qnumber: number
    issued_dt: number
    start_dt: number
    finish_dt: number
    status: number
    waiting: number
    barcode: number
    deptname: number
    name: number
    userid: number
    locationname: number
    nationality: number
    id: number
    patient_age: number
    gender: number
    complain: number
    triage_dt: number
    bp: number
    temp: number
    hr: number
    rr: number
    spo2: number
    rbs: number
    height: number
    weight: number
    allergies: number
    bedassignment: number
    override: number
    critical: number
    criticalmsg: number
    category: number
    dept_counter: number
    toremarks: number
    last_update: number
    mobileno: number
    _all: number
  }


  export type TblQueueArchieveTempAvgAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
  }

  export type TblQueueArchieveTempSumAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
  }

  export type TblQueueArchieveTempMinAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
  }

  export type TblQueueArchieveTempMaxAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
  }

  export type TblQueueArchieveTempCountAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    _all?: true
  }

  export type TblQueueArchieveTempAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueArchieveTemp to aggregate.
     */
    where?: tblQueueArchieveTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieveTemps to fetch.
     */
    orderBy?: tblQueueArchieveTempOrderByWithRelationInput | tblQueueArchieveTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblQueueArchieveTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieveTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieveTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblQueueArchieveTemps
    **/
    _count?: true | TblQueueArchieveTempCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblQueueArchieveTempAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblQueueArchieveTempSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblQueueArchieveTempMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblQueueArchieveTempMaxAggregateInputType
  }

  export type GetTblQueueArchieveTempAggregateType<T extends TblQueueArchieveTempAggregateArgs> = {
        [P in keyof T & keyof AggregateTblQueueArchieveTemp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblQueueArchieveTemp[P]>
      : GetScalarType<T[P], AggregateTblQueueArchieveTemp[P]>
  }




  export type tblQueueArchieveTempGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblQueueArchieveTempWhereInput
    orderBy?: tblQueueArchieveTempOrderByWithAggregationInput | tblQueueArchieveTempOrderByWithAggregationInput[]
    by: TblQueueArchieveTempScalarFieldEnum[] | TblQueueArchieveTempScalarFieldEnum
    having?: tblQueueArchieveTempScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblQueueArchieveTempCountAggregateInputType | true
    _avg?: TblQueueArchieveTempAvgAggregateInputType
    _sum?: TblQueueArchieveTempSumAggregateInputType
    _min?: TblQueueArchieveTempMinAggregateInputType
    _max?: TblQueueArchieveTempMaxAggregateInputType
  }

  export type TblQueueArchieveTempGroupByOutputType = {
    tblQueueID: Decimal
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    _count: TblQueueArchieveTempCountAggregateOutputType | null
    _avg: TblQueueArchieveTempAvgAggregateOutputType | null
    _sum: TblQueueArchieveTempSumAggregateOutputType | null
    _min: TblQueueArchieveTempMinAggregateOutputType | null
    _max: TblQueueArchieveTempMaxAggregateOutputType | null
  }

  type GetTblQueueArchieveTempGroupByPayload<T extends tblQueueArchieveTempGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblQueueArchieveTempGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblQueueArchieveTempGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblQueueArchieveTempGroupByOutputType[P]>
            : GetScalarType<T[P], TblQueueArchieveTempGroupByOutputType[P]>
        }
      >
    >


  export type tblQueueArchieveTempSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
  }, ExtArgs["result"]["tblQueueArchieveTemp"]>



  export type tblQueueArchieveTempSelectScalar = {
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
  }

  export type tblQueueArchieveTempOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblQueueID" | "deptcode" | "qnumber" | "issued_dt" | "start_dt" | "finish_dt" | "status" | "waiting" | "barcode" | "deptname" | "name" | "userid" | "locationname" | "nationality" | "id" | "patient_age" | "gender" | "complain" | "triage_dt" | "bp" | "temp" | "hr" | "rr" | "spo2" | "rbs" | "height" | "weight" | "allergies" | "bedassignment" | "override" | "critical" | "criticalmsg" | "category" | "dept_counter" | "toremarks" | "last_update" | "mobileno", ExtArgs["result"]["tblQueueArchieveTemp"]>

  export type $tblQueueArchieveTempPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblQueueArchieveTemp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblQueueID: Prisma.Decimal
      deptcode: string | null
      qnumber: Prisma.Decimal | null
      issued_dt: Date | null
      start_dt: Date | null
      finish_dt: Date | null
      status: Prisma.Decimal | null
      waiting: Prisma.Decimal | null
      barcode: string | null
      deptname: string | null
      name: string | null
      userid: string | null
      locationname: string | null
      nationality: string | null
      id: string | null
      patient_age: Prisma.Decimal | null
      gender: string | null
      complain: string | null
      triage_dt: Date | null
      bp: string | null
      temp: string | null
      hr: string | null
      rr: string | null
      spo2: string | null
      rbs: string | null
      height: string | null
      weight: string | null
      allergies: string | null
      bedassignment: string | null
      override: number | null
      critical: number | null
      criticalmsg: string | null
      category: Prisma.Decimal | null
      dept_counter: Prisma.Decimal | null
      toremarks: string | null
      last_update: Date | null
      mobileno: string | null
    }, ExtArgs["result"]["tblQueueArchieveTemp"]>
    composites: {}
  }

  type tblQueueArchieveTempGetPayload<S extends boolean | null | undefined | tblQueueArchieveTempDefaultArgs> = $Result.GetResult<Prisma.$tblQueueArchieveTempPayload, S>

  type tblQueueArchieveTempCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblQueueArchieveTempFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblQueueArchieveTempCountAggregateInputType | true
    }

  export interface tblQueueArchieveTempDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblQueueArchieveTemp'], meta: { name: 'tblQueueArchieveTemp' } }
    /**
     * Find zero or one TblQueueArchieveTemp that matches the filter.
     * @param {tblQueueArchieveTempFindUniqueArgs} args - Arguments to find a TblQueueArchieveTemp
     * @example
     * // Get one TblQueueArchieveTemp
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblQueueArchieveTempFindUniqueArgs>(args: SelectSubset<T, tblQueueArchieveTempFindUniqueArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblQueueArchieveTemp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblQueueArchieveTempFindUniqueOrThrowArgs} args - Arguments to find a TblQueueArchieveTemp
     * @example
     * // Get one TblQueueArchieveTemp
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblQueueArchieveTempFindUniqueOrThrowArgs>(args: SelectSubset<T, tblQueueArchieveTempFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueArchieveTemp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveTempFindFirstArgs} args - Arguments to find a TblQueueArchieveTemp
     * @example
     * // Get one TblQueueArchieveTemp
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblQueueArchieveTempFindFirstArgs>(args?: SelectSubset<T, tblQueueArchieveTempFindFirstArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueArchieveTemp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveTempFindFirstOrThrowArgs} args - Arguments to find a TblQueueArchieveTemp
     * @example
     * // Get one TblQueueArchieveTemp
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblQueueArchieveTempFindFirstOrThrowArgs>(args?: SelectSubset<T, tblQueueArchieveTempFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblQueueArchieveTemps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveTempFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblQueueArchieveTemps
     * const tblQueueArchieveTemps = await prisma.tblQueueArchieveTemp.findMany()
     * 
     * // Get first 10 TblQueueArchieveTemps
     * const tblQueueArchieveTemps = await prisma.tblQueueArchieveTemp.findMany({ take: 10 })
     * 
     * // Only select the `tblQueueID`
     * const tblQueueArchieveTempWithTblQueueIDOnly = await prisma.tblQueueArchieveTemp.findMany({ select: { tblQueueID: true } })
     * 
     */
    findMany<T extends tblQueueArchieveTempFindManyArgs>(args?: SelectSubset<T, tblQueueArchieveTempFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblQueueArchieveTemp.
     * @param {tblQueueArchieveTempCreateArgs} args - Arguments to create a TblQueueArchieveTemp.
     * @example
     * // Create one TblQueueArchieveTemp
     * const TblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.create({
     *   data: {
     *     // ... data to create a TblQueueArchieveTemp
     *   }
     * })
     * 
     */
    create<T extends tblQueueArchieveTempCreateArgs>(args: SelectSubset<T, tblQueueArchieveTempCreateArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblQueueArchieveTemps.
     * @param {tblQueueArchieveTempCreateManyArgs} args - Arguments to create many TblQueueArchieveTemps.
     * @example
     * // Create many TblQueueArchieveTemps
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblQueueArchieveTempCreateManyArgs>(args?: SelectSubset<T, tblQueueArchieveTempCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblQueueArchieveTemp.
     * @param {tblQueueArchieveTempDeleteArgs} args - Arguments to delete one TblQueueArchieveTemp.
     * @example
     * // Delete one TblQueueArchieveTemp
     * const TblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.delete({
     *   where: {
     *     // ... filter to delete one TblQueueArchieveTemp
     *   }
     * })
     * 
     */
    delete<T extends tblQueueArchieveTempDeleteArgs>(args: SelectSubset<T, tblQueueArchieveTempDeleteArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblQueueArchieveTemp.
     * @param {tblQueueArchieveTempUpdateArgs} args - Arguments to update one TblQueueArchieveTemp.
     * @example
     * // Update one TblQueueArchieveTemp
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblQueueArchieveTempUpdateArgs>(args: SelectSubset<T, tblQueueArchieveTempUpdateArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblQueueArchieveTemps.
     * @param {tblQueueArchieveTempDeleteManyArgs} args - Arguments to filter TblQueueArchieveTemps to delete.
     * @example
     * // Delete a few TblQueueArchieveTemps
     * const { count } = await prisma.tblQueueArchieveTemp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblQueueArchieveTempDeleteManyArgs>(args?: SelectSubset<T, tblQueueArchieveTempDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblQueueArchieveTemps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveTempUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblQueueArchieveTemps
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblQueueArchieveTempUpdateManyArgs>(args: SelectSubset<T, tblQueueArchieveTempUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblQueueArchieveTemp.
     * @param {tblQueueArchieveTempUpsertArgs} args - Arguments to update or create a TblQueueArchieveTemp.
     * @example
     * // Update or create a TblQueueArchieveTemp
     * const tblQueueArchieveTemp = await prisma.tblQueueArchieveTemp.upsert({
     *   create: {
     *     // ... data to create a TblQueueArchieveTemp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblQueueArchieveTemp we want to update
     *   }
     * })
     */
    upsert<T extends tblQueueArchieveTempUpsertArgs>(args: SelectSubset<T, tblQueueArchieveTempUpsertArgs<ExtArgs>>): Prisma__tblQueueArchieveTempClient<$Result.GetResult<Prisma.$tblQueueArchieveTempPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblQueueArchieveTemps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveTempCountArgs} args - Arguments to filter TblQueueArchieveTemps to count.
     * @example
     * // Count the number of TblQueueArchieveTemps
     * const count = await prisma.tblQueueArchieveTemp.count({
     *   where: {
     *     // ... the filter for the TblQueueArchieveTemps we want to count
     *   }
     * })
    **/
    count<T extends tblQueueArchieveTempCountArgs>(
      args?: Subset<T, tblQueueArchieveTempCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblQueueArchieveTempCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblQueueArchieveTemp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblQueueArchieveTempAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblQueueArchieveTempAggregateArgs>(args: Subset<T, TblQueueArchieveTempAggregateArgs>): Prisma.PrismaPromise<GetTblQueueArchieveTempAggregateType<T>>

    /**
     * Group by TblQueueArchieveTemp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueArchieveTempGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblQueueArchieveTempGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblQueueArchieveTempGroupByArgs['orderBy'] }
        : { orderBy?: tblQueueArchieveTempGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblQueueArchieveTempGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblQueueArchieveTempGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblQueueArchieveTemp model
   */
  readonly fields: tblQueueArchieveTempFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblQueueArchieveTemp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblQueueArchieveTempClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblQueueArchieveTemp model
   */
  interface tblQueueArchieveTempFieldRefs {
    readonly tblQueueID: FieldRef<"tblQueueArchieveTemp", 'Decimal'>
    readonly deptcode: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly qnumber: FieldRef<"tblQueueArchieveTemp", 'Decimal'>
    readonly issued_dt: FieldRef<"tblQueueArchieveTemp", 'DateTime'>
    readonly start_dt: FieldRef<"tblQueueArchieveTemp", 'DateTime'>
    readonly finish_dt: FieldRef<"tblQueueArchieveTemp", 'DateTime'>
    readonly status: FieldRef<"tblQueueArchieveTemp", 'Decimal'>
    readonly waiting: FieldRef<"tblQueueArchieveTemp", 'Decimal'>
    readonly barcode: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly deptname: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly name: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly userid: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly locationname: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly nationality: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly id: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly patient_age: FieldRef<"tblQueueArchieveTemp", 'Decimal'>
    readonly gender: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly complain: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly triage_dt: FieldRef<"tblQueueArchieveTemp", 'DateTime'>
    readonly bp: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly temp: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly hr: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly rr: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly spo2: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly rbs: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly height: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly weight: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly allergies: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly bedassignment: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly override: FieldRef<"tblQueueArchieveTemp", 'Int'>
    readonly critical: FieldRef<"tblQueueArchieveTemp", 'Int'>
    readonly criticalmsg: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly category: FieldRef<"tblQueueArchieveTemp", 'Decimal'>
    readonly dept_counter: FieldRef<"tblQueueArchieveTemp", 'Decimal'>
    readonly toremarks: FieldRef<"tblQueueArchieveTemp", 'String'>
    readonly last_update: FieldRef<"tblQueueArchieveTemp", 'DateTime'>
    readonly mobileno: FieldRef<"tblQueueArchieveTemp", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblQueueArchieveTemp findUnique
   */
  export type tblQueueArchieveTempFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieveTemp to fetch.
     */
    where: tblQueueArchieveTempWhereUniqueInput
  }

  /**
   * tblQueueArchieveTemp findUniqueOrThrow
   */
  export type tblQueueArchieveTempFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieveTemp to fetch.
     */
    where: tblQueueArchieveTempWhereUniqueInput
  }

  /**
   * tblQueueArchieveTemp findFirst
   */
  export type tblQueueArchieveTempFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieveTemp to fetch.
     */
    where?: tblQueueArchieveTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieveTemps to fetch.
     */
    orderBy?: tblQueueArchieveTempOrderByWithRelationInput | tblQueueArchieveTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueArchieveTemps.
     */
    cursor?: tblQueueArchieveTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieveTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieveTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueArchieveTemps.
     */
    distinct?: TblQueueArchieveTempScalarFieldEnum | TblQueueArchieveTempScalarFieldEnum[]
  }

  /**
   * tblQueueArchieveTemp findFirstOrThrow
   */
  export type tblQueueArchieveTempFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieveTemp to fetch.
     */
    where?: tblQueueArchieveTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieveTemps to fetch.
     */
    orderBy?: tblQueueArchieveTempOrderByWithRelationInput | tblQueueArchieveTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueArchieveTemps.
     */
    cursor?: tblQueueArchieveTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieveTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieveTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueArchieveTemps.
     */
    distinct?: TblQueueArchieveTempScalarFieldEnum | TblQueueArchieveTempScalarFieldEnum[]
  }

  /**
   * tblQueueArchieveTemp findMany
   */
  export type tblQueueArchieveTempFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueArchieveTemps to fetch.
     */
    where?: tblQueueArchieveTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueArchieveTemps to fetch.
     */
    orderBy?: tblQueueArchieveTempOrderByWithRelationInput | tblQueueArchieveTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblQueueArchieveTemps.
     */
    cursor?: tblQueueArchieveTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueArchieveTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueArchieveTemps.
     */
    skip?: number
    distinct?: TblQueueArchieveTempScalarFieldEnum | TblQueueArchieveTempScalarFieldEnum[]
  }

  /**
   * tblQueueArchieveTemp create
   */
  export type tblQueueArchieveTempCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * The data needed to create a tblQueueArchieveTemp.
     */
    data: XOR<tblQueueArchieveTempCreateInput, tblQueueArchieveTempUncheckedCreateInput>
  }

  /**
   * tblQueueArchieveTemp createMany
   */
  export type tblQueueArchieveTempCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblQueueArchieveTemps.
     */
    data: tblQueueArchieveTempCreateManyInput | tblQueueArchieveTempCreateManyInput[]
  }

  /**
   * tblQueueArchieveTemp update
   */
  export type tblQueueArchieveTempUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * The data needed to update a tblQueueArchieveTemp.
     */
    data: XOR<tblQueueArchieveTempUpdateInput, tblQueueArchieveTempUncheckedUpdateInput>
    /**
     * Choose, which tblQueueArchieveTemp to update.
     */
    where: tblQueueArchieveTempWhereUniqueInput
  }

  /**
   * tblQueueArchieveTemp updateMany
   */
  export type tblQueueArchieveTempUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblQueueArchieveTemps.
     */
    data: XOR<tblQueueArchieveTempUpdateManyMutationInput, tblQueueArchieveTempUncheckedUpdateManyInput>
    /**
     * Filter which tblQueueArchieveTemps to update
     */
    where?: tblQueueArchieveTempWhereInput
    /**
     * Limit how many tblQueueArchieveTemps to update.
     */
    limit?: number
  }

  /**
   * tblQueueArchieveTemp upsert
   */
  export type tblQueueArchieveTempUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * The filter to search for the tblQueueArchieveTemp to update in case it exists.
     */
    where: tblQueueArchieveTempWhereUniqueInput
    /**
     * In case the tblQueueArchieveTemp found by the `where` argument doesn't exist, create a new tblQueueArchieveTemp with this data.
     */
    create: XOR<tblQueueArchieveTempCreateInput, tblQueueArchieveTempUncheckedCreateInput>
    /**
     * In case the tblQueueArchieveTemp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblQueueArchieveTempUpdateInput, tblQueueArchieveTempUncheckedUpdateInput>
  }

  /**
   * tblQueueArchieveTemp delete
   */
  export type tblQueueArchieveTempDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
    /**
     * Filter which tblQueueArchieveTemp to delete.
     */
    where: tblQueueArchieveTempWhereUniqueInput
  }

  /**
   * tblQueueArchieveTemp deleteMany
   */
  export type tblQueueArchieveTempDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueArchieveTemps to delete
     */
    where?: tblQueueArchieveTempWhereInput
    /**
     * Limit how many tblQueueArchieveTemps to delete.
     */
    limit?: number
  }

  /**
   * tblQueueArchieveTemp without action
   */
  export type tblQueueArchieveTempDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueArchieveTemp
     */
    select?: tblQueueArchieveTempSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueArchieveTemp
     */
    omit?: tblQueueArchieveTempOmit<ExtArgs> | null
  }


  /**
   * Model tblQueuePulmo
   */

  export type AggregateTblQueuePulmo = {
    _count: TblQueuePulmoCountAggregateOutputType | null
    _avg: TblQueuePulmoAvgAggregateOutputType | null
    _sum: TblQueuePulmoSumAggregateOutputType | null
    _min: TblQueuePulmoMinAggregateOutputType | null
    _max: TblQueuePulmoMaxAggregateOutputType | null
  }

  export type TblQueuePulmoAvgAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
    returnvisit72Hrs: number | null
    admitted: number | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    transferred: number | null
    transferid: Decimal | null
  }

  export type TblQueuePulmoSumAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    patient_age: Decimal | null
    override: number | null
    critical: number | null
    category: Decimal | null
    dept_counter: Decimal | null
    returnvisit72Hrs: number | null
    admitted: number | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    transferred: number | null
    transferid: Decimal | null
  }

  export type TblQueuePulmoMinAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
  }

  export type TblQueuePulmoMaxAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
  }

  export type TblQueuePulmoCountAggregateOutputType = {
    tblQueueID: number
    deptcode: number
    qnumber: number
    issued_dt: number
    start_dt: number
    finish_dt: number
    status: number
    waiting: number
    barcode: number
    deptname: number
    name: number
    userid: number
    locationname: number
    nationality: number
    id: number
    patient_age: number
    gender: number
    complain: number
    triage_dt: number
    bp: number
    temp: number
    hr: number
    rr: number
    spo2: number
    rbs: number
    height: number
    weight: number
    allergies: number
    bedassignment: number
    override: number
    critical: number
    criticalmsg: number
    category: number
    dept_counter: number
    toremarks: number
    last_update: number
    mobileno: number
    returnvisit72Hrs: number
    admitted: number
    admittedIn: number
    consulted: number
    consultspecialtyid: number
    consultassign: number
    consultarrive: number
    consultdesicion: number
    transferred: number
    transferid: number
    _all: number
  }


  export type TblQueuePulmoAvgAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
    returnvisit72Hrs?: true
    admitted?: true
    consulted?: true
    consultspecialtyid?: true
    transferred?: true
    transferid?: true
  }

  export type TblQueuePulmoSumAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    patient_age?: true
    override?: true
    critical?: true
    category?: true
    dept_counter?: true
    returnvisit72Hrs?: true
    admitted?: true
    consulted?: true
    consultspecialtyid?: true
    transferred?: true
    transferid?: true
  }

  export type TblQueuePulmoMinAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
  }

  export type TblQueuePulmoMaxAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
  }

  export type TblQueuePulmoCountAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    nationality?: true
    id?: true
    patient_age?: true
    gender?: true
    complain?: true
    triage_dt?: true
    bp?: true
    temp?: true
    hr?: true
    rr?: true
    spo2?: true
    rbs?: true
    height?: true
    weight?: true
    allergies?: true
    bedassignment?: true
    override?: true
    critical?: true
    criticalmsg?: true
    category?: true
    dept_counter?: true
    toremarks?: true
    last_update?: true
    mobileno?: true
    returnvisit72Hrs?: true
    admitted?: true
    admittedIn?: true
    consulted?: true
    consultspecialtyid?: true
    consultassign?: true
    consultarrive?: true
    consultdesicion?: true
    transferred?: true
    transferid?: true
    _all?: true
  }

  export type TblQueuePulmoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueuePulmo to aggregate.
     */
    where?: tblQueuePulmoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueuePulmos to fetch.
     */
    orderBy?: tblQueuePulmoOrderByWithRelationInput | tblQueuePulmoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblQueuePulmoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueuePulmos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueuePulmos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblQueuePulmos
    **/
    _count?: true | TblQueuePulmoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblQueuePulmoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblQueuePulmoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblQueuePulmoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblQueuePulmoMaxAggregateInputType
  }

  export type GetTblQueuePulmoAggregateType<T extends TblQueuePulmoAggregateArgs> = {
        [P in keyof T & keyof AggregateTblQueuePulmo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblQueuePulmo[P]>
      : GetScalarType<T[P], AggregateTblQueuePulmo[P]>
  }




  export type tblQueuePulmoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblQueuePulmoWhereInput
    orderBy?: tblQueuePulmoOrderByWithAggregationInput | tblQueuePulmoOrderByWithAggregationInput[]
    by: TblQueuePulmoScalarFieldEnum[] | TblQueuePulmoScalarFieldEnum
    having?: tblQueuePulmoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblQueuePulmoCountAggregateInputType | true
    _avg?: TblQueuePulmoAvgAggregateInputType
    _sum?: TblQueuePulmoSumAggregateInputType
    _min?: TblQueuePulmoMinAggregateInputType
    _max?: TblQueuePulmoMaxAggregateInputType
  }

  export type TblQueuePulmoGroupByOutputType = {
    tblQueueID: Decimal
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    nationality: string | null
    id: string | null
    patient_age: Decimal | null
    gender: string | null
    complain: string | null
    triage_dt: Date | null
    bp: string | null
    temp: string | null
    hr: string | null
    rr: string | null
    spo2: string | null
    rbs: string | null
    height: string | null
    weight: string | null
    allergies: string | null
    bedassignment: string | null
    override: number | null
    critical: number | null
    criticalmsg: string | null
    category: Decimal | null
    dept_counter: Decimal | null
    toremarks: string | null
    last_update: Date | null
    mobileno: string | null
    returnvisit72Hrs: number | null
    admitted: number | null
    admittedIn: string | null
    consulted: number | null
    consultspecialtyid: Decimal | null
    consultassign: Date | null
    consultarrive: Date | null
    consultdesicion: Date | null
    transferred: number | null
    transferid: Decimal | null
    _count: TblQueuePulmoCountAggregateOutputType | null
    _avg: TblQueuePulmoAvgAggregateOutputType | null
    _sum: TblQueuePulmoSumAggregateOutputType | null
    _min: TblQueuePulmoMinAggregateOutputType | null
    _max: TblQueuePulmoMaxAggregateOutputType | null
  }

  type GetTblQueuePulmoGroupByPayload<T extends tblQueuePulmoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblQueuePulmoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblQueuePulmoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblQueuePulmoGroupByOutputType[P]>
            : GetScalarType<T[P], TblQueuePulmoGroupByOutputType[P]>
        }
      >
    >


  export type tblQueuePulmoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
    returnvisit72Hrs?: boolean
    admitted?: boolean
    admittedIn?: boolean
    consulted?: boolean
    consultspecialtyid?: boolean
    consultassign?: boolean
    consultarrive?: boolean
    consultdesicion?: boolean
    transferred?: boolean
    transferid?: boolean
  }, ExtArgs["result"]["tblQueuePulmo"]>



  export type tblQueuePulmoSelectScalar = {
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    nationality?: boolean
    id?: boolean
    patient_age?: boolean
    gender?: boolean
    complain?: boolean
    triage_dt?: boolean
    bp?: boolean
    temp?: boolean
    hr?: boolean
    rr?: boolean
    spo2?: boolean
    rbs?: boolean
    height?: boolean
    weight?: boolean
    allergies?: boolean
    bedassignment?: boolean
    override?: boolean
    critical?: boolean
    criticalmsg?: boolean
    category?: boolean
    dept_counter?: boolean
    toremarks?: boolean
    last_update?: boolean
    mobileno?: boolean
    returnvisit72Hrs?: boolean
    admitted?: boolean
    admittedIn?: boolean
    consulted?: boolean
    consultspecialtyid?: boolean
    consultassign?: boolean
    consultarrive?: boolean
    consultdesicion?: boolean
    transferred?: boolean
    transferid?: boolean
  }

  export type tblQueuePulmoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblQueueID" | "deptcode" | "qnumber" | "issued_dt" | "start_dt" | "finish_dt" | "status" | "waiting" | "barcode" | "deptname" | "name" | "userid" | "locationname" | "nationality" | "id" | "patient_age" | "gender" | "complain" | "triage_dt" | "bp" | "temp" | "hr" | "rr" | "spo2" | "rbs" | "height" | "weight" | "allergies" | "bedassignment" | "override" | "critical" | "criticalmsg" | "category" | "dept_counter" | "toremarks" | "last_update" | "mobileno" | "returnvisit72Hrs" | "admitted" | "admittedIn" | "consulted" | "consultspecialtyid" | "consultassign" | "consultarrive" | "consultdesicion" | "transferred" | "transferid", ExtArgs["result"]["tblQueuePulmo"]>

  export type $tblQueuePulmoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblQueuePulmo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblQueueID: Prisma.Decimal
      deptcode: string | null
      qnumber: Prisma.Decimal | null
      issued_dt: Date | null
      start_dt: Date | null
      finish_dt: Date | null
      status: Prisma.Decimal | null
      waiting: Prisma.Decimal | null
      barcode: string | null
      deptname: string | null
      name: string | null
      userid: string | null
      locationname: string | null
      nationality: string | null
      id: string | null
      patient_age: Prisma.Decimal | null
      gender: string | null
      complain: string | null
      triage_dt: Date | null
      bp: string | null
      temp: string | null
      hr: string | null
      rr: string | null
      spo2: string | null
      rbs: string | null
      height: string | null
      weight: string | null
      allergies: string | null
      bedassignment: string | null
      override: number | null
      critical: number | null
      criticalmsg: string | null
      category: Prisma.Decimal | null
      dept_counter: Prisma.Decimal | null
      toremarks: string | null
      last_update: Date | null
      mobileno: string | null
      returnvisit72Hrs: number | null
      admitted: number | null
      admittedIn: string | null
      consulted: number | null
      consultspecialtyid: Prisma.Decimal | null
      consultassign: Date | null
      consultarrive: Date | null
      consultdesicion: Date | null
      transferred: number | null
      transferid: Prisma.Decimal | null
    }, ExtArgs["result"]["tblQueuePulmo"]>
    composites: {}
  }

  type tblQueuePulmoGetPayload<S extends boolean | null | undefined | tblQueuePulmoDefaultArgs> = $Result.GetResult<Prisma.$tblQueuePulmoPayload, S>

  type tblQueuePulmoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblQueuePulmoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblQueuePulmoCountAggregateInputType | true
    }

  export interface tblQueuePulmoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblQueuePulmo'], meta: { name: 'tblQueuePulmo' } }
    /**
     * Find zero or one TblQueuePulmo that matches the filter.
     * @param {tblQueuePulmoFindUniqueArgs} args - Arguments to find a TblQueuePulmo
     * @example
     * // Get one TblQueuePulmo
     * const tblQueuePulmo = await prisma.tblQueuePulmo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblQueuePulmoFindUniqueArgs>(args: SelectSubset<T, tblQueuePulmoFindUniqueArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblQueuePulmo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblQueuePulmoFindUniqueOrThrowArgs} args - Arguments to find a TblQueuePulmo
     * @example
     * // Get one TblQueuePulmo
     * const tblQueuePulmo = await prisma.tblQueuePulmo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblQueuePulmoFindUniqueOrThrowArgs>(args: SelectSubset<T, tblQueuePulmoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueuePulmo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueuePulmoFindFirstArgs} args - Arguments to find a TblQueuePulmo
     * @example
     * // Get one TblQueuePulmo
     * const tblQueuePulmo = await prisma.tblQueuePulmo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblQueuePulmoFindFirstArgs>(args?: SelectSubset<T, tblQueuePulmoFindFirstArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueuePulmo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueuePulmoFindFirstOrThrowArgs} args - Arguments to find a TblQueuePulmo
     * @example
     * // Get one TblQueuePulmo
     * const tblQueuePulmo = await prisma.tblQueuePulmo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblQueuePulmoFindFirstOrThrowArgs>(args?: SelectSubset<T, tblQueuePulmoFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblQueuePulmos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueuePulmoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblQueuePulmos
     * const tblQueuePulmos = await prisma.tblQueuePulmo.findMany()
     * 
     * // Get first 10 TblQueuePulmos
     * const tblQueuePulmos = await prisma.tblQueuePulmo.findMany({ take: 10 })
     * 
     * // Only select the `tblQueueID`
     * const tblQueuePulmoWithTblQueueIDOnly = await prisma.tblQueuePulmo.findMany({ select: { tblQueueID: true } })
     * 
     */
    findMany<T extends tblQueuePulmoFindManyArgs>(args?: SelectSubset<T, tblQueuePulmoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblQueuePulmo.
     * @param {tblQueuePulmoCreateArgs} args - Arguments to create a TblQueuePulmo.
     * @example
     * // Create one TblQueuePulmo
     * const TblQueuePulmo = await prisma.tblQueuePulmo.create({
     *   data: {
     *     // ... data to create a TblQueuePulmo
     *   }
     * })
     * 
     */
    create<T extends tblQueuePulmoCreateArgs>(args: SelectSubset<T, tblQueuePulmoCreateArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblQueuePulmos.
     * @param {tblQueuePulmoCreateManyArgs} args - Arguments to create many TblQueuePulmos.
     * @example
     * // Create many TblQueuePulmos
     * const tblQueuePulmo = await prisma.tblQueuePulmo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblQueuePulmoCreateManyArgs>(args?: SelectSubset<T, tblQueuePulmoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblQueuePulmo.
     * @param {tblQueuePulmoDeleteArgs} args - Arguments to delete one TblQueuePulmo.
     * @example
     * // Delete one TblQueuePulmo
     * const TblQueuePulmo = await prisma.tblQueuePulmo.delete({
     *   where: {
     *     // ... filter to delete one TblQueuePulmo
     *   }
     * })
     * 
     */
    delete<T extends tblQueuePulmoDeleteArgs>(args: SelectSubset<T, tblQueuePulmoDeleteArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblQueuePulmo.
     * @param {tblQueuePulmoUpdateArgs} args - Arguments to update one TblQueuePulmo.
     * @example
     * // Update one TblQueuePulmo
     * const tblQueuePulmo = await prisma.tblQueuePulmo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblQueuePulmoUpdateArgs>(args: SelectSubset<T, tblQueuePulmoUpdateArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblQueuePulmos.
     * @param {tblQueuePulmoDeleteManyArgs} args - Arguments to filter TblQueuePulmos to delete.
     * @example
     * // Delete a few TblQueuePulmos
     * const { count } = await prisma.tblQueuePulmo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblQueuePulmoDeleteManyArgs>(args?: SelectSubset<T, tblQueuePulmoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblQueuePulmos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueuePulmoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblQueuePulmos
     * const tblQueuePulmo = await prisma.tblQueuePulmo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblQueuePulmoUpdateManyArgs>(args: SelectSubset<T, tblQueuePulmoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblQueuePulmo.
     * @param {tblQueuePulmoUpsertArgs} args - Arguments to update or create a TblQueuePulmo.
     * @example
     * // Update or create a TblQueuePulmo
     * const tblQueuePulmo = await prisma.tblQueuePulmo.upsert({
     *   create: {
     *     // ... data to create a TblQueuePulmo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblQueuePulmo we want to update
     *   }
     * })
     */
    upsert<T extends tblQueuePulmoUpsertArgs>(args: SelectSubset<T, tblQueuePulmoUpsertArgs<ExtArgs>>): Prisma__tblQueuePulmoClient<$Result.GetResult<Prisma.$tblQueuePulmoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblQueuePulmos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueuePulmoCountArgs} args - Arguments to filter TblQueuePulmos to count.
     * @example
     * // Count the number of TblQueuePulmos
     * const count = await prisma.tblQueuePulmo.count({
     *   where: {
     *     // ... the filter for the TblQueuePulmos we want to count
     *   }
     * })
    **/
    count<T extends tblQueuePulmoCountArgs>(
      args?: Subset<T, tblQueuePulmoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblQueuePulmoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblQueuePulmo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblQueuePulmoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblQueuePulmoAggregateArgs>(args: Subset<T, TblQueuePulmoAggregateArgs>): Prisma.PrismaPromise<GetTblQueuePulmoAggregateType<T>>

    /**
     * Group by TblQueuePulmo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueuePulmoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblQueuePulmoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblQueuePulmoGroupByArgs['orderBy'] }
        : { orderBy?: tblQueuePulmoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblQueuePulmoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblQueuePulmoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblQueuePulmo model
   */
  readonly fields: tblQueuePulmoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblQueuePulmo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblQueuePulmoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblQueuePulmo model
   */
  interface tblQueuePulmoFieldRefs {
    readonly tblQueueID: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly deptcode: FieldRef<"tblQueuePulmo", 'String'>
    readonly qnumber: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly issued_dt: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly start_dt: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly finish_dt: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly status: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly waiting: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly barcode: FieldRef<"tblQueuePulmo", 'String'>
    readonly deptname: FieldRef<"tblQueuePulmo", 'String'>
    readonly name: FieldRef<"tblQueuePulmo", 'String'>
    readonly userid: FieldRef<"tblQueuePulmo", 'String'>
    readonly locationname: FieldRef<"tblQueuePulmo", 'String'>
    readonly nationality: FieldRef<"tblQueuePulmo", 'String'>
    readonly id: FieldRef<"tblQueuePulmo", 'String'>
    readonly patient_age: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly gender: FieldRef<"tblQueuePulmo", 'String'>
    readonly complain: FieldRef<"tblQueuePulmo", 'String'>
    readonly triage_dt: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly bp: FieldRef<"tblQueuePulmo", 'String'>
    readonly temp: FieldRef<"tblQueuePulmo", 'String'>
    readonly hr: FieldRef<"tblQueuePulmo", 'String'>
    readonly rr: FieldRef<"tblQueuePulmo", 'String'>
    readonly spo2: FieldRef<"tblQueuePulmo", 'String'>
    readonly rbs: FieldRef<"tblQueuePulmo", 'String'>
    readonly height: FieldRef<"tblQueuePulmo", 'String'>
    readonly weight: FieldRef<"tblQueuePulmo", 'String'>
    readonly allergies: FieldRef<"tblQueuePulmo", 'String'>
    readonly bedassignment: FieldRef<"tblQueuePulmo", 'String'>
    readonly override: FieldRef<"tblQueuePulmo", 'Int'>
    readonly critical: FieldRef<"tblQueuePulmo", 'Int'>
    readonly criticalmsg: FieldRef<"tblQueuePulmo", 'String'>
    readonly category: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly dept_counter: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly toremarks: FieldRef<"tblQueuePulmo", 'String'>
    readonly last_update: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly mobileno: FieldRef<"tblQueuePulmo", 'String'>
    readonly returnvisit72Hrs: FieldRef<"tblQueuePulmo", 'Int'>
    readonly admitted: FieldRef<"tblQueuePulmo", 'Int'>
    readonly admittedIn: FieldRef<"tblQueuePulmo", 'String'>
    readonly consulted: FieldRef<"tblQueuePulmo", 'Int'>
    readonly consultspecialtyid: FieldRef<"tblQueuePulmo", 'Decimal'>
    readonly consultassign: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly consultarrive: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly consultdesicion: FieldRef<"tblQueuePulmo", 'DateTime'>
    readonly transferred: FieldRef<"tblQueuePulmo", 'Int'>
    readonly transferid: FieldRef<"tblQueuePulmo", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tblQueuePulmo findUnique
   */
  export type tblQueuePulmoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * Filter, which tblQueuePulmo to fetch.
     */
    where: tblQueuePulmoWhereUniqueInput
  }

  /**
   * tblQueuePulmo findUniqueOrThrow
   */
  export type tblQueuePulmoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * Filter, which tblQueuePulmo to fetch.
     */
    where: tblQueuePulmoWhereUniqueInput
  }

  /**
   * tblQueuePulmo findFirst
   */
  export type tblQueuePulmoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * Filter, which tblQueuePulmo to fetch.
     */
    where?: tblQueuePulmoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueuePulmos to fetch.
     */
    orderBy?: tblQueuePulmoOrderByWithRelationInput | tblQueuePulmoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueuePulmos.
     */
    cursor?: tblQueuePulmoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueuePulmos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueuePulmos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueuePulmos.
     */
    distinct?: TblQueuePulmoScalarFieldEnum | TblQueuePulmoScalarFieldEnum[]
  }

  /**
   * tblQueuePulmo findFirstOrThrow
   */
  export type tblQueuePulmoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * Filter, which tblQueuePulmo to fetch.
     */
    where?: tblQueuePulmoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueuePulmos to fetch.
     */
    orderBy?: tblQueuePulmoOrderByWithRelationInput | tblQueuePulmoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueuePulmos.
     */
    cursor?: tblQueuePulmoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueuePulmos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueuePulmos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueuePulmos.
     */
    distinct?: TblQueuePulmoScalarFieldEnum | TblQueuePulmoScalarFieldEnum[]
  }

  /**
   * tblQueuePulmo findMany
   */
  export type tblQueuePulmoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * Filter, which tblQueuePulmos to fetch.
     */
    where?: tblQueuePulmoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueuePulmos to fetch.
     */
    orderBy?: tblQueuePulmoOrderByWithRelationInput | tblQueuePulmoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblQueuePulmos.
     */
    cursor?: tblQueuePulmoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueuePulmos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueuePulmos.
     */
    skip?: number
    distinct?: TblQueuePulmoScalarFieldEnum | TblQueuePulmoScalarFieldEnum[]
  }

  /**
   * tblQueuePulmo create
   */
  export type tblQueuePulmoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * The data needed to create a tblQueuePulmo.
     */
    data: XOR<tblQueuePulmoCreateInput, tblQueuePulmoUncheckedCreateInput>
  }

  /**
   * tblQueuePulmo createMany
   */
  export type tblQueuePulmoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblQueuePulmos.
     */
    data: tblQueuePulmoCreateManyInput | tblQueuePulmoCreateManyInput[]
  }

  /**
   * tblQueuePulmo update
   */
  export type tblQueuePulmoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * The data needed to update a tblQueuePulmo.
     */
    data: XOR<tblQueuePulmoUpdateInput, tblQueuePulmoUncheckedUpdateInput>
    /**
     * Choose, which tblQueuePulmo to update.
     */
    where: tblQueuePulmoWhereUniqueInput
  }

  /**
   * tblQueuePulmo updateMany
   */
  export type tblQueuePulmoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblQueuePulmos.
     */
    data: XOR<tblQueuePulmoUpdateManyMutationInput, tblQueuePulmoUncheckedUpdateManyInput>
    /**
     * Filter which tblQueuePulmos to update
     */
    where?: tblQueuePulmoWhereInput
    /**
     * Limit how many tblQueuePulmos to update.
     */
    limit?: number
  }

  /**
   * tblQueuePulmo upsert
   */
  export type tblQueuePulmoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * The filter to search for the tblQueuePulmo to update in case it exists.
     */
    where: tblQueuePulmoWhereUniqueInput
    /**
     * In case the tblQueuePulmo found by the `where` argument doesn't exist, create a new tblQueuePulmo with this data.
     */
    create: XOR<tblQueuePulmoCreateInput, tblQueuePulmoUncheckedCreateInput>
    /**
     * In case the tblQueuePulmo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblQueuePulmoUpdateInput, tblQueuePulmoUncheckedUpdateInput>
  }

  /**
   * tblQueuePulmo delete
   */
  export type tblQueuePulmoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
    /**
     * Filter which tblQueuePulmo to delete.
     */
    where: tblQueuePulmoWhereUniqueInput
  }

  /**
   * tblQueuePulmo deleteMany
   */
  export type tblQueuePulmoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueuePulmos to delete
     */
    where?: tblQueuePulmoWhereInput
    /**
     * Limit how many tblQueuePulmos to delete.
     */
    limit?: number
  }

  /**
   * tblQueuePulmo without action
   */
  export type tblQueuePulmoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueuePulmo
     */
    select?: tblQueuePulmoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueuePulmo
     */
    omit?: tblQueuePulmoOmit<ExtArgs> | null
  }


  /**
   * Model tblQueueSession
   */

  export type AggregateTblQueueSession = {
    _count: TblQueueSessionCountAggregateOutputType | null
    _avg: TblQueueSessionAvgAggregateOutputType | null
    _sum: TblQueueSessionSumAggregateOutputType | null
    _min: TblQueueSessionMinAggregateOutputType | null
    _max: TblQueueSessionMaxAggregateOutputType | null
  }

  export type TblQueueSessionAvgAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
  }

  export type TblQueueSessionSumAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
  }

  export type TblQueueSessionMinAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
  }

  export type TblQueueSessionMaxAggregateOutputType = {
    tblLocationSessionID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
  }

  export type TblQueueSessionCountAggregateOutputType = {
    tblLocationSessionID: number
    deptcode: number
    qnumber: number
    tblQueueID: number
    _all: number
  }


  export type TblQueueSessionAvgAggregateInputType = {
    tblLocationSessionID?: true
    qnumber?: true
    tblQueueID?: true
  }

  export type TblQueueSessionSumAggregateInputType = {
    tblLocationSessionID?: true
    qnumber?: true
    tblQueueID?: true
  }

  export type TblQueueSessionMinAggregateInputType = {
    tblLocationSessionID?: true
    deptcode?: true
    qnumber?: true
    tblQueueID?: true
  }

  export type TblQueueSessionMaxAggregateInputType = {
    tblLocationSessionID?: true
    deptcode?: true
    qnumber?: true
    tblQueueID?: true
  }

  export type TblQueueSessionCountAggregateInputType = {
    tblLocationSessionID?: true
    deptcode?: true
    qnumber?: true
    tblQueueID?: true
    _all?: true
  }

  export type TblQueueSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueSession to aggregate.
     */
    where?: tblQueueSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueSessions to fetch.
     */
    orderBy?: tblQueueSessionOrderByWithRelationInput | tblQueueSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblQueueSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblQueueSessions
    **/
    _count?: true | TblQueueSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblQueueSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblQueueSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblQueueSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblQueueSessionMaxAggregateInputType
  }

  export type GetTblQueueSessionAggregateType<T extends TblQueueSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateTblQueueSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblQueueSession[P]>
      : GetScalarType<T[P], AggregateTblQueueSession[P]>
  }




  export type tblQueueSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblQueueSessionWhereInput
    orderBy?: tblQueueSessionOrderByWithAggregationInput | tblQueueSessionOrderByWithAggregationInput[]
    by: TblQueueSessionScalarFieldEnum[] | TblQueueSessionScalarFieldEnum
    having?: tblQueueSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblQueueSessionCountAggregateInputType | true
    _avg?: TblQueueSessionAvgAggregateInputType
    _sum?: TblQueueSessionSumAggregateInputType
    _min?: TblQueueSessionMinAggregateInputType
    _max?: TblQueueSessionMaxAggregateInputType
  }

  export type TblQueueSessionGroupByOutputType = {
    tblLocationSessionID: Decimal
    deptcode: string | null
    qnumber: Decimal | null
    tblQueueID: Decimal | null
    _count: TblQueueSessionCountAggregateOutputType | null
    _avg: TblQueueSessionAvgAggregateOutputType | null
    _sum: TblQueueSessionSumAggregateOutputType | null
    _min: TblQueueSessionMinAggregateOutputType | null
    _max: TblQueueSessionMaxAggregateOutputType | null
  }

  type GetTblQueueSessionGroupByPayload<T extends tblQueueSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblQueueSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblQueueSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblQueueSessionGroupByOutputType[P]>
            : GetScalarType<T[P], TblQueueSessionGroupByOutputType[P]>
        }
      >
    >


  export type tblQueueSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblLocationSessionID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    tblQueueID?: boolean
  }, ExtArgs["result"]["tblQueueSession"]>



  export type tblQueueSessionSelectScalar = {
    tblLocationSessionID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    tblQueueID?: boolean
  }

  export type tblQueueSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblLocationSessionID" | "deptcode" | "qnumber" | "tblQueueID", ExtArgs["result"]["tblQueueSession"]>

  export type $tblQueueSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblQueueSession"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblLocationSessionID: Prisma.Decimal
      deptcode: string | null
      qnumber: Prisma.Decimal | null
      tblQueueID: Prisma.Decimal | null
    }, ExtArgs["result"]["tblQueueSession"]>
    composites: {}
  }

  type tblQueueSessionGetPayload<S extends boolean | null | undefined | tblQueueSessionDefaultArgs> = $Result.GetResult<Prisma.$tblQueueSessionPayload, S>

  type tblQueueSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblQueueSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblQueueSessionCountAggregateInputType | true
    }

  export interface tblQueueSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblQueueSession'], meta: { name: 'tblQueueSession' } }
    /**
     * Find zero or one TblQueueSession that matches the filter.
     * @param {tblQueueSessionFindUniqueArgs} args - Arguments to find a TblQueueSession
     * @example
     * // Get one TblQueueSession
     * const tblQueueSession = await prisma.tblQueueSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblQueueSessionFindUniqueArgs>(args: SelectSubset<T, tblQueueSessionFindUniqueArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblQueueSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblQueueSessionFindUniqueOrThrowArgs} args - Arguments to find a TblQueueSession
     * @example
     * // Get one TblQueueSession
     * const tblQueueSession = await prisma.tblQueueSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblQueueSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, tblQueueSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueSessionFindFirstArgs} args - Arguments to find a TblQueueSession
     * @example
     * // Get one TblQueueSession
     * const tblQueueSession = await prisma.tblQueueSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblQueueSessionFindFirstArgs>(args?: SelectSubset<T, tblQueueSessionFindFirstArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueSessionFindFirstOrThrowArgs} args - Arguments to find a TblQueueSession
     * @example
     * // Get one TblQueueSession
     * const tblQueueSession = await prisma.tblQueueSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblQueueSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, tblQueueSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblQueueSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblQueueSessions
     * const tblQueueSessions = await prisma.tblQueueSession.findMany()
     * 
     * // Get first 10 TblQueueSessions
     * const tblQueueSessions = await prisma.tblQueueSession.findMany({ take: 10 })
     * 
     * // Only select the `tblLocationSessionID`
     * const tblQueueSessionWithTblLocationSessionIDOnly = await prisma.tblQueueSession.findMany({ select: { tblLocationSessionID: true } })
     * 
     */
    findMany<T extends tblQueueSessionFindManyArgs>(args?: SelectSubset<T, tblQueueSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblQueueSession.
     * @param {tblQueueSessionCreateArgs} args - Arguments to create a TblQueueSession.
     * @example
     * // Create one TblQueueSession
     * const TblQueueSession = await prisma.tblQueueSession.create({
     *   data: {
     *     // ... data to create a TblQueueSession
     *   }
     * })
     * 
     */
    create<T extends tblQueueSessionCreateArgs>(args: SelectSubset<T, tblQueueSessionCreateArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblQueueSessions.
     * @param {tblQueueSessionCreateManyArgs} args - Arguments to create many TblQueueSessions.
     * @example
     * // Create many TblQueueSessions
     * const tblQueueSession = await prisma.tblQueueSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblQueueSessionCreateManyArgs>(args?: SelectSubset<T, tblQueueSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblQueueSession.
     * @param {tblQueueSessionDeleteArgs} args - Arguments to delete one TblQueueSession.
     * @example
     * // Delete one TblQueueSession
     * const TblQueueSession = await prisma.tblQueueSession.delete({
     *   where: {
     *     // ... filter to delete one TblQueueSession
     *   }
     * })
     * 
     */
    delete<T extends tblQueueSessionDeleteArgs>(args: SelectSubset<T, tblQueueSessionDeleteArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblQueueSession.
     * @param {tblQueueSessionUpdateArgs} args - Arguments to update one TblQueueSession.
     * @example
     * // Update one TblQueueSession
     * const tblQueueSession = await prisma.tblQueueSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblQueueSessionUpdateArgs>(args: SelectSubset<T, tblQueueSessionUpdateArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblQueueSessions.
     * @param {tblQueueSessionDeleteManyArgs} args - Arguments to filter TblQueueSessions to delete.
     * @example
     * // Delete a few TblQueueSessions
     * const { count } = await prisma.tblQueueSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblQueueSessionDeleteManyArgs>(args?: SelectSubset<T, tblQueueSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblQueueSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblQueueSessions
     * const tblQueueSession = await prisma.tblQueueSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblQueueSessionUpdateManyArgs>(args: SelectSubset<T, tblQueueSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblQueueSession.
     * @param {tblQueueSessionUpsertArgs} args - Arguments to update or create a TblQueueSession.
     * @example
     * // Update or create a TblQueueSession
     * const tblQueueSession = await prisma.tblQueueSession.upsert({
     *   create: {
     *     // ... data to create a TblQueueSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblQueueSession we want to update
     *   }
     * })
     */
    upsert<T extends tblQueueSessionUpsertArgs>(args: SelectSubset<T, tblQueueSessionUpsertArgs<ExtArgs>>): Prisma__tblQueueSessionClient<$Result.GetResult<Prisma.$tblQueueSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblQueueSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueSessionCountArgs} args - Arguments to filter TblQueueSessions to count.
     * @example
     * // Count the number of TblQueueSessions
     * const count = await prisma.tblQueueSession.count({
     *   where: {
     *     // ... the filter for the TblQueueSessions we want to count
     *   }
     * })
    **/
    count<T extends tblQueueSessionCountArgs>(
      args?: Subset<T, tblQueueSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblQueueSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblQueueSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblQueueSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblQueueSessionAggregateArgs>(args: Subset<T, TblQueueSessionAggregateArgs>): Prisma.PrismaPromise<GetTblQueueSessionAggregateType<T>>

    /**
     * Group by TblQueueSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblQueueSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblQueueSessionGroupByArgs['orderBy'] }
        : { orderBy?: tblQueueSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblQueueSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblQueueSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblQueueSession model
   */
  readonly fields: tblQueueSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblQueueSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblQueueSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblQueueSession model
   */
  interface tblQueueSessionFieldRefs {
    readonly tblLocationSessionID: FieldRef<"tblQueueSession", 'Decimal'>
    readonly deptcode: FieldRef<"tblQueueSession", 'String'>
    readonly qnumber: FieldRef<"tblQueueSession", 'Decimal'>
    readonly tblQueueID: FieldRef<"tblQueueSession", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tblQueueSession findUnique
   */
  export type tblQueueSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueSession to fetch.
     */
    where: tblQueueSessionWhereUniqueInput
  }

  /**
   * tblQueueSession findUniqueOrThrow
   */
  export type tblQueueSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueSession to fetch.
     */
    where: tblQueueSessionWhereUniqueInput
  }

  /**
   * tblQueueSession findFirst
   */
  export type tblQueueSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueSession to fetch.
     */
    where?: tblQueueSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueSessions to fetch.
     */
    orderBy?: tblQueueSessionOrderByWithRelationInput | tblQueueSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueSessions.
     */
    cursor?: tblQueueSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueSessions.
     */
    distinct?: TblQueueSessionScalarFieldEnum | TblQueueSessionScalarFieldEnum[]
  }

  /**
   * tblQueueSession findFirstOrThrow
   */
  export type tblQueueSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueSession to fetch.
     */
    where?: tblQueueSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueSessions to fetch.
     */
    orderBy?: tblQueueSessionOrderByWithRelationInput | tblQueueSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueSessions.
     */
    cursor?: tblQueueSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueSessions.
     */
    distinct?: TblQueueSessionScalarFieldEnum | TblQueueSessionScalarFieldEnum[]
  }

  /**
   * tblQueueSession findMany
   */
  export type tblQueueSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueSessions to fetch.
     */
    where?: tblQueueSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueSessions to fetch.
     */
    orderBy?: tblQueueSessionOrderByWithRelationInput | tblQueueSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblQueueSessions.
     */
    cursor?: tblQueueSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueSessions.
     */
    skip?: number
    distinct?: TblQueueSessionScalarFieldEnum | TblQueueSessionScalarFieldEnum[]
  }

  /**
   * tblQueueSession create
   */
  export type tblQueueSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * The data needed to create a tblQueueSession.
     */
    data: XOR<tblQueueSessionCreateInput, tblQueueSessionUncheckedCreateInput>
  }

  /**
   * tblQueueSession createMany
   */
  export type tblQueueSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblQueueSessions.
     */
    data: tblQueueSessionCreateManyInput | tblQueueSessionCreateManyInput[]
  }

  /**
   * tblQueueSession update
   */
  export type tblQueueSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * The data needed to update a tblQueueSession.
     */
    data: XOR<tblQueueSessionUpdateInput, tblQueueSessionUncheckedUpdateInput>
    /**
     * Choose, which tblQueueSession to update.
     */
    where: tblQueueSessionWhereUniqueInput
  }

  /**
   * tblQueueSession updateMany
   */
  export type tblQueueSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblQueueSessions.
     */
    data: XOR<tblQueueSessionUpdateManyMutationInput, tblQueueSessionUncheckedUpdateManyInput>
    /**
     * Filter which tblQueueSessions to update
     */
    where?: tblQueueSessionWhereInput
    /**
     * Limit how many tblQueueSessions to update.
     */
    limit?: number
  }

  /**
   * tblQueueSession upsert
   */
  export type tblQueueSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * The filter to search for the tblQueueSession to update in case it exists.
     */
    where: tblQueueSessionWhereUniqueInput
    /**
     * In case the tblQueueSession found by the `where` argument doesn't exist, create a new tblQueueSession with this data.
     */
    create: XOR<tblQueueSessionCreateInput, tblQueueSessionUncheckedCreateInput>
    /**
     * In case the tblQueueSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblQueueSessionUpdateInput, tblQueueSessionUncheckedUpdateInput>
  }

  /**
   * tblQueueSession delete
   */
  export type tblQueueSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
    /**
     * Filter which tblQueueSession to delete.
     */
    where: tblQueueSessionWhereUniqueInput
  }

  /**
   * tblQueueSession deleteMany
   */
  export type tblQueueSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueSessions to delete
     */
    where?: tblQueueSessionWhereInput
    /**
     * Limit how many tblQueueSessions to delete.
     */
    limit?: number
  }

  /**
   * tblQueueSession without action
   */
  export type tblQueueSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueSession
     */
    select?: tblQueueSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueSession
     */
    omit?: tblQueueSessionOmit<ExtArgs> | null
  }


  /**
   * Model tblQueueTransferDept
   */

  export type AggregateTblQueueTransferDept = {
    _count: TblQueueTransferDeptCountAggregateOutputType | null
    _avg: TblQueueTransferDeptAvgAggregateOutputType | null
    _sum: TblQueueTransferDeptSumAggregateOutputType | null
    _min: TblQueueTransferDeptMinAggregateOutputType | null
    _max: TblQueueTransferDeptMaxAggregateOutputType | null
  }

  export type TblQueueTransferDeptAvgAggregateOutputType = {
    tblQueueTransferDeptID: Decimal | null
  }

  export type TblQueueTransferDeptSumAggregateOutputType = {
    tblQueueTransferDeptID: Decimal | null
  }

  export type TblQueueTransferDeptMinAggregateOutputType = {
    tblQueueTransferDeptID: Decimal | null
    barcode: string | null
    fromdeptcode: string | null
    todeptcode: string | null
    last_update: Date | null
    issued_dt: Date | null
  }

  export type TblQueueTransferDeptMaxAggregateOutputType = {
    tblQueueTransferDeptID: Decimal | null
    barcode: string | null
    fromdeptcode: string | null
    todeptcode: string | null
    last_update: Date | null
    issued_dt: Date | null
  }

  export type TblQueueTransferDeptCountAggregateOutputType = {
    tblQueueTransferDeptID: number
    barcode: number
    fromdeptcode: number
    todeptcode: number
    last_update: number
    issued_dt: number
    _all: number
  }


  export type TblQueueTransferDeptAvgAggregateInputType = {
    tblQueueTransferDeptID?: true
  }

  export type TblQueueTransferDeptSumAggregateInputType = {
    tblQueueTransferDeptID?: true
  }

  export type TblQueueTransferDeptMinAggregateInputType = {
    tblQueueTransferDeptID?: true
    barcode?: true
    fromdeptcode?: true
    todeptcode?: true
    last_update?: true
    issued_dt?: true
  }

  export type TblQueueTransferDeptMaxAggregateInputType = {
    tblQueueTransferDeptID?: true
    barcode?: true
    fromdeptcode?: true
    todeptcode?: true
    last_update?: true
    issued_dt?: true
  }

  export type TblQueueTransferDeptCountAggregateInputType = {
    tblQueueTransferDeptID?: true
    barcode?: true
    fromdeptcode?: true
    todeptcode?: true
    last_update?: true
    issued_dt?: true
    _all?: true
  }

  export type TblQueueTransferDeptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueTransferDept to aggregate.
     */
    where?: tblQueueTransferDeptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueTransferDepts to fetch.
     */
    orderBy?: tblQueueTransferDeptOrderByWithRelationInput | tblQueueTransferDeptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblQueueTransferDeptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueTransferDepts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueTransferDepts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblQueueTransferDepts
    **/
    _count?: true | TblQueueTransferDeptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblQueueTransferDeptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblQueueTransferDeptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblQueueTransferDeptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblQueueTransferDeptMaxAggregateInputType
  }

  export type GetTblQueueTransferDeptAggregateType<T extends TblQueueTransferDeptAggregateArgs> = {
        [P in keyof T & keyof AggregateTblQueueTransferDept]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblQueueTransferDept[P]>
      : GetScalarType<T[P], AggregateTblQueueTransferDept[P]>
  }




  export type tblQueueTransferDeptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblQueueTransferDeptWhereInput
    orderBy?: tblQueueTransferDeptOrderByWithAggregationInput | tblQueueTransferDeptOrderByWithAggregationInput[]
    by: TblQueueTransferDeptScalarFieldEnum[] | TblQueueTransferDeptScalarFieldEnum
    having?: tblQueueTransferDeptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblQueueTransferDeptCountAggregateInputType | true
    _avg?: TblQueueTransferDeptAvgAggregateInputType
    _sum?: TblQueueTransferDeptSumAggregateInputType
    _min?: TblQueueTransferDeptMinAggregateInputType
    _max?: TblQueueTransferDeptMaxAggregateInputType
  }

  export type TblQueueTransferDeptGroupByOutputType = {
    tblQueueTransferDeptID: Decimal
    barcode: string | null
    fromdeptcode: string | null
    todeptcode: string | null
    last_update: Date | null
    issued_dt: Date | null
    _count: TblQueueTransferDeptCountAggregateOutputType | null
    _avg: TblQueueTransferDeptAvgAggregateOutputType | null
    _sum: TblQueueTransferDeptSumAggregateOutputType | null
    _min: TblQueueTransferDeptMinAggregateOutputType | null
    _max: TblQueueTransferDeptMaxAggregateOutputType | null
  }

  type GetTblQueueTransferDeptGroupByPayload<T extends tblQueueTransferDeptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblQueueTransferDeptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblQueueTransferDeptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblQueueTransferDeptGroupByOutputType[P]>
            : GetScalarType<T[P], TblQueueTransferDeptGroupByOutputType[P]>
        }
      >
    >


  export type tblQueueTransferDeptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblQueueTransferDeptID?: boolean
    barcode?: boolean
    fromdeptcode?: boolean
    todeptcode?: boolean
    last_update?: boolean
    issued_dt?: boolean
  }, ExtArgs["result"]["tblQueueTransferDept"]>



  export type tblQueueTransferDeptSelectScalar = {
    tblQueueTransferDeptID?: boolean
    barcode?: boolean
    fromdeptcode?: boolean
    todeptcode?: boolean
    last_update?: boolean
    issued_dt?: boolean
  }

  export type tblQueueTransferDeptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblQueueTransferDeptID" | "barcode" | "fromdeptcode" | "todeptcode" | "last_update" | "issued_dt", ExtArgs["result"]["tblQueueTransferDept"]>

  export type $tblQueueTransferDeptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblQueueTransferDept"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblQueueTransferDeptID: Prisma.Decimal
      barcode: string | null
      fromdeptcode: string | null
      todeptcode: string | null
      last_update: Date | null
      issued_dt: Date | null
    }, ExtArgs["result"]["tblQueueTransferDept"]>
    composites: {}
  }

  type tblQueueTransferDeptGetPayload<S extends boolean | null | undefined | tblQueueTransferDeptDefaultArgs> = $Result.GetResult<Prisma.$tblQueueTransferDeptPayload, S>

  type tblQueueTransferDeptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblQueueTransferDeptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblQueueTransferDeptCountAggregateInputType | true
    }

  export interface tblQueueTransferDeptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblQueueTransferDept'], meta: { name: 'tblQueueTransferDept' } }
    /**
     * Find zero or one TblQueueTransferDept that matches the filter.
     * @param {tblQueueTransferDeptFindUniqueArgs} args - Arguments to find a TblQueueTransferDept
     * @example
     * // Get one TblQueueTransferDept
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblQueueTransferDeptFindUniqueArgs>(args: SelectSubset<T, tblQueueTransferDeptFindUniqueArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblQueueTransferDept that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblQueueTransferDeptFindUniqueOrThrowArgs} args - Arguments to find a TblQueueTransferDept
     * @example
     * // Get one TblQueueTransferDept
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblQueueTransferDeptFindUniqueOrThrowArgs>(args: SelectSubset<T, tblQueueTransferDeptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueTransferDept that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueTransferDeptFindFirstArgs} args - Arguments to find a TblQueueTransferDept
     * @example
     * // Get one TblQueueTransferDept
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblQueueTransferDeptFindFirstArgs>(args?: SelectSubset<T, tblQueueTransferDeptFindFirstArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueTransferDept that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueTransferDeptFindFirstOrThrowArgs} args - Arguments to find a TblQueueTransferDept
     * @example
     * // Get one TblQueueTransferDept
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblQueueTransferDeptFindFirstOrThrowArgs>(args?: SelectSubset<T, tblQueueTransferDeptFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblQueueTransferDepts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueTransferDeptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblQueueTransferDepts
     * const tblQueueTransferDepts = await prisma.tblQueueTransferDept.findMany()
     * 
     * // Get first 10 TblQueueTransferDepts
     * const tblQueueTransferDepts = await prisma.tblQueueTransferDept.findMany({ take: 10 })
     * 
     * // Only select the `tblQueueTransferDeptID`
     * const tblQueueTransferDeptWithTblQueueTransferDeptIDOnly = await prisma.tblQueueTransferDept.findMany({ select: { tblQueueTransferDeptID: true } })
     * 
     */
    findMany<T extends tblQueueTransferDeptFindManyArgs>(args?: SelectSubset<T, tblQueueTransferDeptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblQueueTransferDept.
     * @param {tblQueueTransferDeptCreateArgs} args - Arguments to create a TblQueueTransferDept.
     * @example
     * // Create one TblQueueTransferDept
     * const TblQueueTransferDept = await prisma.tblQueueTransferDept.create({
     *   data: {
     *     // ... data to create a TblQueueTransferDept
     *   }
     * })
     * 
     */
    create<T extends tblQueueTransferDeptCreateArgs>(args: SelectSubset<T, tblQueueTransferDeptCreateArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblQueueTransferDepts.
     * @param {tblQueueTransferDeptCreateManyArgs} args - Arguments to create many TblQueueTransferDepts.
     * @example
     * // Create many TblQueueTransferDepts
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblQueueTransferDeptCreateManyArgs>(args?: SelectSubset<T, tblQueueTransferDeptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblQueueTransferDept.
     * @param {tblQueueTransferDeptDeleteArgs} args - Arguments to delete one TblQueueTransferDept.
     * @example
     * // Delete one TblQueueTransferDept
     * const TblQueueTransferDept = await prisma.tblQueueTransferDept.delete({
     *   where: {
     *     // ... filter to delete one TblQueueTransferDept
     *   }
     * })
     * 
     */
    delete<T extends tblQueueTransferDeptDeleteArgs>(args: SelectSubset<T, tblQueueTransferDeptDeleteArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblQueueTransferDept.
     * @param {tblQueueTransferDeptUpdateArgs} args - Arguments to update one TblQueueTransferDept.
     * @example
     * // Update one TblQueueTransferDept
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblQueueTransferDeptUpdateArgs>(args: SelectSubset<T, tblQueueTransferDeptUpdateArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblQueueTransferDepts.
     * @param {tblQueueTransferDeptDeleteManyArgs} args - Arguments to filter TblQueueTransferDepts to delete.
     * @example
     * // Delete a few TblQueueTransferDepts
     * const { count } = await prisma.tblQueueTransferDept.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblQueueTransferDeptDeleteManyArgs>(args?: SelectSubset<T, tblQueueTransferDeptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblQueueTransferDepts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueTransferDeptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblQueueTransferDepts
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblQueueTransferDeptUpdateManyArgs>(args: SelectSubset<T, tblQueueTransferDeptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblQueueTransferDept.
     * @param {tblQueueTransferDeptUpsertArgs} args - Arguments to update or create a TblQueueTransferDept.
     * @example
     * // Update or create a TblQueueTransferDept
     * const tblQueueTransferDept = await prisma.tblQueueTransferDept.upsert({
     *   create: {
     *     // ... data to create a TblQueueTransferDept
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblQueueTransferDept we want to update
     *   }
     * })
     */
    upsert<T extends tblQueueTransferDeptUpsertArgs>(args: SelectSubset<T, tblQueueTransferDeptUpsertArgs<ExtArgs>>): Prisma__tblQueueTransferDeptClient<$Result.GetResult<Prisma.$tblQueueTransferDeptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblQueueTransferDepts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueTransferDeptCountArgs} args - Arguments to filter TblQueueTransferDepts to count.
     * @example
     * // Count the number of TblQueueTransferDepts
     * const count = await prisma.tblQueueTransferDept.count({
     *   where: {
     *     // ... the filter for the TblQueueTransferDepts we want to count
     *   }
     * })
    **/
    count<T extends tblQueueTransferDeptCountArgs>(
      args?: Subset<T, tblQueueTransferDeptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblQueueTransferDeptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblQueueTransferDept.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblQueueTransferDeptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblQueueTransferDeptAggregateArgs>(args: Subset<T, TblQueueTransferDeptAggregateArgs>): Prisma.PrismaPromise<GetTblQueueTransferDeptAggregateType<T>>

    /**
     * Group by TblQueueTransferDept.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueTransferDeptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblQueueTransferDeptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblQueueTransferDeptGroupByArgs['orderBy'] }
        : { orderBy?: tblQueueTransferDeptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblQueueTransferDeptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblQueueTransferDeptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblQueueTransferDept model
   */
  readonly fields: tblQueueTransferDeptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblQueueTransferDept.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblQueueTransferDeptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblQueueTransferDept model
   */
  interface tblQueueTransferDeptFieldRefs {
    readonly tblQueueTransferDeptID: FieldRef<"tblQueueTransferDept", 'Decimal'>
    readonly barcode: FieldRef<"tblQueueTransferDept", 'String'>
    readonly fromdeptcode: FieldRef<"tblQueueTransferDept", 'String'>
    readonly todeptcode: FieldRef<"tblQueueTransferDept", 'String'>
    readonly last_update: FieldRef<"tblQueueTransferDept", 'DateTime'>
    readonly issued_dt: FieldRef<"tblQueueTransferDept", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tblQueueTransferDept findUnique
   */
  export type tblQueueTransferDeptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueTransferDept to fetch.
     */
    where: tblQueueTransferDeptWhereUniqueInput
  }

  /**
   * tblQueueTransferDept findUniqueOrThrow
   */
  export type tblQueueTransferDeptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueTransferDept to fetch.
     */
    where: tblQueueTransferDeptWhereUniqueInput
  }

  /**
   * tblQueueTransferDept findFirst
   */
  export type tblQueueTransferDeptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueTransferDept to fetch.
     */
    where?: tblQueueTransferDeptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueTransferDepts to fetch.
     */
    orderBy?: tblQueueTransferDeptOrderByWithRelationInput | tblQueueTransferDeptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueTransferDepts.
     */
    cursor?: tblQueueTransferDeptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueTransferDepts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueTransferDepts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueTransferDepts.
     */
    distinct?: TblQueueTransferDeptScalarFieldEnum | TblQueueTransferDeptScalarFieldEnum[]
  }

  /**
   * tblQueueTransferDept findFirstOrThrow
   */
  export type tblQueueTransferDeptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueTransferDept to fetch.
     */
    where?: tblQueueTransferDeptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueTransferDepts to fetch.
     */
    orderBy?: tblQueueTransferDeptOrderByWithRelationInput | tblQueueTransferDeptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueTransferDepts.
     */
    cursor?: tblQueueTransferDeptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueTransferDepts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueTransferDepts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueTransferDepts.
     */
    distinct?: TblQueueTransferDeptScalarFieldEnum | TblQueueTransferDeptScalarFieldEnum[]
  }

  /**
   * tblQueueTransferDept findMany
   */
  export type tblQueueTransferDeptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueTransferDepts to fetch.
     */
    where?: tblQueueTransferDeptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueTransferDepts to fetch.
     */
    orderBy?: tblQueueTransferDeptOrderByWithRelationInput | tblQueueTransferDeptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblQueueTransferDepts.
     */
    cursor?: tblQueueTransferDeptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueTransferDepts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueTransferDepts.
     */
    skip?: number
    distinct?: TblQueueTransferDeptScalarFieldEnum | TblQueueTransferDeptScalarFieldEnum[]
  }

  /**
   * tblQueueTransferDept create
   */
  export type tblQueueTransferDeptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * The data needed to create a tblQueueTransferDept.
     */
    data: XOR<tblQueueTransferDeptCreateInput, tblQueueTransferDeptUncheckedCreateInput>
  }

  /**
   * tblQueueTransferDept createMany
   */
  export type tblQueueTransferDeptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblQueueTransferDepts.
     */
    data: tblQueueTransferDeptCreateManyInput | tblQueueTransferDeptCreateManyInput[]
  }

  /**
   * tblQueueTransferDept update
   */
  export type tblQueueTransferDeptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * The data needed to update a tblQueueTransferDept.
     */
    data: XOR<tblQueueTransferDeptUpdateInput, tblQueueTransferDeptUncheckedUpdateInput>
    /**
     * Choose, which tblQueueTransferDept to update.
     */
    where: tblQueueTransferDeptWhereUniqueInput
  }

  /**
   * tblQueueTransferDept updateMany
   */
  export type tblQueueTransferDeptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblQueueTransferDepts.
     */
    data: XOR<tblQueueTransferDeptUpdateManyMutationInput, tblQueueTransferDeptUncheckedUpdateManyInput>
    /**
     * Filter which tblQueueTransferDepts to update
     */
    where?: tblQueueTransferDeptWhereInput
    /**
     * Limit how many tblQueueTransferDepts to update.
     */
    limit?: number
  }

  /**
   * tblQueueTransferDept upsert
   */
  export type tblQueueTransferDeptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * The filter to search for the tblQueueTransferDept to update in case it exists.
     */
    where: tblQueueTransferDeptWhereUniqueInput
    /**
     * In case the tblQueueTransferDept found by the `where` argument doesn't exist, create a new tblQueueTransferDept with this data.
     */
    create: XOR<tblQueueTransferDeptCreateInput, tblQueueTransferDeptUncheckedCreateInput>
    /**
     * In case the tblQueueTransferDept was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblQueueTransferDeptUpdateInput, tblQueueTransferDeptUncheckedUpdateInput>
  }

  /**
   * tblQueueTransferDept delete
   */
  export type tblQueueTransferDeptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
    /**
     * Filter which tblQueueTransferDept to delete.
     */
    where: tblQueueTransferDeptWhereUniqueInput
  }

  /**
   * tblQueueTransferDept deleteMany
   */
  export type tblQueueTransferDeptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueTransferDepts to delete
     */
    where?: tblQueueTransferDeptWhereInput
    /**
     * Limit how many tblQueueTransferDepts to delete.
     */
    limit?: number
  }

  /**
   * tblQueueTransferDept without action
   */
  export type tblQueueTransferDeptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueTransferDept
     */
    select?: tblQueueTransferDeptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueTransferDept
     */
    omit?: tblQueueTransferDeptOmit<ExtArgs> | null
  }


  /**
   * Model tblQueueWait
   */

  export type AggregateTblQueueWait = {
    _count: TblQueueWaitCountAggregateOutputType | null
    _avg: TblQueueWaitAvgAggregateOutputType | null
    _sum: TblQueueWaitSumAggregateOutputType | null
    _min: TblQueueWaitMinAggregateOutputType | null
    _max: TblQueueWaitMaxAggregateOutputType | null
  }

  export type TblQueueWaitAvgAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    queueID: Decimal | null
    dept_counter: Decimal | null
  }

  export type TblQueueWaitSumAggregateOutputType = {
    tblQueueID: Decimal | null
    qnumber: Decimal | null
    status: Decimal | null
    waiting: Decimal | null
    queueID: Decimal | null
    dept_counter: Decimal | null
  }

  export type TblQueueWaitMinAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    queueID: Decimal | null
    dept_counter: Decimal | null
  }

  export type TblQueueWaitMaxAggregateOutputType = {
    tblQueueID: Decimal | null
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    queueID: Decimal | null
    dept_counter: Decimal | null
  }

  export type TblQueueWaitCountAggregateOutputType = {
    tblQueueID: number
    deptcode: number
    qnumber: number
    issued_dt: number
    start_dt: number
    finish_dt: number
    status: number
    waiting: number
    barcode: number
    deptname: number
    name: number
    userid: number
    locationname: number
    queueID: number
    dept_counter: number
    _all: number
  }


  export type TblQueueWaitAvgAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    queueID?: true
    dept_counter?: true
  }

  export type TblQueueWaitSumAggregateInputType = {
    tblQueueID?: true
    qnumber?: true
    status?: true
    waiting?: true
    queueID?: true
    dept_counter?: true
  }

  export type TblQueueWaitMinAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    queueID?: true
    dept_counter?: true
  }

  export type TblQueueWaitMaxAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    queueID?: true
    dept_counter?: true
  }

  export type TblQueueWaitCountAggregateInputType = {
    tblQueueID?: true
    deptcode?: true
    qnumber?: true
    issued_dt?: true
    start_dt?: true
    finish_dt?: true
    status?: true
    waiting?: true
    barcode?: true
    deptname?: true
    name?: true
    userid?: true
    locationname?: true
    queueID?: true
    dept_counter?: true
    _all?: true
  }

  export type TblQueueWaitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueWait to aggregate.
     */
    where?: tblQueueWaitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueWaits to fetch.
     */
    orderBy?: tblQueueWaitOrderByWithRelationInput | tblQueueWaitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblQueueWaitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueWaits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueWaits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblQueueWaits
    **/
    _count?: true | TblQueueWaitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblQueueWaitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblQueueWaitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblQueueWaitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblQueueWaitMaxAggregateInputType
  }

  export type GetTblQueueWaitAggregateType<T extends TblQueueWaitAggregateArgs> = {
        [P in keyof T & keyof AggregateTblQueueWait]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblQueueWait[P]>
      : GetScalarType<T[P], AggregateTblQueueWait[P]>
  }




  export type tblQueueWaitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblQueueWaitWhereInput
    orderBy?: tblQueueWaitOrderByWithAggregationInput | tblQueueWaitOrderByWithAggregationInput[]
    by: TblQueueWaitScalarFieldEnum[] | TblQueueWaitScalarFieldEnum
    having?: tblQueueWaitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblQueueWaitCountAggregateInputType | true
    _avg?: TblQueueWaitAvgAggregateInputType
    _sum?: TblQueueWaitSumAggregateInputType
    _min?: TblQueueWaitMinAggregateInputType
    _max?: TblQueueWaitMaxAggregateInputType
  }

  export type TblQueueWaitGroupByOutputType = {
    tblQueueID: Decimal
    deptcode: string | null
    qnumber: Decimal | null
    issued_dt: Date | null
    start_dt: Date | null
    finish_dt: Date | null
    status: Decimal | null
    waiting: Decimal | null
    barcode: string | null
    deptname: string | null
    name: string | null
    userid: string | null
    locationname: string | null
    queueID: Decimal | null
    dept_counter: Decimal | null
    _count: TblQueueWaitCountAggregateOutputType | null
    _avg: TblQueueWaitAvgAggregateOutputType | null
    _sum: TblQueueWaitSumAggregateOutputType | null
    _min: TblQueueWaitMinAggregateOutputType | null
    _max: TblQueueWaitMaxAggregateOutputType | null
  }

  type GetTblQueueWaitGroupByPayload<T extends tblQueueWaitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblQueueWaitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblQueueWaitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblQueueWaitGroupByOutputType[P]>
            : GetScalarType<T[P], TblQueueWaitGroupByOutputType[P]>
        }
      >
    >


  export type tblQueueWaitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    queueID?: boolean
    dept_counter?: boolean
  }, ExtArgs["result"]["tblQueueWait"]>



  export type tblQueueWaitSelectScalar = {
    tblQueueID?: boolean
    deptcode?: boolean
    qnumber?: boolean
    issued_dt?: boolean
    start_dt?: boolean
    finish_dt?: boolean
    status?: boolean
    waiting?: boolean
    barcode?: boolean
    deptname?: boolean
    name?: boolean
    userid?: boolean
    locationname?: boolean
    queueID?: boolean
    dept_counter?: boolean
  }

  export type tblQueueWaitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblQueueID" | "deptcode" | "qnumber" | "issued_dt" | "start_dt" | "finish_dt" | "status" | "waiting" | "barcode" | "deptname" | "name" | "userid" | "locationname" | "queueID" | "dept_counter", ExtArgs["result"]["tblQueueWait"]>

  export type $tblQueueWaitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblQueueWait"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblQueueID: Prisma.Decimal
      deptcode: string | null
      qnumber: Prisma.Decimal | null
      issued_dt: Date | null
      start_dt: Date | null
      finish_dt: Date | null
      status: Prisma.Decimal | null
      waiting: Prisma.Decimal | null
      barcode: string | null
      deptname: string | null
      name: string | null
      userid: string | null
      locationname: string | null
      queueID: Prisma.Decimal | null
      dept_counter: Prisma.Decimal | null
    }, ExtArgs["result"]["tblQueueWait"]>
    composites: {}
  }

  type tblQueueWaitGetPayload<S extends boolean | null | undefined | tblQueueWaitDefaultArgs> = $Result.GetResult<Prisma.$tblQueueWaitPayload, S>

  type tblQueueWaitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblQueueWaitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblQueueWaitCountAggregateInputType | true
    }

  export interface tblQueueWaitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblQueueWait'], meta: { name: 'tblQueueWait' } }
    /**
     * Find zero or one TblQueueWait that matches the filter.
     * @param {tblQueueWaitFindUniqueArgs} args - Arguments to find a TblQueueWait
     * @example
     * // Get one TblQueueWait
     * const tblQueueWait = await prisma.tblQueueWait.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblQueueWaitFindUniqueArgs>(args: SelectSubset<T, tblQueueWaitFindUniqueArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblQueueWait that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblQueueWaitFindUniqueOrThrowArgs} args - Arguments to find a TblQueueWait
     * @example
     * // Get one TblQueueWait
     * const tblQueueWait = await prisma.tblQueueWait.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblQueueWaitFindUniqueOrThrowArgs>(args: SelectSubset<T, tblQueueWaitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueWait that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueWaitFindFirstArgs} args - Arguments to find a TblQueueWait
     * @example
     * // Get one TblQueueWait
     * const tblQueueWait = await prisma.tblQueueWait.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblQueueWaitFindFirstArgs>(args?: SelectSubset<T, tblQueueWaitFindFirstArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblQueueWait that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueWaitFindFirstOrThrowArgs} args - Arguments to find a TblQueueWait
     * @example
     * // Get one TblQueueWait
     * const tblQueueWait = await prisma.tblQueueWait.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblQueueWaitFindFirstOrThrowArgs>(args?: SelectSubset<T, tblQueueWaitFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblQueueWaits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueWaitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblQueueWaits
     * const tblQueueWaits = await prisma.tblQueueWait.findMany()
     * 
     * // Get first 10 TblQueueWaits
     * const tblQueueWaits = await prisma.tblQueueWait.findMany({ take: 10 })
     * 
     * // Only select the `tblQueueID`
     * const tblQueueWaitWithTblQueueIDOnly = await prisma.tblQueueWait.findMany({ select: { tblQueueID: true } })
     * 
     */
    findMany<T extends tblQueueWaitFindManyArgs>(args?: SelectSubset<T, tblQueueWaitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblQueueWait.
     * @param {tblQueueWaitCreateArgs} args - Arguments to create a TblQueueWait.
     * @example
     * // Create one TblQueueWait
     * const TblQueueWait = await prisma.tblQueueWait.create({
     *   data: {
     *     // ... data to create a TblQueueWait
     *   }
     * })
     * 
     */
    create<T extends tblQueueWaitCreateArgs>(args: SelectSubset<T, tblQueueWaitCreateArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblQueueWaits.
     * @param {tblQueueWaitCreateManyArgs} args - Arguments to create many TblQueueWaits.
     * @example
     * // Create many TblQueueWaits
     * const tblQueueWait = await prisma.tblQueueWait.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblQueueWaitCreateManyArgs>(args?: SelectSubset<T, tblQueueWaitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblQueueWait.
     * @param {tblQueueWaitDeleteArgs} args - Arguments to delete one TblQueueWait.
     * @example
     * // Delete one TblQueueWait
     * const TblQueueWait = await prisma.tblQueueWait.delete({
     *   where: {
     *     // ... filter to delete one TblQueueWait
     *   }
     * })
     * 
     */
    delete<T extends tblQueueWaitDeleteArgs>(args: SelectSubset<T, tblQueueWaitDeleteArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblQueueWait.
     * @param {tblQueueWaitUpdateArgs} args - Arguments to update one TblQueueWait.
     * @example
     * // Update one TblQueueWait
     * const tblQueueWait = await prisma.tblQueueWait.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblQueueWaitUpdateArgs>(args: SelectSubset<T, tblQueueWaitUpdateArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblQueueWaits.
     * @param {tblQueueWaitDeleteManyArgs} args - Arguments to filter TblQueueWaits to delete.
     * @example
     * // Delete a few TblQueueWaits
     * const { count } = await prisma.tblQueueWait.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblQueueWaitDeleteManyArgs>(args?: SelectSubset<T, tblQueueWaitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblQueueWaits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueWaitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblQueueWaits
     * const tblQueueWait = await prisma.tblQueueWait.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblQueueWaitUpdateManyArgs>(args: SelectSubset<T, tblQueueWaitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblQueueWait.
     * @param {tblQueueWaitUpsertArgs} args - Arguments to update or create a TblQueueWait.
     * @example
     * // Update or create a TblQueueWait
     * const tblQueueWait = await prisma.tblQueueWait.upsert({
     *   create: {
     *     // ... data to create a TblQueueWait
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblQueueWait we want to update
     *   }
     * })
     */
    upsert<T extends tblQueueWaitUpsertArgs>(args: SelectSubset<T, tblQueueWaitUpsertArgs<ExtArgs>>): Prisma__tblQueueWaitClient<$Result.GetResult<Prisma.$tblQueueWaitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblQueueWaits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueWaitCountArgs} args - Arguments to filter TblQueueWaits to count.
     * @example
     * // Count the number of TblQueueWaits
     * const count = await prisma.tblQueueWait.count({
     *   where: {
     *     // ... the filter for the TblQueueWaits we want to count
     *   }
     * })
    **/
    count<T extends tblQueueWaitCountArgs>(
      args?: Subset<T, tblQueueWaitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblQueueWaitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblQueueWait.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblQueueWaitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblQueueWaitAggregateArgs>(args: Subset<T, TblQueueWaitAggregateArgs>): Prisma.PrismaPromise<GetTblQueueWaitAggregateType<T>>

    /**
     * Group by TblQueueWait.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblQueueWaitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblQueueWaitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblQueueWaitGroupByArgs['orderBy'] }
        : { orderBy?: tblQueueWaitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblQueueWaitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblQueueWaitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblQueueWait model
   */
  readonly fields: tblQueueWaitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblQueueWait.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblQueueWaitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblQueueWait model
   */
  interface tblQueueWaitFieldRefs {
    readonly tblQueueID: FieldRef<"tblQueueWait", 'Decimal'>
    readonly deptcode: FieldRef<"tblQueueWait", 'String'>
    readonly qnumber: FieldRef<"tblQueueWait", 'Decimal'>
    readonly issued_dt: FieldRef<"tblQueueWait", 'DateTime'>
    readonly start_dt: FieldRef<"tblQueueWait", 'DateTime'>
    readonly finish_dt: FieldRef<"tblQueueWait", 'DateTime'>
    readonly status: FieldRef<"tblQueueWait", 'Decimal'>
    readonly waiting: FieldRef<"tblQueueWait", 'Decimal'>
    readonly barcode: FieldRef<"tblQueueWait", 'String'>
    readonly deptname: FieldRef<"tblQueueWait", 'String'>
    readonly name: FieldRef<"tblQueueWait", 'String'>
    readonly userid: FieldRef<"tblQueueWait", 'String'>
    readonly locationname: FieldRef<"tblQueueWait", 'String'>
    readonly queueID: FieldRef<"tblQueueWait", 'Decimal'>
    readonly dept_counter: FieldRef<"tblQueueWait", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tblQueueWait findUnique
   */
  export type tblQueueWaitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueWait to fetch.
     */
    where: tblQueueWaitWhereUniqueInput
  }

  /**
   * tblQueueWait findUniqueOrThrow
   */
  export type tblQueueWaitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueWait to fetch.
     */
    where: tblQueueWaitWhereUniqueInput
  }

  /**
   * tblQueueWait findFirst
   */
  export type tblQueueWaitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueWait to fetch.
     */
    where?: tblQueueWaitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueWaits to fetch.
     */
    orderBy?: tblQueueWaitOrderByWithRelationInput | tblQueueWaitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueWaits.
     */
    cursor?: tblQueueWaitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueWaits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueWaits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueWaits.
     */
    distinct?: TblQueueWaitScalarFieldEnum | TblQueueWaitScalarFieldEnum[]
  }

  /**
   * tblQueueWait findFirstOrThrow
   */
  export type tblQueueWaitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueWait to fetch.
     */
    where?: tblQueueWaitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueWaits to fetch.
     */
    orderBy?: tblQueueWaitOrderByWithRelationInput | tblQueueWaitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblQueueWaits.
     */
    cursor?: tblQueueWaitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueWaits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueWaits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblQueueWaits.
     */
    distinct?: TblQueueWaitScalarFieldEnum | TblQueueWaitScalarFieldEnum[]
  }

  /**
   * tblQueueWait findMany
   */
  export type tblQueueWaitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * Filter, which tblQueueWaits to fetch.
     */
    where?: tblQueueWaitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblQueueWaits to fetch.
     */
    orderBy?: tblQueueWaitOrderByWithRelationInput | tblQueueWaitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblQueueWaits.
     */
    cursor?: tblQueueWaitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblQueueWaits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblQueueWaits.
     */
    skip?: number
    distinct?: TblQueueWaitScalarFieldEnum | TblQueueWaitScalarFieldEnum[]
  }

  /**
   * tblQueueWait create
   */
  export type tblQueueWaitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * The data needed to create a tblQueueWait.
     */
    data: XOR<tblQueueWaitCreateInput, tblQueueWaitUncheckedCreateInput>
  }

  /**
   * tblQueueWait createMany
   */
  export type tblQueueWaitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblQueueWaits.
     */
    data: tblQueueWaitCreateManyInput | tblQueueWaitCreateManyInput[]
  }

  /**
   * tblQueueWait update
   */
  export type tblQueueWaitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * The data needed to update a tblQueueWait.
     */
    data: XOR<tblQueueWaitUpdateInput, tblQueueWaitUncheckedUpdateInput>
    /**
     * Choose, which tblQueueWait to update.
     */
    where: tblQueueWaitWhereUniqueInput
  }

  /**
   * tblQueueWait updateMany
   */
  export type tblQueueWaitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblQueueWaits.
     */
    data: XOR<tblQueueWaitUpdateManyMutationInput, tblQueueWaitUncheckedUpdateManyInput>
    /**
     * Filter which tblQueueWaits to update
     */
    where?: tblQueueWaitWhereInput
    /**
     * Limit how many tblQueueWaits to update.
     */
    limit?: number
  }

  /**
   * tblQueueWait upsert
   */
  export type tblQueueWaitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * The filter to search for the tblQueueWait to update in case it exists.
     */
    where: tblQueueWaitWhereUniqueInput
    /**
     * In case the tblQueueWait found by the `where` argument doesn't exist, create a new tblQueueWait with this data.
     */
    create: XOR<tblQueueWaitCreateInput, tblQueueWaitUncheckedCreateInput>
    /**
     * In case the tblQueueWait was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblQueueWaitUpdateInput, tblQueueWaitUncheckedUpdateInput>
  }

  /**
   * tblQueueWait delete
   */
  export type tblQueueWaitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
    /**
     * Filter which tblQueueWait to delete.
     */
    where: tblQueueWaitWhereUniqueInput
  }

  /**
   * tblQueueWait deleteMany
   */
  export type tblQueueWaitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblQueueWaits to delete
     */
    where?: tblQueueWaitWhereInput
    /**
     * Limit how many tblQueueWaits to delete.
     */
    limit?: number
  }

  /**
   * tblQueueWait without action
   */
  export type tblQueueWaitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblQueueWait
     */
    select?: tblQueueWaitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblQueueWait
     */
    omit?: tblQueueWaitOmit<ExtArgs> | null
  }


  /**
   * Model tblSubLocation
   */

  export type AggregateTblSubLocation = {
    _count: TblSubLocationCountAggregateOutputType | null
    _avg: TblSubLocationAvgAggregateOutputType | null
    _sum: TblSubLocationSumAggregateOutputType | null
    _min: TblSubLocationMinAggregateOutputType | null
    _max: TblSubLocationMaxAggregateOutputType | null
  }

  export type TblSubLocationAvgAggregateOutputType = {
    tblLocationID: Decimal | null
    status: Decimal | null
  }

  export type TblSubLocationSumAggregateOutputType = {
    tblLocationID: Decimal | null
    status: Decimal | null
  }

  export type TblSubLocationMinAggregateOutputType = {
    tblLocationID: Decimal | null
    loccode: string | null
    deptcode: string | null
    locationname: string | null
    status: Decimal | null
  }

  export type TblSubLocationMaxAggregateOutputType = {
    tblLocationID: Decimal | null
    loccode: string | null
    deptcode: string | null
    locationname: string | null
    status: Decimal | null
  }

  export type TblSubLocationCountAggregateOutputType = {
    tblLocationID: number
    loccode: number
    deptcode: number
    locationname: number
    status: number
    _all: number
  }


  export type TblSubLocationAvgAggregateInputType = {
    tblLocationID?: true
    status?: true
  }

  export type TblSubLocationSumAggregateInputType = {
    tblLocationID?: true
    status?: true
  }

  export type TblSubLocationMinAggregateInputType = {
    tblLocationID?: true
    loccode?: true
    deptcode?: true
    locationname?: true
    status?: true
  }

  export type TblSubLocationMaxAggregateInputType = {
    tblLocationID?: true
    loccode?: true
    deptcode?: true
    locationname?: true
    status?: true
  }

  export type TblSubLocationCountAggregateInputType = {
    tblLocationID?: true
    loccode?: true
    deptcode?: true
    locationname?: true
    status?: true
    _all?: true
  }

  export type TblSubLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblSubLocation to aggregate.
     */
    where?: tblSubLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblSubLocations to fetch.
     */
    orderBy?: tblSubLocationOrderByWithRelationInput | tblSubLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblSubLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblSubLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblSubLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblSubLocations
    **/
    _count?: true | TblSubLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblSubLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblSubLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblSubLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblSubLocationMaxAggregateInputType
  }

  export type GetTblSubLocationAggregateType<T extends TblSubLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateTblSubLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblSubLocation[P]>
      : GetScalarType<T[P], AggregateTblSubLocation[P]>
  }




  export type tblSubLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblSubLocationWhereInput
    orderBy?: tblSubLocationOrderByWithAggregationInput | tblSubLocationOrderByWithAggregationInput[]
    by: TblSubLocationScalarFieldEnum[] | TblSubLocationScalarFieldEnum
    having?: tblSubLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblSubLocationCountAggregateInputType | true
    _avg?: TblSubLocationAvgAggregateInputType
    _sum?: TblSubLocationSumAggregateInputType
    _min?: TblSubLocationMinAggregateInputType
    _max?: TblSubLocationMaxAggregateInputType
  }

  export type TblSubLocationGroupByOutputType = {
    tblLocationID: Decimal
    loccode: string | null
    deptcode: string | null
    locationname: string | null
    status: Decimal | null
    _count: TblSubLocationCountAggregateOutputType | null
    _avg: TblSubLocationAvgAggregateOutputType | null
    _sum: TblSubLocationSumAggregateOutputType | null
    _min: TblSubLocationMinAggregateOutputType | null
    _max: TblSubLocationMaxAggregateOutputType | null
  }

  type GetTblSubLocationGroupByPayload<T extends tblSubLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblSubLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblSubLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblSubLocationGroupByOutputType[P]>
            : GetScalarType<T[P], TblSubLocationGroupByOutputType[P]>
        }
      >
    >


  export type tblSubLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblLocationID?: boolean
    loccode?: boolean
    deptcode?: boolean
    locationname?: boolean
    status?: boolean
  }, ExtArgs["result"]["tblSubLocation"]>



  export type tblSubLocationSelectScalar = {
    tblLocationID?: boolean
    loccode?: boolean
    deptcode?: boolean
    locationname?: boolean
    status?: boolean
  }

  export type tblSubLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblLocationID" | "loccode" | "deptcode" | "locationname" | "status", ExtArgs["result"]["tblSubLocation"]>

  export type $tblSubLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblSubLocation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblLocationID: Prisma.Decimal
      loccode: string | null
      deptcode: string | null
      locationname: string | null
      status: Prisma.Decimal | null
    }, ExtArgs["result"]["tblSubLocation"]>
    composites: {}
  }

  type tblSubLocationGetPayload<S extends boolean | null | undefined | tblSubLocationDefaultArgs> = $Result.GetResult<Prisma.$tblSubLocationPayload, S>

  type tblSubLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblSubLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblSubLocationCountAggregateInputType | true
    }

  export interface tblSubLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblSubLocation'], meta: { name: 'tblSubLocation' } }
    /**
     * Find zero or one TblSubLocation that matches the filter.
     * @param {tblSubLocationFindUniqueArgs} args - Arguments to find a TblSubLocation
     * @example
     * // Get one TblSubLocation
     * const tblSubLocation = await prisma.tblSubLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblSubLocationFindUniqueArgs>(args: SelectSubset<T, tblSubLocationFindUniqueArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblSubLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblSubLocationFindUniqueOrThrowArgs} args - Arguments to find a TblSubLocation
     * @example
     * // Get one TblSubLocation
     * const tblSubLocation = await prisma.tblSubLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblSubLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, tblSubLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblSubLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblSubLocationFindFirstArgs} args - Arguments to find a TblSubLocation
     * @example
     * // Get one TblSubLocation
     * const tblSubLocation = await prisma.tblSubLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblSubLocationFindFirstArgs>(args?: SelectSubset<T, tblSubLocationFindFirstArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblSubLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblSubLocationFindFirstOrThrowArgs} args - Arguments to find a TblSubLocation
     * @example
     * // Get one TblSubLocation
     * const tblSubLocation = await prisma.tblSubLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblSubLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, tblSubLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblSubLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblSubLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblSubLocations
     * const tblSubLocations = await prisma.tblSubLocation.findMany()
     * 
     * // Get first 10 TblSubLocations
     * const tblSubLocations = await prisma.tblSubLocation.findMany({ take: 10 })
     * 
     * // Only select the `tblLocationID`
     * const tblSubLocationWithTblLocationIDOnly = await prisma.tblSubLocation.findMany({ select: { tblLocationID: true } })
     * 
     */
    findMany<T extends tblSubLocationFindManyArgs>(args?: SelectSubset<T, tblSubLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblSubLocation.
     * @param {tblSubLocationCreateArgs} args - Arguments to create a TblSubLocation.
     * @example
     * // Create one TblSubLocation
     * const TblSubLocation = await prisma.tblSubLocation.create({
     *   data: {
     *     // ... data to create a TblSubLocation
     *   }
     * })
     * 
     */
    create<T extends tblSubLocationCreateArgs>(args: SelectSubset<T, tblSubLocationCreateArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblSubLocations.
     * @param {tblSubLocationCreateManyArgs} args - Arguments to create many TblSubLocations.
     * @example
     * // Create many TblSubLocations
     * const tblSubLocation = await prisma.tblSubLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblSubLocationCreateManyArgs>(args?: SelectSubset<T, tblSubLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblSubLocation.
     * @param {tblSubLocationDeleteArgs} args - Arguments to delete one TblSubLocation.
     * @example
     * // Delete one TblSubLocation
     * const TblSubLocation = await prisma.tblSubLocation.delete({
     *   where: {
     *     // ... filter to delete one TblSubLocation
     *   }
     * })
     * 
     */
    delete<T extends tblSubLocationDeleteArgs>(args: SelectSubset<T, tblSubLocationDeleteArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblSubLocation.
     * @param {tblSubLocationUpdateArgs} args - Arguments to update one TblSubLocation.
     * @example
     * // Update one TblSubLocation
     * const tblSubLocation = await prisma.tblSubLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblSubLocationUpdateArgs>(args: SelectSubset<T, tblSubLocationUpdateArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblSubLocations.
     * @param {tblSubLocationDeleteManyArgs} args - Arguments to filter TblSubLocations to delete.
     * @example
     * // Delete a few TblSubLocations
     * const { count } = await prisma.tblSubLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblSubLocationDeleteManyArgs>(args?: SelectSubset<T, tblSubLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblSubLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblSubLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblSubLocations
     * const tblSubLocation = await prisma.tblSubLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblSubLocationUpdateManyArgs>(args: SelectSubset<T, tblSubLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblSubLocation.
     * @param {tblSubLocationUpsertArgs} args - Arguments to update or create a TblSubLocation.
     * @example
     * // Update or create a TblSubLocation
     * const tblSubLocation = await prisma.tblSubLocation.upsert({
     *   create: {
     *     // ... data to create a TblSubLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblSubLocation we want to update
     *   }
     * })
     */
    upsert<T extends tblSubLocationUpsertArgs>(args: SelectSubset<T, tblSubLocationUpsertArgs<ExtArgs>>): Prisma__tblSubLocationClient<$Result.GetResult<Prisma.$tblSubLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblSubLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblSubLocationCountArgs} args - Arguments to filter TblSubLocations to count.
     * @example
     * // Count the number of TblSubLocations
     * const count = await prisma.tblSubLocation.count({
     *   where: {
     *     // ... the filter for the TblSubLocations we want to count
     *   }
     * })
    **/
    count<T extends tblSubLocationCountArgs>(
      args?: Subset<T, tblSubLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblSubLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblSubLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblSubLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblSubLocationAggregateArgs>(args: Subset<T, TblSubLocationAggregateArgs>): Prisma.PrismaPromise<GetTblSubLocationAggregateType<T>>

    /**
     * Group by TblSubLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblSubLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblSubLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblSubLocationGroupByArgs['orderBy'] }
        : { orderBy?: tblSubLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblSubLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblSubLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblSubLocation model
   */
  readonly fields: tblSubLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblSubLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblSubLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblSubLocation model
   */
  interface tblSubLocationFieldRefs {
    readonly tblLocationID: FieldRef<"tblSubLocation", 'Decimal'>
    readonly loccode: FieldRef<"tblSubLocation", 'String'>
    readonly deptcode: FieldRef<"tblSubLocation", 'String'>
    readonly locationname: FieldRef<"tblSubLocation", 'String'>
    readonly status: FieldRef<"tblSubLocation", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tblSubLocation findUnique
   */
  export type tblSubLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblSubLocation to fetch.
     */
    where: tblSubLocationWhereUniqueInput
  }

  /**
   * tblSubLocation findUniqueOrThrow
   */
  export type tblSubLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblSubLocation to fetch.
     */
    where: tblSubLocationWhereUniqueInput
  }

  /**
   * tblSubLocation findFirst
   */
  export type tblSubLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblSubLocation to fetch.
     */
    where?: tblSubLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblSubLocations to fetch.
     */
    orderBy?: tblSubLocationOrderByWithRelationInput | tblSubLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblSubLocations.
     */
    cursor?: tblSubLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblSubLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblSubLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblSubLocations.
     */
    distinct?: TblSubLocationScalarFieldEnum | TblSubLocationScalarFieldEnum[]
  }

  /**
   * tblSubLocation findFirstOrThrow
   */
  export type tblSubLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblSubLocation to fetch.
     */
    where?: tblSubLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblSubLocations to fetch.
     */
    orderBy?: tblSubLocationOrderByWithRelationInput | tblSubLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblSubLocations.
     */
    cursor?: tblSubLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblSubLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblSubLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblSubLocations.
     */
    distinct?: TblSubLocationScalarFieldEnum | TblSubLocationScalarFieldEnum[]
  }

  /**
   * tblSubLocation findMany
   */
  export type tblSubLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * Filter, which tblSubLocations to fetch.
     */
    where?: tblSubLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblSubLocations to fetch.
     */
    orderBy?: tblSubLocationOrderByWithRelationInput | tblSubLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblSubLocations.
     */
    cursor?: tblSubLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblSubLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblSubLocations.
     */
    skip?: number
    distinct?: TblSubLocationScalarFieldEnum | TblSubLocationScalarFieldEnum[]
  }

  /**
   * tblSubLocation create
   */
  export type tblSubLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * The data needed to create a tblSubLocation.
     */
    data: XOR<tblSubLocationCreateInput, tblSubLocationUncheckedCreateInput>
  }

  /**
   * tblSubLocation createMany
   */
  export type tblSubLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblSubLocations.
     */
    data: tblSubLocationCreateManyInput | tblSubLocationCreateManyInput[]
  }

  /**
   * tblSubLocation update
   */
  export type tblSubLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * The data needed to update a tblSubLocation.
     */
    data: XOR<tblSubLocationUpdateInput, tblSubLocationUncheckedUpdateInput>
    /**
     * Choose, which tblSubLocation to update.
     */
    where: tblSubLocationWhereUniqueInput
  }

  /**
   * tblSubLocation updateMany
   */
  export type tblSubLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblSubLocations.
     */
    data: XOR<tblSubLocationUpdateManyMutationInput, tblSubLocationUncheckedUpdateManyInput>
    /**
     * Filter which tblSubLocations to update
     */
    where?: tblSubLocationWhereInput
    /**
     * Limit how many tblSubLocations to update.
     */
    limit?: number
  }

  /**
   * tblSubLocation upsert
   */
  export type tblSubLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * The filter to search for the tblSubLocation to update in case it exists.
     */
    where: tblSubLocationWhereUniqueInput
    /**
     * In case the tblSubLocation found by the `where` argument doesn't exist, create a new tblSubLocation with this data.
     */
    create: XOR<tblSubLocationCreateInput, tblSubLocationUncheckedCreateInput>
    /**
     * In case the tblSubLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblSubLocationUpdateInput, tblSubLocationUncheckedUpdateInput>
  }

  /**
   * tblSubLocation delete
   */
  export type tblSubLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
    /**
     * Filter which tblSubLocation to delete.
     */
    where: tblSubLocationWhereUniqueInput
  }

  /**
   * tblSubLocation deleteMany
   */
  export type tblSubLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblSubLocations to delete
     */
    where?: tblSubLocationWhereInput
    /**
     * Limit how many tblSubLocations to delete.
     */
    limit?: number
  }

  /**
   * tblSubLocation without action
   */
  export type tblSubLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblSubLocation
     */
    select?: tblSubLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblSubLocation
     */
    omit?: tblSubLocationOmit<ExtArgs> | null
  }


  /**
   * Model tblTransfer
   */

  export type AggregateTblTransfer = {
    _count: TblTransferCountAggregateOutputType | null
    _avg: TblTransferAvgAggregateOutputType | null
    _sum: TblTransferSumAggregateOutputType | null
    _min: TblTransferMinAggregateOutputType | null
    _max: TblTransferMaxAggregateOutputType | null
  }

  export type TblTransferAvgAggregateOutputType = {
    tblTransferID: Decimal | null
    transferid: Decimal | null
  }

  export type TblTransferSumAggregateOutputType = {
    tblTransferID: Decimal | null
    transferid: Decimal | null
  }

  export type TblTransferMinAggregateOutputType = {
    tblTransferID: Decimal | null
    transferid: Decimal | null
    transfername: string | null
  }

  export type TblTransferMaxAggregateOutputType = {
    tblTransferID: Decimal | null
    transferid: Decimal | null
    transfername: string | null
  }

  export type TblTransferCountAggregateOutputType = {
    tblTransferID: number
    transferid: number
    transfername: number
    _all: number
  }


  export type TblTransferAvgAggregateInputType = {
    tblTransferID?: true
    transferid?: true
  }

  export type TblTransferSumAggregateInputType = {
    tblTransferID?: true
    transferid?: true
  }

  export type TblTransferMinAggregateInputType = {
    tblTransferID?: true
    transferid?: true
    transfername?: true
  }

  export type TblTransferMaxAggregateInputType = {
    tblTransferID?: true
    transferid?: true
    transfername?: true
  }

  export type TblTransferCountAggregateInputType = {
    tblTransferID?: true
    transferid?: true
    transfername?: true
    _all?: true
  }

  export type TblTransferAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblTransfer to aggregate.
     */
    where?: tblTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblTransfers to fetch.
     */
    orderBy?: tblTransferOrderByWithRelationInput | tblTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblTransfers
    **/
    _count?: true | TblTransferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblTransferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblTransferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblTransferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblTransferMaxAggregateInputType
  }

  export type GetTblTransferAggregateType<T extends TblTransferAggregateArgs> = {
        [P in keyof T & keyof AggregateTblTransfer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblTransfer[P]>
      : GetScalarType<T[P], AggregateTblTransfer[P]>
  }




  export type tblTransferGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblTransferWhereInput
    orderBy?: tblTransferOrderByWithAggregationInput | tblTransferOrderByWithAggregationInput[]
    by: TblTransferScalarFieldEnum[] | TblTransferScalarFieldEnum
    having?: tblTransferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblTransferCountAggregateInputType | true
    _avg?: TblTransferAvgAggregateInputType
    _sum?: TblTransferSumAggregateInputType
    _min?: TblTransferMinAggregateInputType
    _max?: TblTransferMaxAggregateInputType
  }

  export type TblTransferGroupByOutputType = {
    tblTransferID: Decimal
    transferid: Decimal | null
    transfername: string | null
    _count: TblTransferCountAggregateOutputType | null
    _avg: TblTransferAvgAggregateOutputType | null
    _sum: TblTransferSumAggregateOutputType | null
    _min: TblTransferMinAggregateOutputType | null
    _max: TblTransferMaxAggregateOutputType | null
  }

  type GetTblTransferGroupByPayload<T extends tblTransferGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblTransferGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblTransferGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblTransferGroupByOutputType[P]>
            : GetScalarType<T[P], TblTransferGroupByOutputType[P]>
        }
      >
    >


  export type tblTransferSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblTransferID?: boolean
    transferid?: boolean
    transfername?: boolean
  }, ExtArgs["result"]["tblTransfer"]>



  export type tblTransferSelectScalar = {
    tblTransferID?: boolean
    transferid?: boolean
    transfername?: boolean
  }

  export type tblTransferOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblTransferID" | "transferid" | "transfername", ExtArgs["result"]["tblTransfer"]>

  export type $tblTransferPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblTransfer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblTransferID: Prisma.Decimal
      transferid: Prisma.Decimal | null
      transfername: string | null
    }, ExtArgs["result"]["tblTransfer"]>
    composites: {}
  }

  type tblTransferGetPayload<S extends boolean | null | undefined | tblTransferDefaultArgs> = $Result.GetResult<Prisma.$tblTransferPayload, S>

  type tblTransferCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblTransferFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblTransferCountAggregateInputType | true
    }

  export interface tblTransferDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblTransfer'], meta: { name: 'tblTransfer' } }
    /**
     * Find zero or one TblTransfer that matches the filter.
     * @param {tblTransferFindUniqueArgs} args - Arguments to find a TblTransfer
     * @example
     * // Get one TblTransfer
     * const tblTransfer = await prisma.tblTransfer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblTransferFindUniqueArgs>(args: SelectSubset<T, tblTransferFindUniqueArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblTransfer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblTransferFindUniqueOrThrowArgs} args - Arguments to find a TblTransfer
     * @example
     * // Get one TblTransfer
     * const tblTransfer = await prisma.tblTransfer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblTransferFindUniqueOrThrowArgs>(args: SelectSubset<T, tblTransferFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblTransfer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblTransferFindFirstArgs} args - Arguments to find a TblTransfer
     * @example
     * // Get one TblTransfer
     * const tblTransfer = await prisma.tblTransfer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblTransferFindFirstArgs>(args?: SelectSubset<T, tblTransferFindFirstArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblTransfer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblTransferFindFirstOrThrowArgs} args - Arguments to find a TblTransfer
     * @example
     * // Get one TblTransfer
     * const tblTransfer = await prisma.tblTransfer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblTransferFindFirstOrThrowArgs>(args?: SelectSubset<T, tblTransferFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblTransfers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblTransferFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblTransfers
     * const tblTransfers = await prisma.tblTransfer.findMany()
     * 
     * // Get first 10 TblTransfers
     * const tblTransfers = await prisma.tblTransfer.findMany({ take: 10 })
     * 
     * // Only select the `tblTransferID`
     * const tblTransferWithTblTransferIDOnly = await prisma.tblTransfer.findMany({ select: { tblTransferID: true } })
     * 
     */
    findMany<T extends tblTransferFindManyArgs>(args?: SelectSubset<T, tblTransferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblTransfer.
     * @param {tblTransferCreateArgs} args - Arguments to create a TblTransfer.
     * @example
     * // Create one TblTransfer
     * const TblTransfer = await prisma.tblTransfer.create({
     *   data: {
     *     // ... data to create a TblTransfer
     *   }
     * })
     * 
     */
    create<T extends tblTransferCreateArgs>(args: SelectSubset<T, tblTransferCreateArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblTransfers.
     * @param {tblTransferCreateManyArgs} args - Arguments to create many TblTransfers.
     * @example
     * // Create many TblTransfers
     * const tblTransfer = await prisma.tblTransfer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblTransferCreateManyArgs>(args?: SelectSubset<T, tblTransferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblTransfer.
     * @param {tblTransferDeleteArgs} args - Arguments to delete one TblTransfer.
     * @example
     * // Delete one TblTransfer
     * const TblTransfer = await prisma.tblTransfer.delete({
     *   where: {
     *     // ... filter to delete one TblTransfer
     *   }
     * })
     * 
     */
    delete<T extends tblTransferDeleteArgs>(args: SelectSubset<T, tblTransferDeleteArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblTransfer.
     * @param {tblTransferUpdateArgs} args - Arguments to update one TblTransfer.
     * @example
     * // Update one TblTransfer
     * const tblTransfer = await prisma.tblTransfer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblTransferUpdateArgs>(args: SelectSubset<T, tblTransferUpdateArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblTransfers.
     * @param {tblTransferDeleteManyArgs} args - Arguments to filter TblTransfers to delete.
     * @example
     * // Delete a few TblTransfers
     * const { count } = await prisma.tblTransfer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblTransferDeleteManyArgs>(args?: SelectSubset<T, tblTransferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblTransfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblTransferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblTransfers
     * const tblTransfer = await prisma.tblTransfer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblTransferUpdateManyArgs>(args: SelectSubset<T, tblTransferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblTransfer.
     * @param {tblTransferUpsertArgs} args - Arguments to update or create a TblTransfer.
     * @example
     * // Update or create a TblTransfer
     * const tblTransfer = await prisma.tblTransfer.upsert({
     *   create: {
     *     // ... data to create a TblTransfer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblTransfer we want to update
     *   }
     * })
     */
    upsert<T extends tblTransferUpsertArgs>(args: SelectSubset<T, tblTransferUpsertArgs<ExtArgs>>): Prisma__tblTransferClient<$Result.GetResult<Prisma.$tblTransferPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblTransfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblTransferCountArgs} args - Arguments to filter TblTransfers to count.
     * @example
     * // Count the number of TblTransfers
     * const count = await prisma.tblTransfer.count({
     *   where: {
     *     // ... the filter for the TblTransfers we want to count
     *   }
     * })
    **/
    count<T extends tblTransferCountArgs>(
      args?: Subset<T, tblTransferCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblTransferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblTransfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblTransferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblTransferAggregateArgs>(args: Subset<T, TblTransferAggregateArgs>): Prisma.PrismaPromise<GetTblTransferAggregateType<T>>

    /**
     * Group by TblTransfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblTransferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblTransferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblTransferGroupByArgs['orderBy'] }
        : { orderBy?: tblTransferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblTransferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblTransferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblTransfer model
   */
  readonly fields: tblTransferFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblTransfer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblTransferClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblTransfer model
   */
  interface tblTransferFieldRefs {
    readonly tblTransferID: FieldRef<"tblTransfer", 'Decimal'>
    readonly transferid: FieldRef<"tblTransfer", 'Decimal'>
    readonly transfername: FieldRef<"tblTransfer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tblTransfer findUnique
   */
  export type tblTransferFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * Filter, which tblTransfer to fetch.
     */
    where: tblTransferWhereUniqueInput
  }

  /**
   * tblTransfer findUniqueOrThrow
   */
  export type tblTransferFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * Filter, which tblTransfer to fetch.
     */
    where: tblTransferWhereUniqueInput
  }

  /**
   * tblTransfer findFirst
   */
  export type tblTransferFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * Filter, which tblTransfer to fetch.
     */
    where?: tblTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblTransfers to fetch.
     */
    orderBy?: tblTransferOrderByWithRelationInput | tblTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblTransfers.
     */
    cursor?: tblTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblTransfers.
     */
    distinct?: TblTransferScalarFieldEnum | TblTransferScalarFieldEnum[]
  }

  /**
   * tblTransfer findFirstOrThrow
   */
  export type tblTransferFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * Filter, which tblTransfer to fetch.
     */
    where?: tblTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblTransfers to fetch.
     */
    orderBy?: tblTransferOrderByWithRelationInput | tblTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblTransfers.
     */
    cursor?: tblTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblTransfers.
     */
    distinct?: TblTransferScalarFieldEnum | TblTransferScalarFieldEnum[]
  }

  /**
   * tblTransfer findMany
   */
  export type tblTransferFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * Filter, which tblTransfers to fetch.
     */
    where?: tblTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblTransfers to fetch.
     */
    orderBy?: tblTransferOrderByWithRelationInput | tblTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblTransfers.
     */
    cursor?: tblTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblTransfers.
     */
    skip?: number
    distinct?: TblTransferScalarFieldEnum | TblTransferScalarFieldEnum[]
  }

  /**
   * tblTransfer create
   */
  export type tblTransferCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * The data needed to create a tblTransfer.
     */
    data: XOR<tblTransferCreateInput, tblTransferUncheckedCreateInput>
  }

  /**
   * tblTransfer createMany
   */
  export type tblTransferCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblTransfers.
     */
    data: tblTransferCreateManyInput | tblTransferCreateManyInput[]
  }

  /**
   * tblTransfer update
   */
  export type tblTransferUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * The data needed to update a tblTransfer.
     */
    data: XOR<tblTransferUpdateInput, tblTransferUncheckedUpdateInput>
    /**
     * Choose, which tblTransfer to update.
     */
    where: tblTransferWhereUniqueInput
  }

  /**
   * tblTransfer updateMany
   */
  export type tblTransferUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblTransfers.
     */
    data: XOR<tblTransferUpdateManyMutationInput, tblTransferUncheckedUpdateManyInput>
    /**
     * Filter which tblTransfers to update
     */
    where?: tblTransferWhereInput
    /**
     * Limit how many tblTransfers to update.
     */
    limit?: number
  }

  /**
   * tblTransfer upsert
   */
  export type tblTransferUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * The filter to search for the tblTransfer to update in case it exists.
     */
    where: tblTransferWhereUniqueInput
    /**
     * In case the tblTransfer found by the `where` argument doesn't exist, create a new tblTransfer with this data.
     */
    create: XOR<tblTransferCreateInput, tblTransferUncheckedCreateInput>
    /**
     * In case the tblTransfer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblTransferUpdateInput, tblTransferUncheckedUpdateInput>
  }

  /**
   * tblTransfer delete
   */
  export type tblTransferDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
    /**
     * Filter which tblTransfer to delete.
     */
    where: tblTransferWhereUniqueInput
  }

  /**
   * tblTransfer deleteMany
   */
  export type tblTransferDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblTransfers to delete
     */
    where?: tblTransferWhereInput
    /**
     * Limit how many tblTransfers to delete.
     */
    limit?: number
  }

  /**
   * tblTransfer without action
   */
  export type tblTransferDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblTransfer
     */
    select?: tblTransferSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblTransfer
     */
    omit?: tblTransferOmit<ExtArgs> | null
  }


  /**
   * Model tblUserDepartmentAuth
   */

  export type AggregateTblUserDepartmentAuth = {
    _count: TblUserDepartmentAuthCountAggregateOutputType | null
    _avg: TblUserDepartmentAuthAvgAggregateOutputType | null
    _sum: TblUserDepartmentAuthSumAggregateOutputType | null
    _min: TblUserDepartmentAuthMinAggregateOutputType | null
    _max: TblUserDepartmentAuthMaxAggregateOutputType | null
  }

  export type TblUserDepartmentAuthAvgAggregateOutputType = {
    tblUserDepartmentAuthID: Decimal | null
    authiD: Decimal | null
  }

  export type TblUserDepartmentAuthSumAggregateOutputType = {
    tblUserDepartmentAuthID: Decimal | null
    authiD: Decimal | null
  }

  export type TblUserDepartmentAuthMinAggregateOutputType = {
    tblUserDepartmentAuthID: Decimal | null
    authiD: Decimal | null
    deptcode: string | null
    userid: string | null
    last_update: Date | null
  }

  export type TblUserDepartmentAuthMaxAggregateOutputType = {
    tblUserDepartmentAuthID: Decimal | null
    authiD: Decimal | null
    deptcode: string | null
    userid: string | null
    last_update: Date | null
  }

  export type TblUserDepartmentAuthCountAggregateOutputType = {
    tblUserDepartmentAuthID: number
    authiD: number
    deptcode: number
    userid: number
    last_update: number
    _all: number
  }


  export type TblUserDepartmentAuthAvgAggregateInputType = {
    tblUserDepartmentAuthID?: true
    authiD?: true
  }

  export type TblUserDepartmentAuthSumAggregateInputType = {
    tblUserDepartmentAuthID?: true
    authiD?: true
  }

  export type TblUserDepartmentAuthMinAggregateInputType = {
    tblUserDepartmentAuthID?: true
    authiD?: true
    deptcode?: true
    userid?: true
    last_update?: true
  }

  export type TblUserDepartmentAuthMaxAggregateInputType = {
    tblUserDepartmentAuthID?: true
    authiD?: true
    deptcode?: true
    userid?: true
    last_update?: true
  }

  export type TblUserDepartmentAuthCountAggregateInputType = {
    tblUserDepartmentAuthID?: true
    authiD?: true
    deptcode?: true
    userid?: true
    last_update?: true
    _all?: true
  }

  export type TblUserDepartmentAuthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblUserDepartmentAuth to aggregate.
     */
    where?: tblUserDepartmentAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserDepartmentAuths to fetch.
     */
    orderBy?: tblUserDepartmentAuthOrderByWithRelationInput | tblUserDepartmentAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblUserDepartmentAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserDepartmentAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserDepartmentAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblUserDepartmentAuths
    **/
    _count?: true | TblUserDepartmentAuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblUserDepartmentAuthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblUserDepartmentAuthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblUserDepartmentAuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblUserDepartmentAuthMaxAggregateInputType
  }

  export type GetTblUserDepartmentAuthAggregateType<T extends TblUserDepartmentAuthAggregateArgs> = {
        [P in keyof T & keyof AggregateTblUserDepartmentAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblUserDepartmentAuth[P]>
      : GetScalarType<T[P], AggregateTblUserDepartmentAuth[P]>
  }




  export type tblUserDepartmentAuthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblUserDepartmentAuthWhereInput
    orderBy?: tblUserDepartmentAuthOrderByWithAggregationInput | tblUserDepartmentAuthOrderByWithAggregationInput[]
    by: TblUserDepartmentAuthScalarFieldEnum[] | TblUserDepartmentAuthScalarFieldEnum
    having?: tblUserDepartmentAuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblUserDepartmentAuthCountAggregateInputType | true
    _avg?: TblUserDepartmentAuthAvgAggregateInputType
    _sum?: TblUserDepartmentAuthSumAggregateInputType
    _min?: TblUserDepartmentAuthMinAggregateInputType
    _max?: TblUserDepartmentAuthMaxAggregateInputType
  }

  export type TblUserDepartmentAuthGroupByOutputType = {
    tblUserDepartmentAuthID: Decimal
    authiD: Decimal | null
    deptcode: string | null
    userid: string | null
    last_update: Date | null
    _count: TblUserDepartmentAuthCountAggregateOutputType | null
    _avg: TblUserDepartmentAuthAvgAggregateOutputType | null
    _sum: TblUserDepartmentAuthSumAggregateOutputType | null
    _min: TblUserDepartmentAuthMinAggregateOutputType | null
    _max: TblUserDepartmentAuthMaxAggregateOutputType | null
  }

  type GetTblUserDepartmentAuthGroupByPayload<T extends tblUserDepartmentAuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblUserDepartmentAuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblUserDepartmentAuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblUserDepartmentAuthGroupByOutputType[P]>
            : GetScalarType<T[P], TblUserDepartmentAuthGroupByOutputType[P]>
        }
      >
    >


  export type tblUserDepartmentAuthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblUserDepartmentAuthID?: boolean
    authiD?: boolean
    deptcode?: boolean
    userid?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["tblUserDepartmentAuth"]>



  export type tblUserDepartmentAuthSelectScalar = {
    tblUserDepartmentAuthID?: boolean
    authiD?: boolean
    deptcode?: boolean
    userid?: boolean
    last_update?: boolean
  }

  export type tblUserDepartmentAuthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblUserDepartmentAuthID" | "authiD" | "deptcode" | "userid" | "last_update", ExtArgs["result"]["tblUserDepartmentAuth"]>

  export type $tblUserDepartmentAuthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblUserDepartmentAuth"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblUserDepartmentAuthID: Prisma.Decimal
      authiD: Prisma.Decimal | null
      deptcode: string | null
      userid: string | null
      last_update: Date | null
    }, ExtArgs["result"]["tblUserDepartmentAuth"]>
    composites: {}
  }

  type tblUserDepartmentAuthGetPayload<S extends boolean | null | undefined | tblUserDepartmentAuthDefaultArgs> = $Result.GetResult<Prisma.$tblUserDepartmentAuthPayload, S>

  type tblUserDepartmentAuthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblUserDepartmentAuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblUserDepartmentAuthCountAggregateInputType | true
    }

  export interface tblUserDepartmentAuthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblUserDepartmentAuth'], meta: { name: 'tblUserDepartmentAuth' } }
    /**
     * Find zero or one TblUserDepartmentAuth that matches the filter.
     * @param {tblUserDepartmentAuthFindUniqueArgs} args - Arguments to find a TblUserDepartmentAuth
     * @example
     * // Get one TblUserDepartmentAuth
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblUserDepartmentAuthFindUniqueArgs>(args: SelectSubset<T, tblUserDepartmentAuthFindUniqueArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblUserDepartmentAuth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblUserDepartmentAuthFindUniqueOrThrowArgs} args - Arguments to find a TblUserDepartmentAuth
     * @example
     * // Get one TblUserDepartmentAuth
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblUserDepartmentAuthFindUniqueOrThrowArgs>(args: SelectSubset<T, tblUserDepartmentAuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblUserDepartmentAuth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserDepartmentAuthFindFirstArgs} args - Arguments to find a TblUserDepartmentAuth
     * @example
     * // Get one TblUserDepartmentAuth
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblUserDepartmentAuthFindFirstArgs>(args?: SelectSubset<T, tblUserDepartmentAuthFindFirstArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblUserDepartmentAuth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserDepartmentAuthFindFirstOrThrowArgs} args - Arguments to find a TblUserDepartmentAuth
     * @example
     * // Get one TblUserDepartmentAuth
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblUserDepartmentAuthFindFirstOrThrowArgs>(args?: SelectSubset<T, tblUserDepartmentAuthFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblUserDepartmentAuths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserDepartmentAuthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblUserDepartmentAuths
     * const tblUserDepartmentAuths = await prisma.tblUserDepartmentAuth.findMany()
     * 
     * // Get first 10 TblUserDepartmentAuths
     * const tblUserDepartmentAuths = await prisma.tblUserDepartmentAuth.findMany({ take: 10 })
     * 
     * // Only select the `tblUserDepartmentAuthID`
     * const tblUserDepartmentAuthWithTblUserDepartmentAuthIDOnly = await prisma.tblUserDepartmentAuth.findMany({ select: { tblUserDepartmentAuthID: true } })
     * 
     */
    findMany<T extends tblUserDepartmentAuthFindManyArgs>(args?: SelectSubset<T, tblUserDepartmentAuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblUserDepartmentAuth.
     * @param {tblUserDepartmentAuthCreateArgs} args - Arguments to create a TblUserDepartmentAuth.
     * @example
     * // Create one TblUserDepartmentAuth
     * const TblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.create({
     *   data: {
     *     // ... data to create a TblUserDepartmentAuth
     *   }
     * })
     * 
     */
    create<T extends tblUserDepartmentAuthCreateArgs>(args: SelectSubset<T, tblUserDepartmentAuthCreateArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblUserDepartmentAuths.
     * @param {tblUserDepartmentAuthCreateManyArgs} args - Arguments to create many TblUserDepartmentAuths.
     * @example
     * // Create many TblUserDepartmentAuths
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblUserDepartmentAuthCreateManyArgs>(args?: SelectSubset<T, tblUserDepartmentAuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblUserDepartmentAuth.
     * @param {tblUserDepartmentAuthDeleteArgs} args - Arguments to delete one TblUserDepartmentAuth.
     * @example
     * // Delete one TblUserDepartmentAuth
     * const TblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.delete({
     *   where: {
     *     // ... filter to delete one TblUserDepartmentAuth
     *   }
     * })
     * 
     */
    delete<T extends tblUserDepartmentAuthDeleteArgs>(args: SelectSubset<T, tblUserDepartmentAuthDeleteArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblUserDepartmentAuth.
     * @param {tblUserDepartmentAuthUpdateArgs} args - Arguments to update one TblUserDepartmentAuth.
     * @example
     * // Update one TblUserDepartmentAuth
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblUserDepartmentAuthUpdateArgs>(args: SelectSubset<T, tblUserDepartmentAuthUpdateArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblUserDepartmentAuths.
     * @param {tblUserDepartmentAuthDeleteManyArgs} args - Arguments to filter TblUserDepartmentAuths to delete.
     * @example
     * // Delete a few TblUserDepartmentAuths
     * const { count } = await prisma.tblUserDepartmentAuth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblUserDepartmentAuthDeleteManyArgs>(args?: SelectSubset<T, tblUserDepartmentAuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblUserDepartmentAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserDepartmentAuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblUserDepartmentAuths
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblUserDepartmentAuthUpdateManyArgs>(args: SelectSubset<T, tblUserDepartmentAuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblUserDepartmentAuth.
     * @param {tblUserDepartmentAuthUpsertArgs} args - Arguments to update or create a TblUserDepartmentAuth.
     * @example
     * // Update or create a TblUserDepartmentAuth
     * const tblUserDepartmentAuth = await prisma.tblUserDepartmentAuth.upsert({
     *   create: {
     *     // ... data to create a TblUserDepartmentAuth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblUserDepartmentAuth we want to update
     *   }
     * })
     */
    upsert<T extends tblUserDepartmentAuthUpsertArgs>(args: SelectSubset<T, tblUserDepartmentAuthUpsertArgs<ExtArgs>>): Prisma__tblUserDepartmentAuthClient<$Result.GetResult<Prisma.$tblUserDepartmentAuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblUserDepartmentAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserDepartmentAuthCountArgs} args - Arguments to filter TblUserDepartmentAuths to count.
     * @example
     * // Count the number of TblUserDepartmentAuths
     * const count = await prisma.tblUserDepartmentAuth.count({
     *   where: {
     *     // ... the filter for the TblUserDepartmentAuths we want to count
     *   }
     * })
    **/
    count<T extends tblUserDepartmentAuthCountArgs>(
      args?: Subset<T, tblUserDepartmentAuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblUserDepartmentAuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblUserDepartmentAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblUserDepartmentAuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblUserDepartmentAuthAggregateArgs>(args: Subset<T, TblUserDepartmentAuthAggregateArgs>): Prisma.PrismaPromise<GetTblUserDepartmentAuthAggregateType<T>>

    /**
     * Group by TblUserDepartmentAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserDepartmentAuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblUserDepartmentAuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblUserDepartmentAuthGroupByArgs['orderBy'] }
        : { orderBy?: tblUserDepartmentAuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblUserDepartmentAuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblUserDepartmentAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblUserDepartmentAuth model
   */
  readonly fields: tblUserDepartmentAuthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblUserDepartmentAuth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblUserDepartmentAuthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblUserDepartmentAuth model
   */
  interface tblUserDepartmentAuthFieldRefs {
    readonly tblUserDepartmentAuthID: FieldRef<"tblUserDepartmentAuth", 'Decimal'>
    readonly authiD: FieldRef<"tblUserDepartmentAuth", 'Decimal'>
    readonly deptcode: FieldRef<"tblUserDepartmentAuth", 'String'>
    readonly userid: FieldRef<"tblUserDepartmentAuth", 'String'>
    readonly last_update: FieldRef<"tblUserDepartmentAuth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tblUserDepartmentAuth findUnique
   */
  export type tblUserDepartmentAuthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserDepartmentAuth to fetch.
     */
    where: tblUserDepartmentAuthWhereUniqueInput
  }

  /**
   * tblUserDepartmentAuth findUniqueOrThrow
   */
  export type tblUserDepartmentAuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserDepartmentAuth to fetch.
     */
    where: tblUserDepartmentAuthWhereUniqueInput
  }

  /**
   * tblUserDepartmentAuth findFirst
   */
  export type tblUserDepartmentAuthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserDepartmentAuth to fetch.
     */
    where?: tblUserDepartmentAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserDepartmentAuths to fetch.
     */
    orderBy?: tblUserDepartmentAuthOrderByWithRelationInput | tblUserDepartmentAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblUserDepartmentAuths.
     */
    cursor?: tblUserDepartmentAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserDepartmentAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserDepartmentAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblUserDepartmentAuths.
     */
    distinct?: TblUserDepartmentAuthScalarFieldEnum | TblUserDepartmentAuthScalarFieldEnum[]
  }

  /**
   * tblUserDepartmentAuth findFirstOrThrow
   */
  export type tblUserDepartmentAuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserDepartmentAuth to fetch.
     */
    where?: tblUserDepartmentAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserDepartmentAuths to fetch.
     */
    orderBy?: tblUserDepartmentAuthOrderByWithRelationInput | tblUserDepartmentAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblUserDepartmentAuths.
     */
    cursor?: tblUserDepartmentAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserDepartmentAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserDepartmentAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblUserDepartmentAuths.
     */
    distinct?: TblUserDepartmentAuthScalarFieldEnum | TblUserDepartmentAuthScalarFieldEnum[]
  }

  /**
   * tblUserDepartmentAuth findMany
   */
  export type tblUserDepartmentAuthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserDepartmentAuths to fetch.
     */
    where?: tblUserDepartmentAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserDepartmentAuths to fetch.
     */
    orderBy?: tblUserDepartmentAuthOrderByWithRelationInput | tblUserDepartmentAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblUserDepartmentAuths.
     */
    cursor?: tblUserDepartmentAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserDepartmentAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserDepartmentAuths.
     */
    skip?: number
    distinct?: TblUserDepartmentAuthScalarFieldEnum | TblUserDepartmentAuthScalarFieldEnum[]
  }

  /**
   * tblUserDepartmentAuth create
   */
  export type tblUserDepartmentAuthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * The data needed to create a tblUserDepartmentAuth.
     */
    data: XOR<tblUserDepartmentAuthCreateInput, tblUserDepartmentAuthUncheckedCreateInput>
  }

  /**
   * tblUserDepartmentAuth createMany
   */
  export type tblUserDepartmentAuthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblUserDepartmentAuths.
     */
    data: tblUserDepartmentAuthCreateManyInput | tblUserDepartmentAuthCreateManyInput[]
  }

  /**
   * tblUserDepartmentAuth update
   */
  export type tblUserDepartmentAuthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * The data needed to update a tblUserDepartmentAuth.
     */
    data: XOR<tblUserDepartmentAuthUpdateInput, tblUserDepartmentAuthUncheckedUpdateInput>
    /**
     * Choose, which tblUserDepartmentAuth to update.
     */
    where: tblUserDepartmentAuthWhereUniqueInput
  }

  /**
   * tblUserDepartmentAuth updateMany
   */
  export type tblUserDepartmentAuthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblUserDepartmentAuths.
     */
    data: XOR<tblUserDepartmentAuthUpdateManyMutationInput, tblUserDepartmentAuthUncheckedUpdateManyInput>
    /**
     * Filter which tblUserDepartmentAuths to update
     */
    where?: tblUserDepartmentAuthWhereInput
    /**
     * Limit how many tblUserDepartmentAuths to update.
     */
    limit?: number
  }

  /**
   * tblUserDepartmentAuth upsert
   */
  export type tblUserDepartmentAuthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * The filter to search for the tblUserDepartmentAuth to update in case it exists.
     */
    where: tblUserDepartmentAuthWhereUniqueInput
    /**
     * In case the tblUserDepartmentAuth found by the `where` argument doesn't exist, create a new tblUserDepartmentAuth with this data.
     */
    create: XOR<tblUserDepartmentAuthCreateInput, tblUserDepartmentAuthUncheckedCreateInput>
    /**
     * In case the tblUserDepartmentAuth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblUserDepartmentAuthUpdateInput, tblUserDepartmentAuthUncheckedUpdateInput>
  }

  /**
   * tblUserDepartmentAuth delete
   */
  export type tblUserDepartmentAuthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
    /**
     * Filter which tblUserDepartmentAuth to delete.
     */
    where: tblUserDepartmentAuthWhereUniqueInput
  }

  /**
   * tblUserDepartmentAuth deleteMany
   */
  export type tblUserDepartmentAuthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblUserDepartmentAuths to delete
     */
    where?: tblUserDepartmentAuthWhereInput
    /**
     * Limit how many tblUserDepartmentAuths to delete.
     */
    limit?: number
  }

  /**
   * tblUserDepartmentAuth without action
   */
  export type tblUserDepartmentAuthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserDepartmentAuth
     */
    select?: tblUserDepartmentAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserDepartmentAuth
     */
    omit?: tblUserDepartmentAuthOmit<ExtArgs> | null
  }


  /**
   * Model tblUserOverrideAuth
   */

  export type AggregateTblUserOverrideAuth = {
    _count: TblUserOverrideAuthCountAggregateOutputType | null
    _avg: TblUserOverrideAuthAvgAggregateOutputType | null
    _sum: TblUserOverrideAuthSumAggregateOutputType | null
    _min: TblUserOverrideAuthMinAggregateOutputType | null
    _max: TblUserOverrideAuthMaxAggregateOutputType | null
  }

  export type TblUserOverrideAuthAvgAggregateOutputType = {
    tblUserOverrideAuthID: Decimal | null
    appAuthID: Decimal | null
  }

  export type TblUserOverrideAuthSumAggregateOutputType = {
    tblUserOverrideAuthID: Decimal | null
    appAuthID: Decimal | null
  }

  export type TblUserOverrideAuthMinAggregateOutputType = {
    tblUserOverrideAuthID: Decimal | null
    appAuthID: Decimal | null
    userid: string | null
    last_update: Date | null
  }

  export type TblUserOverrideAuthMaxAggregateOutputType = {
    tblUserOverrideAuthID: Decimal | null
    appAuthID: Decimal | null
    userid: string | null
    last_update: Date | null
  }

  export type TblUserOverrideAuthCountAggregateOutputType = {
    tblUserOverrideAuthID: number
    appAuthID: number
    userid: number
    last_update: number
    _all: number
  }


  export type TblUserOverrideAuthAvgAggregateInputType = {
    tblUserOverrideAuthID?: true
    appAuthID?: true
  }

  export type TblUserOverrideAuthSumAggregateInputType = {
    tblUserOverrideAuthID?: true
    appAuthID?: true
  }

  export type TblUserOverrideAuthMinAggregateInputType = {
    tblUserOverrideAuthID?: true
    appAuthID?: true
    userid?: true
    last_update?: true
  }

  export type TblUserOverrideAuthMaxAggregateInputType = {
    tblUserOverrideAuthID?: true
    appAuthID?: true
    userid?: true
    last_update?: true
  }

  export type TblUserOverrideAuthCountAggregateInputType = {
    tblUserOverrideAuthID?: true
    appAuthID?: true
    userid?: true
    last_update?: true
    _all?: true
  }

  export type TblUserOverrideAuthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblUserOverrideAuth to aggregate.
     */
    where?: tblUserOverrideAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserOverrideAuths to fetch.
     */
    orderBy?: tblUserOverrideAuthOrderByWithRelationInput | tblUserOverrideAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblUserOverrideAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserOverrideAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserOverrideAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblUserOverrideAuths
    **/
    _count?: true | TblUserOverrideAuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblUserOverrideAuthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblUserOverrideAuthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblUserOverrideAuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblUserOverrideAuthMaxAggregateInputType
  }

  export type GetTblUserOverrideAuthAggregateType<T extends TblUserOverrideAuthAggregateArgs> = {
        [P in keyof T & keyof AggregateTblUserOverrideAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblUserOverrideAuth[P]>
      : GetScalarType<T[P], AggregateTblUserOverrideAuth[P]>
  }




  export type tblUserOverrideAuthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblUserOverrideAuthWhereInput
    orderBy?: tblUserOverrideAuthOrderByWithAggregationInput | tblUserOverrideAuthOrderByWithAggregationInput[]
    by: TblUserOverrideAuthScalarFieldEnum[] | TblUserOverrideAuthScalarFieldEnum
    having?: tblUserOverrideAuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblUserOverrideAuthCountAggregateInputType | true
    _avg?: TblUserOverrideAuthAvgAggregateInputType
    _sum?: TblUserOverrideAuthSumAggregateInputType
    _min?: TblUserOverrideAuthMinAggregateInputType
    _max?: TblUserOverrideAuthMaxAggregateInputType
  }

  export type TblUserOverrideAuthGroupByOutputType = {
    tblUserOverrideAuthID: Decimal
    appAuthID: Decimal | null
    userid: string | null
    last_update: Date | null
    _count: TblUserOverrideAuthCountAggregateOutputType | null
    _avg: TblUserOverrideAuthAvgAggregateOutputType | null
    _sum: TblUserOverrideAuthSumAggregateOutputType | null
    _min: TblUserOverrideAuthMinAggregateOutputType | null
    _max: TblUserOverrideAuthMaxAggregateOutputType | null
  }

  type GetTblUserOverrideAuthGroupByPayload<T extends tblUserOverrideAuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblUserOverrideAuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblUserOverrideAuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblUserOverrideAuthGroupByOutputType[P]>
            : GetScalarType<T[P], TblUserOverrideAuthGroupByOutputType[P]>
        }
      >
    >


  export type tblUserOverrideAuthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblUserOverrideAuthID?: boolean
    appAuthID?: boolean
    userid?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["tblUserOverrideAuth"]>



  export type tblUserOverrideAuthSelectScalar = {
    tblUserOverrideAuthID?: boolean
    appAuthID?: boolean
    userid?: boolean
    last_update?: boolean
  }

  export type tblUserOverrideAuthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblUserOverrideAuthID" | "appAuthID" | "userid" | "last_update", ExtArgs["result"]["tblUserOverrideAuth"]>

  export type $tblUserOverrideAuthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblUserOverrideAuth"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblUserOverrideAuthID: Prisma.Decimal
      appAuthID: Prisma.Decimal | null
      userid: string | null
      last_update: Date | null
    }, ExtArgs["result"]["tblUserOverrideAuth"]>
    composites: {}
  }

  type tblUserOverrideAuthGetPayload<S extends boolean | null | undefined | tblUserOverrideAuthDefaultArgs> = $Result.GetResult<Prisma.$tblUserOverrideAuthPayload, S>

  type tblUserOverrideAuthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblUserOverrideAuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblUserOverrideAuthCountAggregateInputType | true
    }

  export interface tblUserOverrideAuthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblUserOverrideAuth'], meta: { name: 'tblUserOverrideAuth' } }
    /**
     * Find zero or one TblUserOverrideAuth that matches the filter.
     * @param {tblUserOverrideAuthFindUniqueArgs} args - Arguments to find a TblUserOverrideAuth
     * @example
     * // Get one TblUserOverrideAuth
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblUserOverrideAuthFindUniqueArgs>(args: SelectSubset<T, tblUserOverrideAuthFindUniqueArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblUserOverrideAuth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblUserOverrideAuthFindUniqueOrThrowArgs} args - Arguments to find a TblUserOverrideAuth
     * @example
     * // Get one TblUserOverrideAuth
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblUserOverrideAuthFindUniqueOrThrowArgs>(args: SelectSubset<T, tblUserOverrideAuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblUserOverrideAuth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserOverrideAuthFindFirstArgs} args - Arguments to find a TblUserOverrideAuth
     * @example
     * // Get one TblUserOverrideAuth
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblUserOverrideAuthFindFirstArgs>(args?: SelectSubset<T, tblUserOverrideAuthFindFirstArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblUserOverrideAuth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserOverrideAuthFindFirstOrThrowArgs} args - Arguments to find a TblUserOverrideAuth
     * @example
     * // Get one TblUserOverrideAuth
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblUserOverrideAuthFindFirstOrThrowArgs>(args?: SelectSubset<T, tblUserOverrideAuthFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblUserOverrideAuths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserOverrideAuthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblUserOverrideAuths
     * const tblUserOverrideAuths = await prisma.tblUserOverrideAuth.findMany()
     * 
     * // Get first 10 TblUserOverrideAuths
     * const tblUserOverrideAuths = await prisma.tblUserOverrideAuth.findMany({ take: 10 })
     * 
     * // Only select the `tblUserOverrideAuthID`
     * const tblUserOverrideAuthWithTblUserOverrideAuthIDOnly = await prisma.tblUserOverrideAuth.findMany({ select: { tblUserOverrideAuthID: true } })
     * 
     */
    findMany<T extends tblUserOverrideAuthFindManyArgs>(args?: SelectSubset<T, tblUserOverrideAuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblUserOverrideAuth.
     * @param {tblUserOverrideAuthCreateArgs} args - Arguments to create a TblUserOverrideAuth.
     * @example
     * // Create one TblUserOverrideAuth
     * const TblUserOverrideAuth = await prisma.tblUserOverrideAuth.create({
     *   data: {
     *     // ... data to create a TblUserOverrideAuth
     *   }
     * })
     * 
     */
    create<T extends tblUserOverrideAuthCreateArgs>(args: SelectSubset<T, tblUserOverrideAuthCreateArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblUserOverrideAuths.
     * @param {tblUserOverrideAuthCreateManyArgs} args - Arguments to create many TblUserOverrideAuths.
     * @example
     * // Create many TblUserOverrideAuths
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblUserOverrideAuthCreateManyArgs>(args?: SelectSubset<T, tblUserOverrideAuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblUserOverrideAuth.
     * @param {tblUserOverrideAuthDeleteArgs} args - Arguments to delete one TblUserOverrideAuth.
     * @example
     * // Delete one TblUserOverrideAuth
     * const TblUserOverrideAuth = await prisma.tblUserOverrideAuth.delete({
     *   where: {
     *     // ... filter to delete one TblUserOverrideAuth
     *   }
     * })
     * 
     */
    delete<T extends tblUserOverrideAuthDeleteArgs>(args: SelectSubset<T, tblUserOverrideAuthDeleteArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblUserOverrideAuth.
     * @param {tblUserOverrideAuthUpdateArgs} args - Arguments to update one TblUserOverrideAuth.
     * @example
     * // Update one TblUserOverrideAuth
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblUserOverrideAuthUpdateArgs>(args: SelectSubset<T, tblUserOverrideAuthUpdateArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblUserOverrideAuths.
     * @param {tblUserOverrideAuthDeleteManyArgs} args - Arguments to filter TblUserOverrideAuths to delete.
     * @example
     * // Delete a few TblUserOverrideAuths
     * const { count } = await prisma.tblUserOverrideAuth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblUserOverrideAuthDeleteManyArgs>(args?: SelectSubset<T, tblUserOverrideAuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblUserOverrideAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserOverrideAuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblUserOverrideAuths
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblUserOverrideAuthUpdateManyArgs>(args: SelectSubset<T, tblUserOverrideAuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblUserOverrideAuth.
     * @param {tblUserOverrideAuthUpsertArgs} args - Arguments to update or create a TblUserOverrideAuth.
     * @example
     * // Update or create a TblUserOverrideAuth
     * const tblUserOverrideAuth = await prisma.tblUserOverrideAuth.upsert({
     *   create: {
     *     // ... data to create a TblUserOverrideAuth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblUserOverrideAuth we want to update
     *   }
     * })
     */
    upsert<T extends tblUserOverrideAuthUpsertArgs>(args: SelectSubset<T, tblUserOverrideAuthUpsertArgs<ExtArgs>>): Prisma__tblUserOverrideAuthClient<$Result.GetResult<Prisma.$tblUserOverrideAuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblUserOverrideAuths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserOverrideAuthCountArgs} args - Arguments to filter TblUserOverrideAuths to count.
     * @example
     * // Count the number of TblUserOverrideAuths
     * const count = await prisma.tblUserOverrideAuth.count({
     *   where: {
     *     // ... the filter for the TblUserOverrideAuths we want to count
     *   }
     * })
    **/
    count<T extends tblUserOverrideAuthCountArgs>(
      args?: Subset<T, tblUserOverrideAuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblUserOverrideAuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblUserOverrideAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblUserOverrideAuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblUserOverrideAuthAggregateArgs>(args: Subset<T, TblUserOverrideAuthAggregateArgs>): Prisma.PrismaPromise<GetTblUserOverrideAuthAggregateType<T>>

    /**
     * Group by TblUserOverrideAuth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUserOverrideAuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblUserOverrideAuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblUserOverrideAuthGroupByArgs['orderBy'] }
        : { orderBy?: tblUserOverrideAuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblUserOverrideAuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblUserOverrideAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblUserOverrideAuth model
   */
  readonly fields: tblUserOverrideAuthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblUserOverrideAuth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblUserOverrideAuthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblUserOverrideAuth model
   */
  interface tblUserOverrideAuthFieldRefs {
    readonly tblUserOverrideAuthID: FieldRef<"tblUserOverrideAuth", 'Decimal'>
    readonly appAuthID: FieldRef<"tblUserOverrideAuth", 'Decimal'>
    readonly userid: FieldRef<"tblUserOverrideAuth", 'String'>
    readonly last_update: FieldRef<"tblUserOverrideAuth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tblUserOverrideAuth findUnique
   */
  export type tblUserOverrideAuthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserOverrideAuth to fetch.
     */
    where: tblUserOverrideAuthWhereUniqueInput
  }

  /**
   * tblUserOverrideAuth findUniqueOrThrow
   */
  export type tblUserOverrideAuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserOverrideAuth to fetch.
     */
    where: tblUserOverrideAuthWhereUniqueInput
  }

  /**
   * tblUserOverrideAuth findFirst
   */
  export type tblUserOverrideAuthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserOverrideAuth to fetch.
     */
    where?: tblUserOverrideAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserOverrideAuths to fetch.
     */
    orderBy?: tblUserOverrideAuthOrderByWithRelationInput | tblUserOverrideAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblUserOverrideAuths.
     */
    cursor?: tblUserOverrideAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserOverrideAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserOverrideAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblUserOverrideAuths.
     */
    distinct?: TblUserOverrideAuthScalarFieldEnum | TblUserOverrideAuthScalarFieldEnum[]
  }

  /**
   * tblUserOverrideAuth findFirstOrThrow
   */
  export type tblUserOverrideAuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserOverrideAuth to fetch.
     */
    where?: tblUserOverrideAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserOverrideAuths to fetch.
     */
    orderBy?: tblUserOverrideAuthOrderByWithRelationInput | tblUserOverrideAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblUserOverrideAuths.
     */
    cursor?: tblUserOverrideAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserOverrideAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserOverrideAuths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblUserOverrideAuths.
     */
    distinct?: TblUserOverrideAuthScalarFieldEnum | TblUserOverrideAuthScalarFieldEnum[]
  }

  /**
   * tblUserOverrideAuth findMany
   */
  export type tblUserOverrideAuthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * Filter, which tblUserOverrideAuths to fetch.
     */
    where?: tblUserOverrideAuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUserOverrideAuths to fetch.
     */
    orderBy?: tblUserOverrideAuthOrderByWithRelationInput | tblUserOverrideAuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblUserOverrideAuths.
     */
    cursor?: tblUserOverrideAuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUserOverrideAuths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUserOverrideAuths.
     */
    skip?: number
    distinct?: TblUserOverrideAuthScalarFieldEnum | TblUserOverrideAuthScalarFieldEnum[]
  }

  /**
   * tblUserOverrideAuth create
   */
  export type tblUserOverrideAuthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * The data needed to create a tblUserOverrideAuth.
     */
    data: XOR<tblUserOverrideAuthCreateInput, tblUserOverrideAuthUncheckedCreateInput>
  }

  /**
   * tblUserOverrideAuth createMany
   */
  export type tblUserOverrideAuthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblUserOverrideAuths.
     */
    data: tblUserOverrideAuthCreateManyInput | tblUserOverrideAuthCreateManyInput[]
  }

  /**
   * tblUserOverrideAuth update
   */
  export type tblUserOverrideAuthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * The data needed to update a tblUserOverrideAuth.
     */
    data: XOR<tblUserOverrideAuthUpdateInput, tblUserOverrideAuthUncheckedUpdateInput>
    /**
     * Choose, which tblUserOverrideAuth to update.
     */
    where: tblUserOverrideAuthWhereUniqueInput
  }

  /**
   * tblUserOverrideAuth updateMany
   */
  export type tblUserOverrideAuthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblUserOverrideAuths.
     */
    data: XOR<tblUserOverrideAuthUpdateManyMutationInput, tblUserOverrideAuthUncheckedUpdateManyInput>
    /**
     * Filter which tblUserOverrideAuths to update
     */
    where?: tblUserOverrideAuthWhereInput
    /**
     * Limit how many tblUserOverrideAuths to update.
     */
    limit?: number
  }

  /**
   * tblUserOverrideAuth upsert
   */
  export type tblUserOverrideAuthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * The filter to search for the tblUserOverrideAuth to update in case it exists.
     */
    where: tblUserOverrideAuthWhereUniqueInput
    /**
     * In case the tblUserOverrideAuth found by the `where` argument doesn't exist, create a new tblUserOverrideAuth with this data.
     */
    create: XOR<tblUserOverrideAuthCreateInput, tblUserOverrideAuthUncheckedCreateInput>
    /**
     * In case the tblUserOverrideAuth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblUserOverrideAuthUpdateInput, tblUserOverrideAuthUncheckedUpdateInput>
  }

  /**
   * tblUserOverrideAuth delete
   */
  export type tblUserOverrideAuthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
    /**
     * Filter which tblUserOverrideAuth to delete.
     */
    where: tblUserOverrideAuthWhereUniqueInput
  }

  /**
   * tblUserOverrideAuth deleteMany
   */
  export type tblUserOverrideAuthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblUserOverrideAuths to delete
     */
    where?: tblUserOverrideAuthWhereInput
    /**
     * Limit how many tblUserOverrideAuths to delete.
     */
    limit?: number
  }

  /**
   * tblUserOverrideAuth without action
   */
  export type tblUserOverrideAuthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUserOverrideAuth
     */
    select?: tblUserOverrideAuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUserOverrideAuth
     */
    omit?: tblUserOverrideAuthOmit<ExtArgs> | null
  }


  /**
   * Model Prompt
   */

  export type AggregatePrompt = {
    _count: PromptCountAggregateOutputType | null
    _min: PromptMinAggregateOutputType | null
    _max: PromptMaxAggregateOutputType | null
  }

  export type PromptMinAggregateOutputType = {
    id: string | null
    text: string | null
    intent: string | null
    parameters: string | null
    hasAction: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type PromptMaxAggregateOutputType = {
    id: string | null
    text: string | null
    intent: string | null
    parameters: string | null
    hasAction: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type PromptCountAggregateOutputType = {
    id: number
    text: number
    intent: number
    parameters: number
    hasAction: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type PromptMinAggregateInputType = {
    id?: true
    text?: true
    intent?: true
    parameters?: true
    hasAction?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type PromptMaxAggregateInputType = {
    id?: true
    text?: true
    intent?: true
    parameters?: true
    hasAction?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type PromptCountAggregateInputType = {
    id?: true
    text?: true
    intent?: true
    parameters?: true
    hasAction?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type PromptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prompt to aggregate.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prompts
    **/
    _count?: true | PromptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromptMaxAggregateInputType
  }

  export type GetPromptAggregateType<T extends PromptAggregateArgs> = {
        [P in keyof T & keyof AggregatePrompt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrompt[P]>
      : GetScalarType<T[P], AggregatePrompt[P]>
  }




  export type PromptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptWhereInput
    orderBy?: PromptOrderByWithAggregationInput | PromptOrderByWithAggregationInput[]
    by: PromptScalarFieldEnum[] | PromptScalarFieldEnum
    having?: PromptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromptCountAggregateInputType | true
    _min?: PromptMinAggregateInputType
    _max?: PromptMaxAggregateInputType
  }

  export type PromptGroupByOutputType = {
    id: string
    text: string
    intent: string | null
    parameters: string | null
    hasAction: boolean
    createdAt: Date
    updatedAt: Date
    userId: string | null
    _count: PromptCountAggregateOutputType | null
    _min: PromptMinAggregateOutputType | null
    _max: PromptMaxAggregateOutputType | null
  }

  type GetPromptGroupByPayload<T extends PromptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromptGroupByOutputType[P]>
            : GetScalarType<T[P], PromptGroupByOutputType[P]>
        }
      >
    >


  export type PromptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    intent?: boolean
    parameters?: boolean
    hasAction?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    User?: boolean | Prompt$UserArgs<ExtArgs>
  }, ExtArgs["result"]["prompt"]>



  export type PromptSelectScalar = {
    id?: boolean
    text?: boolean
    intent?: boolean
    parameters?: boolean
    hasAction?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type PromptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "intent" | "parameters" | "hasAction" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["prompt"]>
  export type PromptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Prompt$UserArgs<ExtArgs>
  }

  export type $PromptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prompt"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      intent: string | null
      parameters: string | null
      hasAction: boolean
      createdAt: Date
      updatedAt: Date
      userId: string | null
    }, ExtArgs["result"]["prompt"]>
    composites: {}
  }

  type PromptGetPayload<S extends boolean | null | undefined | PromptDefaultArgs> = $Result.GetResult<Prisma.$PromptPayload, S>

  type PromptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromptCountAggregateInputType | true
    }

  export interface PromptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prompt'], meta: { name: 'Prompt' } }
    /**
     * Find zero or one Prompt that matches the filter.
     * @param {PromptFindUniqueArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromptFindUniqueArgs>(args: SelectSubset<T, PromptFindUniqueArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Prompt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromptFindUniqueOrThrowArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromptFindUniqueOrThrowArgs>(args: SelectSubset<T, PromptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prompt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindFirstArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromptFindFirstArgs>(args?: SelectSubset<T, PromptFindFirstArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prompt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindFirstOrThrowArgs} args - Arguments to find a Prompt
     * @example
     * // Get one Prompt
     * const prompt = await prisma.prompt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromptFindFirstOrThrowArgs>(args?: SelectSubset<T, PromptFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Prompts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prompts
     * const prompts = await prisma.prompt.findMany()
     * 
     * // Get first 10 Prompts
     * const prompts = await prisma.prompt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promptWithIdOnly = await prisma.prompt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromptFindManyArgs>(args?: SelectSubset<T, PromptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Prompt.
     * @param {PromptCreateArgs} args - Arguments to create a Prompt.
     * @example
     * // Create one Prompt
     * const Prompt = await prisma.prompt.create({
     *   data: {
     *     // ... data to create a Prompt
     *   }
     * })
     * 
     */
    create<T extends PromptCreateArgs>(args: SelectSubset<T, PromptCreateArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Prompts.
     * @param {PromptCreateManyArgs} args - Arguments to create many Prompts.
     * @example
     * // Create many Prompts
     * const prompt = await prisma.prompt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromptCreateManyArgs>(args?: SelectSubset<T, PromptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Prompt.
     * @param {PromptDeleteArgs} args - Arguments to delete one Prompt.
     * @example
     * // Delete one Prompt
     * const Prompt = await prisma.prompt.delete({
     *   where: {
     *     // ... filter to delete one Prompt
     *   }
     * })
     * 
     */
    delete<T extends PromptDeleteArgs>(args: SelectSubset<T, PromptDeleteArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Prompt.
     * @param {PromptUpdateArgs} args - Arguments to update one Prompt.
     * @example
     * // Update one Prompt
     * const prompt = await prisma.prompt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromptUpdateArgs>(args: SelectSubset<T, PromptUpdateArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Prompts.
     * @param {PromptDeleteManyArgs} args - Arguments to filter Prompts to delete.
     * @example
     * // Delete a few Prompts
     * const { count } = await prisma.prompt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromptDeleteManyArgs>(args?: SelectSubset<T, PromptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prompts
     * const prompt = await prisma.prompt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromptUpdateManyArgs>(args: SelectSubset<T, PromptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prompt.
     * @param {PromptUpsertArgs} args - Arguments to update or create a Prompt.
     * @example
     * // Update or create a Prompt
     * const prompt = await prisma.prompt.upsert({
     *   create: {
     *     // ... data to create a Prompt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prompt we want to update
     *   }
     * })
     */
    upsert<T extends PromptUpsertArgs>(args: SelectSubset<T, PromptUpsertArgs<ExtArgs>>): Prisma__PromptClient<$Result.GetResult<Prisma.$PromptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Prompts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptCountArgs} args - Arguments to filter Prompts to count.
     * @example
     * // Count the number of Prompts
     * const count = await prisma.prompt.count({
     *   where: {
     *     // ... the filter for the Prompts we want to count
     *   }
     * })
    **/
    count<T extends PromptCountArgs>(
      args?: Subset<T, PromptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromptAggregateArgs>(args: Subset<T, PromptAggregateArgs>): Prisma.PrismaPromise<GetPromptAggregateType<T>>

    /**
     * Group by Prompt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromptGroupByArgs['orderBy'] }
        : { orderBy?: PromptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prompt model
   */
  readonly fields: PromptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prompt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Prompt$UserArgs<ExtArgs> = {}>(args?: Subset<T, Prompt$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prompt model
   */
  interface PromptFieldRefs {
    readonly id: FieldRef<"Prompt", 'String'>
    readonly text: FieldRef<"Prompt", 'String'>
    readonly intent: FieldRef<"Prompt", 'String'>
    readonly parameters: FieldRef<"Prompt", 'String'>
    readonly hasAction: FieldRef<"Prompt", 'Boolean'>
    readonly createdAt: FieldRef<"Prompt", 'DateTime'>
    readonly updatedAt: FieldRef<"Prompt", 'DateTime'>
    readonly userId: FieldRef<"Prompt", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Prompt findUnique
   */
  export type PromptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt findUniqueOrThrow
   */
  export type PromptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt findFirst
   */
  export type PromptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prompts.
     */
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }

  /**
   * Prompt findFirstOrThrow
   */
  export type PromptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompt to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prompts.
     */
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }

  /**
   * Prompt findMany
   */
  export type PromptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter, which Prompts to fetch.
     */
    where?: PromptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prompts to fetch.
     */
    orderBy?: PromptOrderByWithRelationInput | PromptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prompts.
     */
    cursor?: PromptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prompts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prompts.
     */
    skip?: number
    distinct?: PromptScalarFieldEnum | PromptScalarFieldEnum[]
  }

  /**
   * Prompt create
   */
  export type PromptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * The data needed to create a Prompt.
     */
    data: XOR<PromptCreateInput, PromptUncheckedCreateInput>
  }

  /**
   * Prompt createMany
   */
  export type PromptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prompts.
     */
    data: PromptCreateManyInput | PromptCreateManyInput[]
  }

  /**
   * Prompt update
   */
  export type PromptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * The data needed to update a Prompt.
     */
    data: XOR<PromptUpdateInput, PromptUncheckedUpdateInput>
    /**
     * Choose, which Prompt to update.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt updateMany
   */
  export type PromptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prompts.
     */
    data: XOR<PromptUpdateManyMutationInput, PromptUncheckedUpdateManyInput>
    /**
     * Filter which Prompts to update
     */
    where?: PromptWhereInput
    /**
     * Limit how many Prompts to update.
     */
    limit?: number
  }

  /**
   * Prompt upsert
   */
  export type PromptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * The filter to search for the Prompt to update in case it exists.
     */
    where: PromptWhereUniqueInput
    /**
     * In case the Prompt found by the `where` argument doesn't exist, create a new Prompt with this data.
     */
    create: XOR<PromptCreateInput, PromptUncheckedCreateInput>
    /**
     * In case the Prompt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromptUpdateInput, PromptUncheckedUpdateInput>
  }

  /**
   * Prompt delete
   */
  export type PromptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
    /**
     * Filter which Prompt to delete.
     */
    where: PromptWhereUniqueInput
  }

  /**
   * Prompt deleteMany
   */
  export type PromptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prompts to delete
     */
    where?: PromptWhereInput
    /**
     * Limit how many Prompts to delete.
     */
    limit?: number
  }

  /**
   * Prompt.User
   */
  export type Prompt$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Prompt without action
   */
  export type PromptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prompt
     */
    select?: PromptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prompt
     */
    omit?: PromptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromptInclude<ExtArgs> | null
  }


  /**
   * Model tblUsers
   */

  export type AggregateTblUsers = {
    _count: TblUsersCountAggregateOutputType | null
    _avg: TblUsersAvgAggregateOutputType | null
    _sum: TblUsersSumAggregateOutputType | null
    _min: TblUsersMinAggregateOutputType | null
    _max: TblUsersMaxAggregateOutputType | null
  }

  export type TblUsersAvgAggregateOutputType = {
    tblUsersID: Decimal | null
  }

  export type TblUsersSumAggregateOutputType = {
    tblUsersID: Decimal | null
  }

  export type TblUsersMinAggregateOutputType = {
    tblUsersID: Decimal | null
    userid: string | null
    password: string | null
    name: string | null
    deptcode: string | null
    date: Date | null
  }

  export type TblUsersMaxAggregateOutputType = {
    tblUsersID: Decimal | null
    userid: string | null
    password: string | null
    name: string | null
    deptcode: string | null
    date: Date | null
  }

  export type TblUsersCountAggregateOutputType = {
    tblUsersID: number
    userid: number
    password: number
    name: number
    deptcode: number
    date: number
    _all: number
  }


  export type TblUsersAvgAggregateInputType = {
    tblUsersID?: true
  }

  export type TblUsersSumAggregateInputType = {
    tblUsersID?: true
  }

  export type TblUsersMinAggregateInputType = {
    tblUsersID?: true
    userid?: true
    password?: true
    name?: true
    deptcode?: true
    date?: true
  }

  export type TblUsersMaxAggregateInputType = {
    tblUsersID?: true
    userid?: true
    password?: true
    name?: true
    deptcode?: true
    date?: true
  }

  export type TblUsersCountAggregateInputType = {
    tblUsersID?: true
    userid?: true
    password?: true
    name?: true
    deptcode?: true
    date?: true
    _all?: true
  }

  export type TblUsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblUsers to aggregate.
     */
    where?: tblUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUsers to fetch.
     */
    orderBy?: tblUsersOrderByWithRelationInput | tblUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tblUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tblUsers
    **/
    _count?: true | TblUsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TblUsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TblUsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TblUsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TblUsersMaxAggregateInputType
  }

  export type GetTblUsersAggregateType<T extends TblUsersAggregateArgs> = {
        [P in keyof T & keyof AggregateTblUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTblUsers[P]>
      : GetScalarType<T[P], AggregateTblUsers[P]>
  }




  export type tblUsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tblUsersWhereInput
    orderBy?: tblUsersOrderByWithAggregationInput | tblUsersOrderByWithAggregationInput[]
    by: TblUsersScalarFieldEnum[] | TblUsersScalarFieldEnum
    having?: tblUsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TblUsersCountAggregateInputType | true
    _avg?: TblUsersAvgAggregateInputType
    _sum?: TblUsersSumAggregateInputType
    _min?: TblUsersMinAggregateInputType
    _max?: TblUsersMaxAggregateInputType
  }

  export type TblUsersGroupByOutputType = {
    tblUsersID: Decimal
    userid: string | null
    password: string | null
    name: string | null
    deptcode: string | null
    date: Date | null
    _count: TblUsersCountAggregateOutputType | null
    _avg: TblUsersAvgAggregateOutputType | null
    _sum: TblUsersSumAggregateOutputType | null
    _min: TblUsersMinAggregateOutputType | null
    _max: TblUsersMaxAggregateOutputType | null
  }

  type GetTblUsersGroupByPayload<T extends tblUsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TblUsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TblUsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TblUsersGroupByOutputType[P]>
            : GetScalarType<T[P], TblUsersGroupByOutputType[P]>
        }
      >
    >


  export type tblUsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tblUsersID?: boolean
    userid?: boolean
    password?: boolean
    name?: boolean
    deptcode?: boolean
    date?: boolean
  }, ExtArgs["result"]["tblUsers"]>



  export type tblUsersSelectScalar = {
    tblUsersID?: boolean
    userid?: boolean
    password?: boolean
    name?: boolean
    deptcode?: boolean
    date?: boolean
  }

  export type tblUsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"tblUsersID" | "userid" | "password" | "name" | "deptcode" | "date", ExtArgs["result"]["tblUsers"]>

  export type $tblUsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tblUsers"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tblUsersID: Prisma.Decimal
      userid: string | null
      password: string | null
      name: string | null
      deptcode: string | null
      date: Date | null
    }, ExtArgs["result"]["tblUsers"]>
    composites: {}
  }

  type tblUsersGetPayload<S extends boolean | null | undefined | tblUsersDefaultArgs> = $Result.GetResult<Prisma.$tblUsersPayload, S>

  type tblUsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tblUsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TblUsersCountAggregateInputType | true
    }

  export interface tblUsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tblUsers'], meta: { name: 'tblUsers' } }
    /**
     * Find zero or one TblUsers that matches the filter.
     * @param {tblUsersFindUniqueArgs} args - Arguments to find a TblUsers
     * @example
     * // Get one TblUsers
     * const tblUsers = await prisma.tblUsers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tblUsersFindUniqueArgs>(args: SelectSubset<T, tblUsersFindUniqueArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TblUsers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tblUsersFindUniqueOrThrowArgs} args - Arguments to find a TblUsers
     * @example
     * // Get one TblUsers
     * const tblUsers = await prisma.tblUsers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tblUsersFindUniqueOrThrowArgs>(args: SelectSubset<T, tblUsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUsersFindFirstArgs} args - Arguments to find a TblUsers
     * @example
     * // Get one TblUsers
     * const tblUsers = await prisma.tblUsers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tblUsersFindFirstArgs>(args?: SelectSubset<T, tblUsersFindFirstArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TblUsers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUsersFindFirstOrThrowArgs} args - Arguments to find a TblUsers
     * @example
     * // Get one TblUsers
     * const tblUsers = await prisma.tblUsers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tblUsersFindFirstOrThrowArgs>(args?: SelectSubset<T, tblUsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TblUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TblUsers
     * const tblUsers = await prisma.tblUsers.findMany()
     * 
     * // Get first 10 TblUsers
     * const tblUsers = await prisma.tblUsers.findMany({ take: 10 })
     * 
     * // Only select the `tblUsersID`
     * const tblUsersWithTblUsersIDOnly = await prisma.tblUsers.findMany({ select: { tblUsersID: true } })
     * 
     */
    findMany<T extends tblUsersFindManyArgs>(args?: SelectSubset<T, tblUsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TblUsers.
     * @param {tblUsersCreateArgs} args - Arguments to create a TblUsers.
     * @example
     * // Create one TblUsers
     * const TblUsers = await prisma.tblUsers.create({
     *   data: {
     *     // ... data to create a TblUsers
     *   }
     * })
     * 
     */
    create<T extends tblUsersCreateArgs>(args: SelectSubset<T, tblUsersCreateArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TblUsers.
     * @param {tblUsersCreateManyArgs} args - Arguments to create many TblUsers.
     * @example
     * // Create many TblUsers
     * const tblUsers = await prisma.tblUsers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tblUsersCreateManyArgs>(args?: SelectSubset<T, tblUsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TblUsers.
     * @param {tblUsersDeleteArgs} args - Arguments to delete one TblUsers.
     * @example
     * // Delete one TblUsers
     * const TblUsers = await prisma.tblUsers.delete({
     *   where: {
     *     // ... filter to delete one TblUsers
     *   }
     * })
     * 
     */
    delete<T extends tblUsersDeleteArgs>(args: SelectSubset<T, tblUsersDeleteArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TblUsers.
     * @param {tblUsersUpdateArgs} args - Arguments to update one TblUsers.
     * @example
     * // Update one TblUsers
     * const tblUsers = await prisma.tblUsers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tblUsersUpdateArgs>(args: SelectSubset<T, tblUsersUpdateArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TblUsers.
     * @param {tblUsersDeleteManyArgs} args - Arguments to filter TblUsers to delete.
     * @example
     * // Delete a few TblUsers
     * const { count } = await prisma.tblUsers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tblUsersDeleteManyArgs>(args?: SelectSubset<T, tblUsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TblUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TblUsers
     * const tblUsers = await prisma.tblUsers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tblUsersUpdateManyArgs>(args: SelectSubset<T, tblUsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TblUsers.
     * @param {tblUsersUpsertArgs} args - Arguments to update or create a TblUsers.
     * @example
     * // Update or create a TblUsers
     * const tblUsers = await prisma.tblUsers.upsert({
     *   create: {
     *     // ... data to create a TblUsers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TblUsers we want to update
     *   }
     * })
     */
    upsert<T extends tblUsersUpsertArgs>(args: SelectSubset<T, tblUsersUpsertArgs<ExtArgs>>): Prisma__tblUsersClient<$Result.GetResult<Prisma.$tblUsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TblUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUsersCountArgs} args - Arguments to filter TblUsers to count.
     * @example
     * // Count the number of TblUsers
     * const count = await prisma.tblUsers.count({
     *   where: {
     *     // ... the filter for the TblUsers we want to count
     *   }
     * })
    **/
    count<T extends tblUsersCountArgs>(
      args?: Subset<T, tblUsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TblUsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TblUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TblUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TblUsersAggregateArgs>(args: Subset<T, TblUsersAggregateArgs>): Prisma.PrismaPromise<GetTblUsersAggregateType<T>>

    /**
     * Group by TblUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tblUsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tblUsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tblUsersGroupByArgs['orderBy'] }
        : { orderBy?: tblUsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tblUsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTblUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tblUsers model
   */
  readonly fields: tblUsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tblUsers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tblUsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tblUsers model
   */
  interface tblUsersFieldRefs {
    readonly tblUsersID: FieldRef<"tblUsers", 'Decimal'>
    readonly userid: FieldRef<"tblUsers", 'String'>
    readonly password: FieldRef<"tblUsers", 'String'>
    readonly name: FieldRef<"tblUsers", 'String'>
    readonly deptcode: FieldRef<"tblUsers", 'String'>
    readonly date: FieldRef<"tblUsers", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tblUsers findUnique
   */
  export type tblUsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * Filter, which tblUsers to fetch.
     */
    where: tblUsersWhereUniqueInput
  }

  /**
   * tblUsers findUniqueOrThrow
   */
  export type tblUsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * Filter, which tblUsers to fetch.
     */
    where: tblUsersWhereUniqueInput
  }

  /**
   * tblUsers findFirst
   */
  export type tblUsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * Filter, which tblUsers to fetch.
     */
    where?: tblUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUsers to fetch.
     */
    orderBy?: tblUsersOrderByWithRelationInput | tblUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblUsers.
     */
    cursor?: tblUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblUsers.
     */
    distinct?: TblUsersScalarFieldEnum | TblUsersScalarFieldEnum[]
  }

  /**
   * tblUsers findFirstOrThrow
   */
  export type tblUsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * Filter, which tblUsers to fetch.
     */
    where?: tblUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUsers to fetch.
     */
    orderBy?: tblUsersOrderByWithRelationInput | tblUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tblUsers.
     */
    cursor?: tblUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tblUsers.
     */
    distinct?: TblUsersScalarFieldEnum | TblUsersScalarFieldEnum[]
  }

  /**
   * tblUsers findMany
   */
  export type tblUsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * Filter, which tblUsers to fetch.
     */
    where?: tblUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tblUsers to fetch.
     */
    orderBy?: tblUsersOrderByWithRelationInput | tblUsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tblUsers.
     */
    cursor?: tblUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tblUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tblUsers.
     */
    skip?: number
    distinct?: TblUsersScalarFieldEnum | TblUsersScalarFieldEnum[]
  }

  /**
   * tblUsers create
   */
  export type tblUsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * The data needed to create a tblUsers.
     */
    data: XOR<tblUsersCreateInput, tblUsersUncheckedCreateInput>
  }

  /**
   * tblUsers createMany
   */
  export type tblUsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tblUsers.
     */
    data: tblUsersCreateManyInput | tblUsersCreateManyInput[]
  }

  /**
   * tblUsers update
   */
  export type tblUsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * The data needed to update a tblUsers.
     */
    data: XOR<tblUsersUpdateInput, tblUsersUncheckedUpdateInput>
    /**
     * Choose, which tblUsers to update.
     */
    where: tblUsersWhereUniqueInput
  }

  /**
   * tblUsers updateMany
   */
  export type tblUsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tblUsers.
     */
    data: XOR<tblUsersUpdateManyMutationInput, tblUsersUncheckedUpdateManyInput>
    /**
     * Filter which tblUsers to update
     */
    where?: tblUsersWhereInput
    /**
     * Limit how many tblUsers to update.
     */
    limit?: number
  }

  /**
   * tblUsers upsert
   */
  export type tblUsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * The filter to search for the tblUsers to update in case it exists.
     */
    where: tblUsersWhereUniqueInput
    /**
     * In case the tblUsers found by the `where` argument doesn't exist, create a new tblUsers with this data.
     */
    create: XOR<tblUsersCreateInput, tblUsersUncheckedCreateInput>
    /**
     * In case the tblUsers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tblUsersUpdateInput, tblUsersUncheckedUpdateInput>
  }

  /**
   * tblUsers delete
   */
  export type tblUsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
    /**
     * Filter which tblUsers to delete.
     */
    where: tblUsersWhereUniqueInput
  }

  /**
   * tblUsers deleteMany
   */
  export type tblUsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tblUsers to delete
     */
    where?: tblUsersWhereInput
    /**
     * Limit how many tblUsers to delete.
     */
    limit?: number
  }

  /**
   * tblUsers without action
   */
  export type tblUsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tblUsers
     */
    select?: tblUsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tblUsers
     */
    omit?: tblUsersOmit<ExtArgs> | null
  }


  /**
   * Model VitalSign
   */

  export type AggregateVitalSign = {
    _count: VitalSignCountAggregateOutputType | null
    _min: VitalSignMinAggregateOutputType | null
    _max: VitalSignMaxAggregateOutputType | null
  }

  export type VitalSignMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    bp: string | null
    height: string | null
    temp: string | null
    spo2: string | null
    weight: string | null
    hr: string | null
    rbs: string | null
    rr: string | null
    timeVs: Date | null
    allergies: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VitalSignMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    bp: string | null
    height: string | null
    temp: string | null
    spo2: string | null
    weight: string | null
    hr: string | null
    rbs: string | null
    rr: string | null
    timeVs: Date | null
    allergies: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VitalSignCountAggregateOutputType = {
    id: number
    patientId: number
    bp: number
    height: number
    temp: number
    spo2: number
    weight: number
    hr: number
    rbs: number
    rr: number
    timeVs: number
    allergies: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VitalSignMinAggregateInputType = {
    id?: true
    patientId?: true
    bp?: true
    height?: true
    temp?: true
    spo2?: true
    weight?: true
    hr?: true
    rbs?: true
    rr?: true
    timeVs?: true
    allergies?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VitalSignMaxAggregateInputType = {
    id?: true
    patientId?: true
    bp?: true
    height?: true
    temp?: true
    spo2?: true
    weight?: true
    hr?: true
    rbs?: true
    rr?: true
    timeVs?: true
    allergies?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VitalSignCountAggregateInputType = {
    id?: true
    patientId?: true
    bp?: true
    height?: true
    temp?: true
    spo2?: true
    weight?: true
    hr?: true
    rbs?: true
    rr?: true
    timeVs?: true
    allergies?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VitalSignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VitalSign to aggregate.
     */
    where?: VitalSignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: VitalSignOrderByWithRelationInput | VitalSignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VitalSignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VitalSigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VitalSigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VitalSigns
    **/
    _count?: true | VitalSignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VitalSignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VitalSignMaxAggregateInputType
  }

  export type GetVitalSignAggregateType<T extends VitalSignAggregateArgs> = {
        [P in keyof T & keyof AggregateVitalSign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVitalSign[P]>
      : GetScalarType<T[P], AggregateVitalSign[P]>
  }




  export type VitalSignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VitalSignWhereInput
    orderBy?: VitalSignOrderByWithAggregationInput | VitalSignOrderByWithAggregationInput[]
    by: VitalSignScalarFieldEnum[] | VitalSignScalarFieldEnum
    having?: VitalSignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VitalSignCountAggregateInputType | true
    _min?: VitalSignMinAggregateInputType
    _max?: VitalSignMaxAggregateInputType
  }

  export type VitalSignGroupByOutputType = {
    id: string
    patientId: string | null
    bp: string | null
    height: string | null
    temp: string | null
    spo2: string | null
    weight: string | null
    hr: string | null
    rbs: string | null
    rr: string | null
    timeVs: Date | null
    allergies: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: VitalSignCountAggregateOutputType | null
    _min: VitalSignMinAggregateOutputType | null
    _max: VitalSignMaxAggregateOutputType | null
  }

  type GetVitalSignGroupByPayload<T extends VitalSignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VitalSignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VitalSignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VitalSignGroupByOutputType[P]>
            : GetScalarType<T[P], VitalSignGroupByOutputType[P]>
        }
      >
    >


  export type VitalSignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    bp?: boolean
    height?: boolean
    temp?: boolean
    spo2?: boolean
    weight?: boolean
    hr?: boolean
    rbs?: boolean
    rr?: boolean
    timeVs?: boolean
    allergies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Patient?: boolean | VitalSign$PatientArgs<ExtArgs>
  }, ExtArgs["result"]["vitalSign"]>



  export type VitalSignSelectScalar = {
    id?: boolean
    patientId?: boolean
    bp?: boolean
    height?: boolean
    temp?: boolean
    spo2?: boolean
    weight?: boolean
    hr?: boolean
    rbs?: boolean
    rr?: boolean
    timeVs?: boolean
    allergies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VitalSignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "bp" | "height" | "temp" | "spo2" | "weight" | "hr" | "rbs" | "rr" | "timeVs" | "allergies" | "createdAt" | "updatedAt", ExtArgs["result"]["vitalSign"]>
  export type VitalSignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Patient?: boolean | VitalSign$PatientArgs<ExtArgs>
  }

  export type $VitalSignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VitalSign"
    objects: {
      Patient: Prisma.$PatientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string | null
      bp: string | null
      height: string | null
      temp: string | null
      spo2: string | null
      weight: string | null
      hr: string | null
      rbs: string | null
      rr: string | null
      timeVs: Date | null
      allergies: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vitalSign"]>
    composites: {}
  }

  type VitalSignGetPayload<S extends boolean | null | undefined | VitalSignDefaultArgs> = $Result.GetResult<Prisma.$VitalSignPayload, S>

  type VitalSignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VitalSignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VitalSignCountAggregateInputType | true
    }

  export interface VitalSignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VitalSign'], meta: { name: 'VitalSign' } }
    /**
     * Find zero or one VitalSign that matches the filter.
     * @param {VitalSignFindUniqueArgs} args - Arguments to find a VitalSign
     * @example
     * // Get one VitalSign
     * const vitalSign = await prisma.vitalSign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VitalSignFindUniqueArgs>(args: SelectSubset<T, VitalSignFindUniqueArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VitalSign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VitalSignFindUniqueOrThrowArgs} args - Arguments to find a VitalSign
     * @example
     * // Get one VitalSign
     * const vitalSign = await prisma.vitalSign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VitalSignFindUniqueOrThrowArgs>(args: SelectSubset<T, VitalSignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VitalSign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignFindFirstArgs} args - Arguments to find a VitalSign
     * @example
     * // Get one VitalSign
     * const vitalSign = await prisma.vitalSign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VitalSignFindFirstArgs>(args?: SelectSubset<T, VitalSignFindFirstArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VitalSign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignFindFirstOrThrowArgs} args - Arguments to find a VitalSign
     * @example
     * // Get one VitalSign
     * const vitalSign = await prisma.vitalSign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VitalSignFindFirstOrThrowArgs>(args?: SelectSubset<T, VitalSignFindFirstOrThrowArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VitalSigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VitalSigns
     * const vitalSigns = await prisma.vitalSign.findMany()
     * 
     * // Get first 10 VitalSigns
     * const vitalSigns = await prisma.vitalSign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vitalSignWithIdOnly = await prisma.vitalSign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VitalSignFindManyArgs>(args?: SelectSubset<T, VitalSignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VitalSign.
     * @param {VitalSignCreateArgs} args - Arguments to create a VitalSign.
     * @example
     * // Create one VitalSign
     * const VitalSign = await prisma.vitalSign.create({
     *   data: {
     *     // ... data to create a VitalSign
     *   }
     * })
     * 
     */
    create<T extends VitalSignCreateArgs>(args: SelectSubset<T, VitalSignCreateArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VitalSigns.
     * @param {VitalSignCreateManyArgs} args - Arguments to create many VitalSigns.
     * @example
     * // Create many VitalSigns
     * const vitalSign = await prisma.vitalSign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VitalSignCreateManyArgs>(args?: SelectSubset<T, VitalSignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VitalSign.
     * @param {VitalSignDeleteArgs} args - Arguments to delete one VitalSign.
     * @example
     * // Delete one VitalSign
     * const VitalSign = await prisma.vitalSign.delete({
     *   where: {
     *     // ... filter to delete one VitalSign
     *   }
     * })
     * 
     */
    delete<T extends VitalSignDeleteArgs>(args: SelectSubset<T, VitalSignDeleteArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VitalSign.
     * @param {VitalSignUpdateArgs} args - Arguments to update one VitalSign.
     * @example
     * // Update one VitalSign
     * const vitalSign = await prisma.vitalSign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VitalSignUpdateArgs>(args: SelectSubset<T, VitalSignUpdateArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VitalSigns.
     * @param {VitalSignDeleteManyArgs} args - Arguments to filter VitalSigns to delete.
     * @example
     * // Delete a few VitalSigns
     * const { count } = await prisma.vitalSign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VitalSignDeleteManyArgs>(args?: SelectSubset<T, VitalSignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VitalSigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VitalSigns
     * const vitalSign = await prisma.vitalSign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VitalSignUpdateManyArgs>(args: SelectSubset<T, VitalSignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VitalSign.
     * @param {VitalSignUpsertArgs} args - Arguments to update or create a VitalSign.
     * @example
     * // Update or create a VitalSign
     * const vitalSign = await prisma.vitalSign.upsert({
     *   create: {
     *     // ... data to create a VitalSign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VitalSign we want to update
     *   }
     * })
     */
    upsert<T extends VitalSignUpsertArgs>(args: SelectSubset<T, VitalSignUpsertArgs<ExtArgs>>): Prisma__VitalSignClient<$Result.GetResult<Prisma.$VitalSignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VitalSigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignCountArgs} args - Arguments to filter VitalSigns to count.
     * @example
     * // Count the number of VitalSigns
     * const count = await prisma.vitalSign.count({
     *   where: {
     *     // ... the filter for the VitalSigns we want to count
     *   }
     * })
    **/
    count<T extends VitalSignCountArgs>(
      args?: Subset<T, VitalSignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VitalSignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VitalSign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VitalSignAggregateArgs>(args: Subset<T, VitalSignAggregateArgs>): Prisma.PrismaPromise<GetVitalSignAggregateType<T>>

    /**
     * Group by VitalSign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VitalSignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VitalSignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VitalSignGroupByArgs['orderBy'] }
        : { orderBy?: VitalSignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VitalSignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVitalSignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VitalSign model
   */
  readonly fields: VitalSignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VitalSign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VitalSignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Patient<T extends VitalSign$PatientArgs<ExtArgs> = {}>(args?: Subset<T, VitalSign$PatientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VitalSign model
   */
  interface VitalSignFieldRefs {
    readonly id: FieldRef<"VitalSign", 'String'>
    readonly patientId: FieldRef<"VitalSign", 'String'>
    readonly bp: FieldRef<"VitalSign", 'String'>
    readonly height: FieldRef<"VitalSign", 'String'>
    readonly temp: FieldRef<"VitalSign", 'String'>
    readonly spo2: FieldRef<"VitalSign", 'String'>
    readonly weight: FieldRef<"VitalSign", 'String'>
    readonly hr: FieldRef<"VitalSign", 'String'>
    readonly rbs: FieldRef<"VitalSign", 'String'>
    readonly rr: FieldRef<"VitalSign", 'String'>
    readonly timeVs: FieldRef<"VitalSign", 'DateTime'>
    readonly allergies: FieldRef<"VitalSign", 'Boolean'>
    readonly createdAt: FieldRef<"VitalSign", 'DateTime'>
    readonly updatedAt: FieldRef<"VitalSign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VitalSign findUnique
   */
  export type VitalSignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * Filter, which VitalSign to fetch.
     */
    where: VitalSignWhereUniqueInput
  }

  /**
   * VitalSign findUniqueOrThrow
   */
  export type VitalSignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * Filter, which VitalSign to fetch.
     */
    where: VitalSignWhereUniqueInput
  }

  /**
   * VitalSign findFirst
   */
  export type VitalSignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * Filter, which VitalSign to fetch.
     */
    where?: VitalSignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: VitalSignOrderByWithRelationInput | VitalSignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VitalSigns.
     */
    cursor?: VitalSignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VitalSigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VitalSigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VitalSigns.
     */
    distinct?: VitalSignScalarFieldEnum | VitalSignScalarFieldEnum[]
  }

  /**
   * VitalSign findFirstOrThrow
   */
  export type VitalSignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * Filter, which VitalSign to fetch.
     */
    where?: VitalSignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: VitalSignOrderByWithRelationInput | VitalSignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VitalSigns.
     */
    cursor?: VitalSignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VitalSigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VitalSigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VitalSigns.
     */
    distinct?: VitalSignScalarFieldEnum | VitalSignScalarFieldEnum[]
  }

  /**
   * VitalSign findMany
   */
  export type VitalSignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * Filter, which VitalSigns to fetch.
     */
    where?: VitalSignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VitalSigns to fetch.
     */
    orderBy?: VitalSignOrderByWithRelationInput | VitalSignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VitalSigns.
     */
    cursor?: VitalSignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VitalSigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VitalSigns.
     */
    skip?: number
    distinct?: VitalSignScalarFieldEnum | VitalSignScalarFieldEnum[]
  }

  /**
   * VitalSign create
   */
  export type VitalSignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * The data needed to create a VitalSign.
     */
    data: XOR<VitalSignCreateInput, VitalSignUncheckedCreateInput>
  }

  /**
   * VitalSign createMany
   */
  export type VitalSignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VitalSigns.
     */
    data: VitalSignCreateManyInput | VitalSignCreateManyInput[]
  }

  /**
   * VitalSign update
   */
  export type VitalSignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * The data needed to update a VitalSign.
     */
    data: XOR<VitalSignUpdateInput, VitalSignUncheckedUpdateInput>
    /**
     * Choose, which VitalSign to update.
     */
    where: VitalSignWhereUniqueInput
  }

  /**
   * VitalSign updateMany
   */
  export type VitalSignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VitalSigns.
     */
    data: XOR<VitalSignUpdateManyMutationInput, VitalSignUncheckedUpdateManyInput>
    /**
     * Filter which VitalSigns to update
     */
    where?: VitalSignWhereInput
    /**
     * Limit how many VitalSigns to update.
     */
    limit?: number
  }

  /**
   * VitalSign upsert
   */
  export type VitalSignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * The filter to search for the VitalSign to update in case it exists.
     */
    where: VitalSignWhereUniqueInput
    /**
     * In case the VitalSign found by the `where` argument doesn't exist, create a new VitalSign with this data.
     */
    create: XOR<VitalSignCreateInput, VitalSignUncheckedCreateInput>
    /**
     * In case the VitalSign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VitalSignUpdateInput, VitalSignUncheckedUpdateInput>
  }

  /**
   * VitalSign delete
   */
  export type VitalSignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
    /**
     * Filter which VitalSign to delete.
     */
    where: VitalSignWhereUniqueInput
  }

  /**
   * VitalSign deleteMany
   */
  export type VitalSignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VitalSigns to delete
     */
    where?: VitalSignWhereInput
    /**
     * Limit how many VitalSigns to delete.
     */
    limit?: number
  }

  /**
   * VitalSign.Patient
   */
  export type VitalSign$PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * VitalSign without action
   */
  export type VitalSignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VitalSign
     */
    select?: VitalSignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VitalSign
     */
    omit?: VitalSignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VitalSignInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    password: 'password',
    name: 'name',
    deptcode: 'deptcode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BedScalarFieldEnum: {
    id: 'id',
    bedNumber: 'bedNumber',
    bedStatus: 'bedStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BedScalarFieldEnum = (typeof BedScalarFieldEnum)[keyof typeof BedScalarFieldEnum]


  export const JourneyScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive',
    firstCallTime: 'firstCallTime',
    vitalTime: 'vitalTime',
    assignDeptTime: 'assignDeptTime',
    secondCallTime: 'secondCallTime',
    beginTime: 'beginTime',
    endTime: 'endTime',
    patientId: 'patientId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JourneyScalarFieldEnum = (typeof JourneyScalarFieldEnum)[keyof typeof JourneyScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nationality: 'nationality',
    sex: 'sex',
    idNumber: 'idNumber',
    age: 'age',
    mobileNumber: 'mobileNumber',
    status: 'status',
    cheifComplaint: 'cheifComplaint',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ticket: 'ticket',
    userId: 'userId',
    callPatient: 'callPatient',
    state: 'state',
    barcode: 'barcode',
    departmentId: 'departmentId',
    ticketNumber: 'ticketNumber',
    bedId: 'bedId',
    beginTime: 'beginTime',
    endTime: 'endTime',
    birthDate: 'birthDate',
    bloodGroup: 'bloodGroup',
    mrnNumber: 'mrnNumber',
    remarks: 'remarks',
    assignDeptTime: 'assignDeptTime',
    firstCallTime: 'firstCallTime',
    secondCallTime: 'secondCallTime',
    vitalTime: 'vitalTime',
    registrationDate: 'registrationDate'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const PatientCountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    counter: 'counter',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientCountScalarFieldEnum = (typeof PatientCountScalarFieldEnum)[keyof typeof PatientCountScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    description: 'description',
    route: 'route'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const TblAdmissionScalarFieldEnum: {
    tblAdmissionID: 'tblAdmissionID',
    admissioncode: 'admissioncode',
    admissionname: 'admissionname'
  };

  export type TblAdmissionScalarFieldEnum = (typeof TblAdmissionScalarFieldEnum)[keyof typeof TblAdmissionScalarFieldEnum]


  export const TblAppScalarFieldEnum: {
    tblAppID: 'tblAppID',
    AppID: 'AppID',
    ApplicationName: 'ApplicationName'
  };

  export type TblAppScalarFieldEnum = (typeof TblAppScalarFieldEnum)[keyof typeof TblAppScalarFieldEnum]


  export const TblAppAuthScalarFieldEnum: {
    tblAppAuthID: 'tblAppAuthID',
    appAuthID: 'appAuthID',
    AppID: 'AppID',
    userid: 'userid',
    last_update: 'last_update'
  };

  export type TblAppAuthScalarFieldEnum = (typeof TblAppAuthScalarFieldEnum)[keyof typeof TblAppAuthScalarFieldEnum]


  export const TblAppModeAuthScalarFieldEnum: {
    tblUserAppModAuthID: 'tblUserAppModAuthID',
    moduleID: 'moduleID',
    UserappModAuthID: 'UserappModAuthID',
    userid: 'userid',
    last_update: 'last_update'
  };

  export type TblAppModeAuthScalarFieldEnum = (typeof TblAppModeAuthScalarFieldEnum)[keyof typeof TblAppModeAuthScalarFieldEnum]


  export const TblAppModulesScalarFieldEnum: {
    tblAppModulesID: 'tblAppModulesID',
    moduleID: 'moduleID',
    AppID: 'AppID',
    ModuleName: 'ModuleName'
  };

  export type TblAppModulesScalarFieldEnum = (typeof TblAppModulesScalarFieldEnum)[keyof typeof TblAppModulesScalarFieldEnum]


  export const TblConsultScalarFieldEnum: {
    tblConsultID: 'tblConsultID',
    tblconsultspecialtyid: 'tblconsultspecialtyid',
    specialtyname: 'specialtyname'
  };

  export type TblConsultScalarFieldEnum = (typeof TblConsultScalarFieldEnum)[keyof typeof TblConsultScalarFieldEnum]


  export const TblCounterScalarFieldEnum: {
    tblCounterID: 'tblCounterID',
    currentCount: 'currentCount',
    ratz: 'ratz',
    acu: 'acu',
    ucc: 'ucc',
    triageout: 'triageout'
  };

  export type TblCounterScalarFieldEnum = (typeof TblCounterScalarFieldEnum)[keyof typeof TblCounterScalarFieldEnum]


  export const TblDepartmentScalarFieldEnum: {
    tblDepartmentID: 'tblDepartmentID',
    deptcode: 'deptcode',
    deptname: 'deptname'
  };

  export type TblDepartmentScalarFieldEnum = (typeof TblDepartmentScalarFieldEnum)[keyof typeof TblDepartmentScalarFieldEnum]


  export const TblLocationScalarFieldEnum: {
    tblLocationID: 'tblLocationID',
    loccode: 'loccode',
    deptcode: 'deptcode',
    locationname: 'locationname'
  };

  export type TblLocationScalarFieldEnum = (typeof TblLocationScalarFieldEnum)[keyof typeof TblLocationScalarFieldEnum]


  export const TblLocationSessionScalarFieldEnum: {
    tblLocationSessionID: 'tblLocationSessionID',
    loccode: 'loccode',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    start_dt: 'start_dt',
    finish_dt: 'finish_dt',
    tblQueueID: 'tblQueueID',
    name: 'name',
    dept_counter: 'dept_counter',
    locationname: 'locationname',
    status: 'status'
  };

  export type TblLocationSessionScalarFieldEnum = (typeof TblLocationSessionScalarFieldEnum)[keyof typeof TblLocationSessionScalarFieldEnum]


  export const TbllocationsessionArchieveScalarFieldEnum: {
    tblLocationSessionID: 'tblLocationSessionID',
    loccode: 'loccode',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    start_dt: 'start_dt',
    finish_dt: 'finish_dt',
    tblQueueID: 'tblQueueID',
    name: 'name',
    dept_counter: 'dept_counter',
    locationname: 'locationname',
    status: 'status'
  };

  export type TbllocationsessionArchieveScalarFieldEnum = (typeof TbllocationsessionArchieveScalarFieldEnum)[keyof typeof TbllocationsessionArchieveScalarFieldEnum]


  export const TblQueueScalarFieldEnum: {
    tblQueueID: 'tblQueueID',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    issued_dt: 'issued_dt',
    start_dt: 'start_dt',
    finish_dt: 'finish_dt',
    status: 'status',
    waiting: 'waiting',
    barcode: 'barcode',
    deptname: 'deptname',
    name: 'name',
    userid: 'userid',
    locationname: 'locationname',
    nationality: 'nationality',
    id: 'id',
    patient_age: 'patient_age',
    gender: 'gender',
    complain: 'complain',
    triage_dt: 'triage_dt',
    bp: 'bp',
    temp: 'temp',
    hr: 'hr',
    rr: 'rr',
    spo2: 'spo2',
    rbs: 'rbs',
    height: 'height',
    weight: 'weight',
    allergies: 'allergies',
    bedassignment: 'bedassignment',
    override: 'override',
    critical: 'critical',
    criticalmsg: 'criticalmsg',
    category: 'category',
    dept_counter: 'dept_counter',
    toremarks: 'toremarks',
    last_update: 'last_update',
    mobileno: 'mobileno',
    returnvisit72Hrs: 'returnvisit72Hrs',
    admitted: 'admitted',
    admittedIn: 'admittedIn',
    consulted: 'consulted',
    consultspecialtyid: 'consultspecialtyid',
    consultassign: 'consultassign',
    consultarrive: 'consultarrive',
    consultdesicion: 'consultdesicion',
    transferred: 'transferred',
    transferid: 'transferid',
    Pmh: 'Pmh',
    ticket: 'ticket'
  };

  export type TblQueueScalarFieldEnum = (typeof TblQueueScalarFieldEnum)[keyof typeof TblQueueScalarFieldEnum]


  export const TblQueueArchieveScalarFieldEnum: {
    tblQueueID: 'tblQueueID',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    issued_dt: 'issued_dt',
    start_dt: 'start_dt',
    finish_dt: 'finish_dt',
    status: 'status',
    waiting: 'waiting',
    barcode: 'barcode',
    deptname: 'deptname',
    name: 'name',
    userid: 'userid',
    locationname: 'locationname',
    nationality: 'nationality',
    id: 'id',
    patient_age: 'patient_age',
    gender: 'gender',
    complain: 'complain',
    triage_dt: 'triage_dt',
    bp: 'bp',
    temp: 'temp',
    hr: 'hr',
    rr: 'rr',
    spo2: 'spo2',
    rbs: 'rbs',
    height: 'height',
    weight: 'weight',
    allergies: 'allergies',
    bedassignment: 'bedassignment',
    override: 'override',
    critical: 'critical',
    criticalmsg: 'criticalmsg',
    category: 'category',
    dept_counter: 'dept_counter',
    toremarks: 'toremarks',
    last_update: 'last_update',
    mobileno: 'mobileno',
    returnvisit72Hrs: 'returnvisit72Hrs',
    admitted: 'admitted',
    admittedIn: 'admittedIn',
    consulted: 'consulted',
    consultspecialtyid: 'consultspecialtyid',
    consultassign: 'consultassign',
    consultarrive: 'consultarrive',
    consultdesicion: 'consultdesicion',
    transferred: 'transferred',
    transferid: 'transferid',
    ticket: 'ticket',
    Pmh: 'Pmh'
  };

  export type TblQueueArchieveScalarFieldEnum = (typeof TblQueueArchieveScalarFieldEnum)[keyof typeof TblQueueArchieveScalarFieldEnum]


  export const TblQueueArchieveTempScalarFieldEnum: {
    tblQueueID: 'tblQueueID',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    issued_dt: 'issued_dt',
    start_dt: 'start_dt',
    finish_dt: 'finish_dt',
    status: 'status',
    waiting: 'waiting',
    barcode: 'barcode',
    deptname: 'deptname',
    name: 'name',
    userid: 'userid',
    locationname: 'locationname',
    nationality: 'nationality',
    id: 'id',
    patient_age: 'patient_age',
    gender: 'gender',
    complain: 'complain',
    triage_dt: 'triage_dt',
    bp: 'bp',
    temp: 'temp',
    hr: 'hr',
    rr: 'rr',
    spo2: 'spo2',
    rbs: 'rbs',
    height: 'height',
    weight: 'weight',
    allergies: 'allergies',
    bedassignment: 'bedassignment',
    override: 'override',
    critical: 'critical',
    criticalmsg: 'criticalmsg',
    category: 'category',
    dept_counter: 'dept_counter',
    toremarks: 'toremarks',
    last_update: 'last_update',
    mobileno: 'mobileno'
  };

  export type TblQueueArchieveTempScalarFieldEnum = (typeof TblQueueArchieveTempScalarFieldEnum)[keyof typeof TblQueueArchieveTempScalarFieldEnum]


  export const TblQueuePulmoScalarFieldEnum: {
    tblQueueID: 'tblQueueID',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    issued_dt: 'issued_dt',
    start_dt: 'start_dt',
    finish_dt: 'finish_dt',
    status: 'status',
    waiting: 'waiting',
    barcode: 'barcode',
    deptname: 'deptname',
    name: 'name',
    userid: 'userid',
    locationname: 'locationname',
    nationality: 'nationality',
    id: 'id',
    patient_age: 'patient_age',
    gender: 'gender',
    complain: 'complain',
    triage_dt: 'triage_dt',
    bp: 'bp',
    temp: 'temp',
    hr: 'hr',
    rr: 'rr',
    spo2: 'spo2',
    rbs: 'rbs',
    height: 'height',
    weight: 'weight',
    allergies: 'allergies',
    bedassignment: 'bedassignment',
    override: 'override',
    critical: 'critical',
    criticalmsg: 'criticalmsg',
    category: 'category',
    dept_counter: 'dept_counter',
    toremarks: 'toremarks',
    last_update: 'last_update',
    mobileno: 'mobileno',
    returnvisit72Hrs: 'returnvisit72Hrs',
    admitted: 'admitted',
    admittedIn: 'admittedIn',
    consulted: 'consulted',
    consultspecialtyid: 'consultspecialtyid',
    consultassign: 'consultassign',
    consultarrive: 'consultarrive',
    consultdesicion: 'consultdesicion',
    transferred: 'transferred',
    transferid: 'transferid'
  };

  export type TblQueuePulmoScalarFieldEnum = (typeof TblQueuePulmoScalarFieldEnum)[keyof typeof TblQueuePulmoScalarFieldEnum]


  export const TblQueueSessionScalarFieldEnum: {
    tblLocationSessionID: 'tblLocationSessionID',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    tblQueueID: 'tblQueueID'
  };

  export type TblQueueSessionScalarFieldEnum = (typeof TblQueueSessionScalarFieldEnum)[keyof typeof TblQueueSessionScalarFieldEnum]


  export const TblQueueTransferDeptScalarFieldEnum: {
    tblQueueTransferDeptID: 'tblQueueTransferDeptID',
    barcode: 'barcode',
    fromdeptcode: 'fromdeptcode',
    todeptcode: 'todeptcode',
    last_update: 'last_update',
    issued_dt: 'issued_dt'
  };

  export type TblQueueTransferDeptScalarFieldEnum = (typeof TblQueueTransferDeptScalarFieldEnum)[keyof typeof TblQueueTransferDeptScalarFieldEnum]


  export const TblQueueWaitScalarFieldEnum: {
    tblQueueID: 'tblQueueID',
    deptcode: 'deptcode',
    qnumber: 'qnumber',
    issued_dt: 'issued_dt',
    start_dt: 'start_dt',
    finish_dt: 'finish_dt',
    status: 'status',
    waiting: 'waiting',
    barcode: 'barcode',
    deptname: 'deptname',
    name: 'name',
    userid: 'userid',
    locationname: 'locationname',
    queueID: 'queueID',
    dept_counter: 'dept_counter'
  };

  export type TblQueueWaitScalarFieldEnum = (typeof TblQueueWaitScalarFieldEnum)[keyof typeof TblQueueWaitScalarFieldEnum]


  export const TblSubLocationScalarFieldEnum: {
    tblLocationID: 'tblLocationID',
    loccode: 'loccode',
    deptcode: 'deptcode',
    locationname: 'locationname',
    status: 'status'
  };

  export type TblSubLocationScalarFieldEnum = (typeof TblSubLocationScalarFieldEnum)[keyof typeof TblSubLocationScalarFieldEnum]


  export const TblTransferScalarFieldEnum: {
    tblTransferID: 'tblTransferID',
    transferid: 'transferid',
    transfername: 'transfername'
  };

  export type TblTransferScalarFieldEnum = (typeof TblTransferScalarFieldEnum)[keyof typeof TblTransferScalarFieldEnum]


  export const TblUserDepartmentAuthScalarFieldEnum: {
    tblUserDepartmentAuthID: 'tblUserDepartmentAuthID',
    authiD: 'authiD',
    deptcode: 'deptcode',
    userid: 'userid',
    last_update: 'last_update'
  };

  export type TblUserDepartmentAuthScalarFieldEnum = (typeof TblUserDepartmentAuthScalarFieldEnum)[keyof typeof TblUserDepartmentAuthScalarFieldEnum]


  export const TblUserOverrideAuthScalarFieldEnum: {
    tblUserOverrideAuthID: 'tblUserOverrideAuthID',
    appAuthID: 'appAuthID',
    userid: 'userid',
    last_update: 'last_update'
  };

  export type TblUserOverrideAuthScalarFieldEnum = (typeof TblUserOverrideAuthScalarFieldEnum)[keyof typeof TblUserOverrideAuthScalarFieldEnum]


  export const PromptScalarFieldEnum: {
    id: 'id',
    text: 'text',
    intent: 'intent',
    parameters: 'parameters',
    hasAction: 'hasAction',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type PromptScalarFieldEnum = (typeof PromptScalarFieldEnum)[keyof typeof PromptScalarFieldEnum]


  export const TblUsersScalarFieldEnum: {
    tblUsersID: 'tblUsersID',
    userid: 'userid',
    password: 'password',
    name: 'name',
    deptcode: 'deptcode',
    date: 'date'
  };

  export type TblUsersScalarFieldEnum = (typeof TblUsersScalarFieldEnum)[keyof typeof TblUsersScalarFieldEnum]


  export const VitalSignScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    bp: 'bp',
    height: 'height',
    temp: 'temp',
    spo2: 'spo2',
    weight: 'weight',
    hr: 'hr',
    rbs: 'rbs',
    rr: 'rr',
    timeVs: 'timeVs',
    allergies: 'allergies',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VitalSignScalarFieldEnum = (typeof VitalSignScalarFieldEnum)[keyof typeof VitalSignScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    deptcode?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringNullableFilter<"User"> | string | null
    Patient?: PatientListRelationFilter
    PatientCount?: PatientCountListRelationFilter
    RefreshToken?: RefreshTokenListRelationFilter
    Role?: RoleListRelationFilter
    Prompt?: PromptListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrderInput | SortOrder
    Patient?: PatientOrderByRelationAggregateInput
    PatientCount?: PatientCountOrderByRelationAggregateInput
    RefreshToken?: RefreshTokenOrderByRelationAggregateInput
    Role?: RoleOrderByRelationAggregateInput
    Prompt?: PromptOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    deptcode?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Patient?: PatientListRelationFilter
    PatientCount?: PatientCountListRelationFilter
    RefreshToken?: RefreshTokenListRelationFilter
    Role?: RoleListRelationFilter
    Prompt?: PromptListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    deptcode?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type BedWhereInput = {
    AND?: BedWhereInput | BedWhereInput[]
    OR?: BedWhereInput[]
    NOT?: BedWhereInput | BedWhereInput[]
    id?: StringFilter<"Bed"> | string
    bedNumber?: StringNullableFilter<"Bed"> | string | null
    bedStatus?: StringNullableFilter<"Bed"> | string | null
    createdAt?: DateTimeFilter<"Bed"> | Date | string
    updatedAt?: DateTimeFilter<"Bed"> | Date | string
    Patient?: PatientListRelationFilter
  }

  export type BedOrderByWithRelationInput = {
    id?: SortOrder
    bedNumber?: SortOrderInput | SortOrder
    bedStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Patient?: PatientOrderByRelationAggregateInput
  }

  export type BedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BedWhereInput | BedWhereInput[]
    OR?: BedWhereInput[]
    NOT?: BedWhereInput | BedWhereInput[]
    bedNumber?: StringNullableFilter<"Bed"> | string | null
    bedStatus?: StringNullableFilter<"Bed"> | string | null
    createdAt?: DateTimeFilter<"Bed"> | Date | string
    updatedAt?: DateTimeFilter<"Bed"> | Date | string
    Patient?: PatientListRelationFilter
  }, "id">

  export type BedOrderByWithAggregationInput = {
    id?: SortOrder
    bedNumber?: SortOrderInput | SortOrder
    bedStatus?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BedCountOrderByAggregateInput
    _max?: BedMaxOrderByAggregateInput
    _min?: BedMinOrderByAggregateInput
  }

  export type BedScalarWhereWithAggregatesInput = {
    AND?: BedScalarWhereWithAggregatesInput | BedScalarWhereWithAggregatesInput[]
    OR?: BedScalarWhereWithAggregatesInput[]
    NOT?: BedScalarWhereWithAggregatesInput | BedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bed"> | string
    bedNumber?: StringNullableWithAggregatesFilter<"Bed"> | string | null
    bedStatus?: StringNullableWithAggregatesFilter<"Bed"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Bed"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bed"> | Date | string
  }

  export type JourneyWhereInput = {
    AND?: JourneyWhereInput | JourneyWhereInput[]
    OR?: JourneyWhereInput[]
    NOT?: JourneyWhereInput | JourneyWhereInput[]
    id?: StringFilter<"Journey"> | string
    isActive?: BoolNullableFilter<"Journey"> | boolean | null
    firstCallTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    vitalTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    assignDeptTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    secondCallTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    beginTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    patientId?: StringNullableFilter<"Journey"> | string | null
    createdAt?: DateTimeFilter<"Journey"> | Date | string
    updatedAt?: DateTimeFilter<"Journey"> | Date | string
    Patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
  }

  export type JourneyOrderByWithRelationInput = {
    id?: SortOrder
    isActive?: SortOrderInput | SortOrder
    firstCallTime?: SortOrderInput | SortOrder
    vitalTime?: SortOrderInput | SortOrder
    assignDeptTime?: SortOrderInput | SortOrder
    secondCallTime?: SortOrderInput | SortOrder
    beginTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    patientId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Patient?: PatientOrderByWithRelationInput
  }

  export type JourneyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JourneyWhereInput | JourneyWhereInput[]
    OR?: JourneyWhereInput[]
    NOT?: JourneyWhereInput | JourneyWhereInput[]
    isActive?: BoolNullableFilter<"Journey"> | boolean | null
    firstCallTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    vitalTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    assignDeptTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    secondCallTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    beginTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    patientId?: StringNullableFilter<"Journey"> | string | null
    createdAt?: DateTimeFilter<"Journey"> | Date | string
    updatedAt?: DateTimeFilter<"Journey"> | Date | string
    Patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
  }, "id">

  export type JourneyOrderByWithAggregationInput = {
    id?: SortOrder
    isActive?: SortOrderInput | SortOrder
    firstCallTime?: SortOrderInput | SortOrder
    vitalTime?: SortOrderInput | SortOrder
    assignDeptTime?: SortOrderInput | SortOrder
    secondCallTime?: SortOrderInput | SortOrder
    beginTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    patientId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JourneyCountOrderByAggregateInput
    _max?: JourneyMaxOrderByAggregateInput
    _min?: JourneyMinOrderByAggregateInput
  }

  export type JourneyScalarWhereWithAggregatesInput = {
    AND?: JourneyScalarWhereWithAggregatesInput | JourneyScalarWhereWithAggregatesInput[]
    OR?: JourneyScalarWhereWithAggregatesInput[]
    NOT?: JourneyScalarWhereWithAggregatesInput | JourneyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Journey"> | string
    isActive?: BoolNullableWithAggregatesFilter<"Journey"> | boolean | null
    firstCallTime?: DateTimeNullableWithAggregatesFilter<"Journey"> | Date | string | null
    vitalTime?: DateTimeNullableWithAggregatesFilter<"Journey"> | Date | string | null
    assignDeptTime?: DateTimeNullableWithAggregatesFilter<"Journey"> | Date | string | null
    secondCallTime?: DateTimeNullableWithAggregatesFilter<"Journey"> | Date | string | null
    beginTime?: DateTimeNullableWithAggregatesFilter<"Journey"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"Journey"> | Date | string | null
    patientId?: StringNullableWithAggregatesFilter<"Journey"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Journey"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Journey"> | Date | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    name?: StringNullableFilter<"Patient"> | string | null
    nationality?: StringNullableFilter<"Patient"> | string | null
    sex?: StringNullableFilter<"Patient"> | string | null
    idNumber?: StringNullableFilter<"Patient"> | string | null
    age?: IntNullableFilter<"Patient"> | number | null
    mobileNumber?: StringNullableFilter<"Patient"> | string | null
    status?: StringNullableFilter<"Patient"> | string | null
    cheifComplaint?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    ticket?: StringNullableFilter<"Patient"> | string | null
    userId?: StringNullableFilter<"Patient"> | string | null
    callPatient?: BoolNullableFilter<"Patient"> | boolean | null
    state?: IntNullableFilter<"Patient"> | number | null
    barcode?: StringNullableFilter<"Patient"> | string | null
    departmentId?: DecimalNullableFilter<"Patient"> | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: IntNullableFilter<"Patient"> | number | null
    bedId?: StringNullableFilter<"Patient"> | string | null
    beginTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    birthDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
    bloodGroup?: StringNullableFilter<"Patient"> | string | null
    mrnNumber?: StringNullableFilter<"Patient"> | string | null
    remarks?: StringNullableFilter<"Patient"> | string | null
    assignDeptTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    firstCallTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    secondCallTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    vitalTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    registrationDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
    Journey?: JourneyListRelationFilter
    Bed?: XOR<BedNullableScalarRelationFilter, BedWhereInput> | null
    tblDepartment?: XOR<TblDepartmentNullableScalarRelationFilter, tblDepartmentWhereInput> | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    VitalSign?: VitalSignListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    mobileNumber?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    cheifComplaint?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    callPatient?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    ticketNumber?: SortOrderInput | SortOrder
    bedId?: SortOrderInput | SortOrder
    beginTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    bloodGroup?: SortOrderInput | SortOrder
    mrnNumber?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    assignDeptTime?: SortOrderInput | SortOrder
    firstCallTime?: SortOrderInput | SortOrder
    secondCallTime?: SortOrderInput | SortOrder
    vitalTime?: SortOrderInput | SortOrder
    registrationDate?: SortOrderInput | SortOrder
    Journey?: JourneyOrderByRelationAggregateInput
    Bed?: BedOrderByWithRelationInput
    tblDepartment?: tblDepartmentOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
    VitalSign?: VitalSignOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringNullableFilter<"Patient"> | string | null
    nationality?: StringNullableFilter<"Patient"> | string | null
    sex?: StringNullableFilter<"Patient"> | string | null
    idNumber?: StringNullableFilter<"Patient"> | string | null
    age?: IntNullableFilter<"Patient"> | number | null
    mobileNumber?: StringNullableFilter<"Patient"> | string | null
    status?: StringNullableFilter<"Patient"> | string | null
    cheifComplaint?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    ticket?: StringNullableFilter<"Patient"> | string | null
    userId?: StringNullableFilter<"Patient"> | string | null
    callPatient?: BoolNullableFilter<"Patient"> | boolean | null
    state?: IntNullableFilter<"Patient"> | number | null
    barcode?: StringNullableFilter<"Patient"> | string | null
    departmentId?: DecimalNullableFilter<"Patient"> | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: IntNullableFilter<"Patient"> | number | null
    bedId?: StringNullableFilter<"Patient"> | string | null
    beginTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    birthDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
    bloodGroup?: StringNullableFilter<"Patient"> | string | null
    mrnNumber?: StringNullableFilter<"Patient"> | string | null
    remarks?: StringNullableFilter<"Patient"> | string | null
    assignDeptTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    firstCallTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    secondCallTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    vitalTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    registrationDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
    Journey?: JourneyListRelationFilter
    Bed?: XOR<BedNullableScalarRelationFilter, BedWhereInput> | null
    tblDepartment?: XOR<TblDepartmentNullableScalarRelationFilter, tblDepartmentWhereInput> | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    VitalSign?: VitalSignListRelationFilter
  }, "id">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    mobileNumber?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    cheifComplaint?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    callPatient?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    ticketNumber?: SortOrderInput | SortOrder
    bedId?: SortOrderInput | SortOrder
    beginTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    bloodGroup?: SortOrderInput | SortOrder
    mrnNumber?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    assignDeptTime?: SortOrderInput | SortOrder
    firstCallTime?: SortOrderInput | SortOrder
    secondCallTime?: SortOrderInput | SortOrder
    vitalTime?: SortOrderInput | SortOrder
    registrationDate?: SortOrderInput | SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    name?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    sex?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    idNumber?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    age?: IntNullableWithAggregatesFilter<"Patient"> | number | null
    mobileNumber?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    status?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    cheifComplaint?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    ticket?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    callPatient?: BoolNullableWithAggregatesFilter<"Patient"> | boolean | null
    state?: IntNullableWithAggregatesFilter<"Patient"> | number | null
    barcode?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    departmentId?: DecimalNullableWithAggregatesFilter<"Patient"> | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: IntNullableWithAggregatesFilter<"Patient"> | number | null
    bedId?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    beginTime?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    bloodGroup?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    mrnNumber?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    remarks?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    assignDeptTime?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    firstCallTime?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    secondCallTime?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    vitalTime?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    registrationDate?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
  }

  export type PatientCountWhereInput = {
    AND?: PatientCountWhereInput | PatientCountWhereInput[]
    OR?: PatientCountWhereInput[]
    NOT?: PatientCountWhereInput | PatientCountWhereInput[]
    id?: StringFilter<"PatientCount"> | string
    userId?: StringNullableFilter<"PatientCount"> | string | null
    counter?: IntNullableFilter<"PatientCount"> | number | null
    createdAt?: DateTimeFilter<"PatientCount"> | Date | string
    updatedAt?: DateTimeFilter<"PatientCount"> | Date | string
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type PatientCountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    counter?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type PatientCountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientCountWhereInput | PatientCountWhereInput[]
    OR?: PatientCountWhereInput[]
    NOT?: PatientCountWhereInput | PatientCountWhereInput[]
    userId?: StringNullableFilter<"PatientCount"> | string | null
    counter?: IntNullableFilter<"PatientCount"> | number | null
    createdAt?: DateTimeFilter<"PatientCount"> | Date | string
    updatedAt?: DateTimeFilter<"PatientCount"> | Date | string
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type PatientCountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    counter?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientCountCountOrderByAggregateInput
    _avg?: PatientCountAvgOrderByAggregateInput
    _max?: PatientCountMaxOrderByAggregateInput
    _min?: PatientCountMinOrderByAggregateInput
    _sum?: PatientCountSumOrderByAggregateInput
  }

  export type PatientCountScalarWhereWithAggregatesInput = {
    AND?: PatientCountScalarWhereWithAggregatesInput | PatientCountScalarWhereWithAggregatesInput[]
    OR?: PatientCountScalarWhereWithAggregatesInput[]
    NOT?: PatientCountScalarWhereWithAggregatesInput | PatientCountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientCount"> | string
    userId?: StringNullableWithAggregatesFilter<"PatientCount"> | string | null
    counter?: IntNullableWithAggregatesFilter<"PatientCount"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientCount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientCount"> | Date | string
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringNullableFilter<"RefreshToken"> | string | null
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringNullableFilter<"RefreshToken"> | string | null
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringNullableWithAggregatesFilter<"RefreshToken"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    description?: StringNullableFilter<"Role"> | string | null
    route?: StringNullableFilter<"Role"> | string | null
    User?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrderInput | SortOrder
    route?: SortOrderInput | SortOrder
    User?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    description?: StringNullableFilter<"Role"> | string | null
    route?: StringNullableFilter<"Role"> | string | null
    User?: UserListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrderInput | SortOrder
    route?: SortOrderInput | SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    route?: StringNullableWithAggregatesFilter<"Role"> | string | null
  }

  export type tblAdmissionWhereInput = {
    AND?: tblAdmissionWhereInput | tblAdmissionWhereInput[]
    OR?: tblAdmissionWhereInput[]
    NOT?: tblAdmissionWhereInput | tblAdmissionWhereInput[]
    tblAdmissionID?: DecimalFilter<"tblAdmission"> | Decimal | DecimalJsLike | number | string
    admissioncode?: StringNullableFilter<"tblAdmission"> | string | null
    admissionname?: StringNullableFilter<"tblAdmission"> | string | null
  }

  export type tblAdmissionOrderByWithRelationInput = {
    tblAdmissionID?: SortOrder
    admissioncode?: SortOrderInput | SortOrder
    admissionname?: SortOrderInput | SortOrder
  }

  export type tblAdmissionWhereUniqueInput = Prisma.AtLeast<{
    tblAdmissionID?: Decimal | DecimalJsLike | number | string
    admissioncode?: string
    AND?: tblAdmissionWhereInput | tblAdmissionWhereInput[]
    OR?: tblAdmissionWhereInput[]
    NOT?: tblAdmissionWhereInput | tblAdmissionWhereInput[]
    admissionname?: StringNullableFilter<"tblAdmission"> | string | null
  }, "tblAdmissionID" | "tblAdmissionID" | "admissioncode">

  export type tblAdmissionOrderByWithAggregationInput = {
    tblAdmissionID?: SortOrder
    admissioncode?: SortOrderInput | SortOrder
    admissionname?: SortOrderInput | SortOrder
    _count?: tblAdmissionCountOrderByAggregateInput
    _avg?: tblAdmissionAvgOrderByAggregateInput
    _max?: tblAdmissionMaxOrderByAggregateInput
    _min?: tblAdmissionMinOrderByAggregateInput
    _sum?: tblAdmissionSumOrderByAggregateInput
  }

  export type tblAdmissionScalarWhereWithAggregatesInput = {
    AND?: tblAdmissionScalarWhereWithAggregatesInput | tblAdmissionScalarWhereWithAggregatesInput[]
    OR?: tblAdmissionScalarWhereWithAggregatesInput[]
    NOT?: tblAdmissionScalarWhereWithAggregatesInput | tblAdmissionScalarWhereWithAggregatesInput[]
    tblAdmissionID?: DecimalWithAggregatesFilter<"tblAdmission"> | Decimal | DecimalJsLike | number | string
    admissioncode?: StringNullableWithAggregatesFilter<"tblAdmission"> | string | null
    admissionname?: StringNullableWithAggregatesFilter<"tblAdmission"> | string | null
  }

  export type tblAppWhereInput = {
    AND?: tblAppWhereInput | tblAppWhereInput[]
    OR?: tblAppWhereInput[]
    NOT?: tblAppWhereInput | tblAppWhereInput[]
    tblAppID?: DecimalFilter<"tblApp"> | Decimal | DecimalJsLike | number | string
    AppID?: DecimalNullableFilter<"tblApp"> | Decimal | DecimalJsLike | number | string | null
    ApplicationName?: StringNullableFilter<"tblApp"> | string | null
  }

  export type tblAppOrderByWithRelationInput = {
    tblAppID?: SortOrder
    AppID?: SortOrderInput | SortOrder
    ApplicationName?: SortOrderInput | SortOrder
  }

  export type tblAppWhereUniqueInput = Prisma.AtLeast<{
    tblAppID?: Decimal | DecimalJsLike | number | string
    AppID?: Decimal | DecimalJsLike | number | string
    AND?: tblAppWhereInput | tblAppWhereInput[]
    OR?: tblAppWhereInput[]
    NOT?: tblAppWhereInput | tblAppWhereInput[]
    ApplicationName?: StringNullableFilter<"tblApp"> | string | null
  }, "tblAppID" | "tblAppID" | "AppID">

  export type tblAppOrderByWithAggregationInput = {
    tblAppID?: SortOrder
    AppID?: SortOrderInput | SortOrder
    ApplicationName?: SortOrderInput | SortOrder
    _count?: tblAppCountOrderByAggregateInput
    _avg?: tblAppAvgOrderByAggregateInput
    _max?: tblAppMaxOrderByAggregateInput
    _min?: tblAppMinOrderByAggregateInput
    _sum?: tblAppSumOrderByAggregateInput
  }

  export type tblAppScalarWhereWithAggregatesInput = {
    AND?: tblAppScalarWhereWithAggregatesInput | tblAppScalarWhereWithAggregatesInput[]
    OR?: tblAppScalarWhereWithAggregatesInput[]
    NOT?: tblAppScalarWhereWithAggregatesInput | tblAppScalarWhereWithAggregatesInput[]
    tblAppID?: DecimalWithAggregatesFilter<"tblApp"> | Decimal | DecimalJsLike | number | string
    AppID?: DecimalNullableWithAggregatesFilter<"tblApp"> | Decimal | DecimalJsLike | number | string | null
    ApplicationName?: StringNullableWithAggregatesFilter<"tblApp"> | string | null
  }

  export type tblAppAuthWhereInput = {
    AND?: tblAppAuthWhereInput | tblAppAuthWhereInput[]
    OR?: tblAppAuthWhereInput[]
    NOT?: tblAppAuthWhereInput | tblAppAuthWhereInput[]
    tblAppAuthID?: DecimalFilter<"tblAppAuth"> | Decimal | DecimalJsLike | number | string
    appAuthID?: DecimalNullableFilter<"tblAppAuth"> | Decimal | DecimalJsLike | number | string | null
    AppID?: DecimalNullableFilter<"tblAppAuth"> | Decimal | DecimalJsLike | number | string | null
    userid?: StringNullableFilter<"tblAppAuth"> | string | null
    last_update?: DateTimeNullableFilter<"tblAppAuth"> | Date | string | null
  }

  export type tblAppAuthOrderByWithRelationInput = {
    tblAppAuthID?: SortOrder
    appAuthID?: SortOrderInput | SortOrder
    AppID?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
  }

  export type tblAppAuthWhereUniqueInput = Prisma.AtLeast<{
    tblAppAuthID?: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string
    userid?: string
    AND?: tblAppAuthWhereInput | tblAppAuthWhereInput[]
    OR?: tblAppAuthWhereInput[]
    NOT?: tblAppAuthWhereInput | tblAppAuthWhereInput[]
    AppID?: DecimalNullableFilter<"tblAppAuth"> | Decimal | DecimalJsLike | number | string | null
    last_update?: DateTimeNullableFilter<"tblAppAuth"> | Date | string | null
  }, "tblAppAuthID" | "tblAppAuthID" | "appAuthID" | "userid">

  export type tblAppAuthOrderByWithAggregationInput = {
    tblAppAuthID?: SortOrder
    appAuthID?: SortOrderInput | SortOrder
    AppID?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    _count?: tblAppAuthCountOrderByAggregateInput
    _avg?: tblAppAuthAvgOrderByAggregateInput
    _max?: tblAppAuthMaxOrderByAggregateInput
    _min?: tblAppAuthMinOrderByAggregateInput
    _sum?: tblAppAuthSumOrderByAggregateInput
  }

  export type tblAppAuthScalarWhereWithAggregatesInput = {
    AND?: tblAppAuthScalarWhereWithAggregatesInput | tblAppAuthScalarWhereWithAggregatesInput[]
    OR?: tblAppAuthScalarWhereWithAggregatesInput[]
    NOT?: tblAppAuthScalarWhereWithAggregatesInput | tblAppAuthScalarWhereWithAggregatesInput[]
    tblAppAuthID?: DecimalWithAggregatesFilter<"tblAppAuth"> | Decimal | DecimalJsLike | number | string
    appAuthID?: DecimalNullableWithAggregatesFilter<"tblAppAuth"> | Decimal | DecimalJsLike | number | string | null
    AppID?: DecimalNullableWithAggregatesFilter<"tblAppAuth"> | Decimal | DecimalJsLike | number | string | null
    userid?: StringNullableWithAggregatesFilter<"tblAppAuth"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblAppAuth"> | Date | string | null
  }

  export type tblAppModeAuthWhereInput = {
    AND?: tblAppModeAuthWhereInput | tblAppModeAuthWhereInput[]
    OR?: tblAppModeAuthWhereInput[]
    NOT?: tblAppModeAuthWhereInput | tblAppModeAuthWhereInput[]
    tblUserAppModAuthID?: DecimalFilter<"tblAppModeAuth"> | Decimal | DecimalJsLike | number | string
    moduleID?: DecimalNullableFilter<"tblAppModeAuth"> | Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: DecimalNullableFilter<"tblAppModeAuth"> | Decimal | DecimalJsLike | number | string | null
    userid?: StringNullableFilter<"tblAppModeAuth"> | string | null
    last_update?: DateTimeNullableFilter<"tblAppModeAuth"> | Date | string | null
  }

  export type tblAppModeAuthOrderByWithRelationInput = {
    tblUserAppModAuthID?: SortOrder
    moduleID?: SortOrderInput | SortOrder
    UserappModAuthID?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
  }

  export type tblAppModeAuthWhereUniqueInput = Prisma.AtLeast<{
    tblUserAppModAuthID?: Decimal | DecimalJsLike | number | string
    UserappModAuthID?: Decimal | DecimalJsLike | number | string
    AND?: tblAppModeAuthWhereInput | tblAppModeAuthWhereInput[]
    OR?: tblAppModeAuthWhereInput[]
    NOT?: tblAppModeAuthWhereInput | tblAppModeAuthWhereInput[]
    moduleID?: DecimalNullableFilter<"tblAppModeAuth"> | Decimal | DecimalJsLike | number | string | null
    userid?: StringNullableFilter<"tblAppModeAuth"> | string | null
    last_update?: DateTimeNullableFilter<"tblAppModeAuth"> | Date | string | null
  }, "tblUserAppModAuthID" | "tblUserAppModAuthID" | "UserappModAuthID">

  export type tblAppModeAuthOrderByWithAggregationInput = {
    tblUserAppModAuthID?: SortOrder
    moduleID?: SortOrderInput | SortOrder
    UserappModAuthID?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    _count?: tblAppModeAuthCountOrderByAggregateInput
    _avg?: tblAppModeAuthAvgOrderByAggregateInput
    _max?: tblAppModeAuthMaxOrderByAggregateInput
    _min?: tblAppModeAuthMinOrderByAggregateInput
    _sum?: tblAppModeAuthSumOrderByAggregateInput
  }

  export type tblAppModeAuthScalarWhereWithAggregatesInput = {
    AND?: tblAppModeAuthScalarWhereWithAggregatesInput | tblAppModeAuthScalarWhereWithAggregatesInput[]
    OR?: tblAppModeAuthScalarWhereWithAggregatesInput[]
    NOT?: tblAppModeAuthScalarWhereWithAggregatesInput | tblAppModeAuthScalarWhereWithAggregatesInput[]
    tblUserAppModAuthID?: DecimalWithAggregatesFilter<"tblAppModeAuth"> | Decimal | DecimalJsLike | number | string
    moduleID?: DecimalNullableWithAggregatesFilter<"tblAppModeAuth"> | Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: DecimalNullableWithAggregatesFilter<"tblAppModeAuth"> | Decimal | DecimalJsLike | number | string | null
    userid?: StringNullableWithAggregatesFilter<"tblAppModeAuth"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblAppModeAuth"> | Date | string | null
  }

  export type tblAppModulesWhereInput = {
    AND?: tblAppModulesWhereInput | tblAppModulesWhereInput[]
    OR?: tblAppModulesWhereInput[]
    NOT?: tblAppModulesWhereInput | tblAppModulesWhereInput[]
    tblAppModulesID?: DecimalFilter<"tblAppModules"> | Decimal | DecimalJsLike | number | string
    moduleID?: DecimalNullableFilter<"tblAppModules"> | Decimal | DecimalJsLike | number | string | null
    AppID?: DecimalNullableFilter<"tblAppModules"> | Decimal | DecimalJsLike | number | string | null
    ModuleName?: StringNullableFilter<"tblAppModules"> | string | null
  }

  export type tblAppModulesOrderByWithRelationInput = {
    tblAppModulesID?: SortOrder
    moduleID?: SortOrderInput | SortOrder
    AppID?: SortOrderInput | SortOrder
    ModuleName?: SortOrderInput | SortOrder
  }

  export type tblAppModulesWhereUniqueInput = Prisma.AtLeast<{
    tblAppModulesID?: Decimal | DecimalJsLike | number | string
    moduleID?: Decimal | DecimalJsLike | number | string
    AND?: tblAppModulesWhereInput | tblAppModulesWhereInput[]
    OR?: tblAppModulesWhereInput[]
    NOT?: tblAppModulesWhereInput | tblAppModulesWhereInput[]
    AppID?: DecimalNullableFilter<"tblAppModules"> | Decimal | DecimalJsLike | number | string | null
    ModuleName?: StringNullableFilter<"tblAppModules"> | string | null
  }, "tblAppModulesID" | "tblAppModulesID" | "moduleID">

  export type tblAppModulesOrderByWithAggregationInput = {
    tblAppModulesID?: SortOrder
    moduleID?: SortOrderInput | SortOrder
    AppID?: SortOrderInput | SortOrder
    ModuleName?: SortOrderInput | SortOrder
    _count?: tblAppModulesCountOrderByAggregateInput
    _avg?: tblAppModulesAvgOrderByAggregateInput
    _max?: tblAppModulesMaxOrderByAggregateInput
    _min?: tblAppModulesMinOrderByAggregateInput
    _sum?: tblAppModulesSumOrderByAggregateInput
  }

  export type tblAppModulesScalarWhereWithAggregatesInput = {
    AND?: tblAppModulesScalarWhereWithAggregatesInput | tblAppModulesScalarWhereWithAggregatesInput[]
    OR?: tblAppModulesScalarWhereWithAggregatesInput[]
    NOT?: tblAppModulesScalarWhereWithAggregatesInput | tblAppModulesScalarWhereWithAggregatesInput[]
    tblAppModulesID?: DecimalWithAggregatesFilter<"tblAppModules"> | Decimal | DecimalJsLike | number | string
    moduleID?: DecimalNullableWithAggregatesFilter<"tblAppModules"> | Decimal | DecimalJsLike | number | string | null
    AppID?: DecimalNullableWithAggregatesFilter<"tblAppModules"> | Decimal | DecimalJsLike | number | string | null
    ModuleName?: StringNullableWithAggregatesFilter<"tblAppModules"> | string | null
  }

  export type tblConsultWhereInput = {
    AND?: tblConsultWhereInput | tblConsultWhereInput[]
    OR?: tblConsultWhereInput[]
    NOT?: tblConsultWhereInput | tblConsultWhereInput[]
    tblConsultID?: DecimalFilter<"tblConsult"> | Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: DecimalNullableFilter<"tblConsult"> | Decimal | DecimalJsLike | number | string | null
    specialtyname?: StringNullableFilter<"tblConsult"> | string | null
  }

  export type tblConsultOrderByWithRelationInput = {
    tblConsultID?: SortOrder
    tblconsultspecialtyid?: SortOrderInput | SortOrder
    specialtyname?: SortOrderInput | SortOrder
  }

  export type tblConsultWhereUniqueInput = Prisma.AtLeast<{
    tblConsultID?: Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: Decimal | DecimalJsLike | number | string
    AND?: tblConsultWhereInput | tblConsultWhereInput[]
    OR?: tblConsultWhereInput[]
    NOT?: tblConsultWhereInput | tblConsultWhereInput[]
    specialtyname?: StringNullableFilter<"tblConsult"> | string | null
  }, "tblConsultID" | "tblConsultID" | "tblconsultspecialtyid">

  export type tblConsultOrderByWithAggregationInput = {
    tblConsultID?: SortOrder
    tblconsultspecialtyid?: SortOrderInput | SortOrder
    specialtyname?: SortOrderInput | SortOrder
    _count?: tblConsultCountOrderByAggregateInput
    _avg?: tblConsultAvgOrderByAggregateInput
    _max?: tblConsultMaxOrderByAggregateInput
    _min?: tblConsultMinOrderByAggregateInput
    _sum?: tblConsultSumOrderByAggregateInput
  }

  export type tblConsultScalarWhereWithAggregatesInput = {
    AND?: tblConsultScalarWhereWithAggregatesInput | tblConsultScalarWhereWithAggregatesInput[]
    OR?: tblConsultScalarWhereWithAggregatesInput[]
    NOT?: tblConsultScalarWhereWithAggregatesInput | tblConsultScalarWhereWithAggregatesInput[]
    tblConsultID?: DecimalWithAggregatesFilter<"tblConsult"> | Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: DecimalNullableWithAggregatesFilter<"tblConsult"> | Decimal | DecimalJsLike | number | string | null
    specialtyname?: StringNullableWithAggregatesFilter<"tblConsult"> | string | null
  }

  export type tblCounterWhereInput = {
    AND?: tblCounterWhereInput | tblCounterWhereInput[]
    OR?: tblCounterWhereInput[]
    NOT?: tblCounterWhereInput | tblCounterWhereInput[]
    tblCounterID?: DecimalFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string
    currentCount?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    ratz?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    acu?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    ucc?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    triageout?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblCounterOrderByWithRelationInput = {
    tblCounterID?: SortOrder
    currentCount?: SortOrderInput | SortOrder
    ratz?: SortOrderInput | SortOrder
    acu?: SortOrderInput | SortOrder
    ucc?: SortOrderInput | SortOrder
    triageout?: SortOrderInput | SortOrder
  }

  export type tblCounterWhereUniqueInput = Prisma.AtLeast<{
    tblCounterID?: Decimal | DecimalJsLike | number | string
    AND?: tblCounterWhereInput | tblCounterWhereInput[]
    OR?: tblCounterWhereInput[]
    NOT?: tblCounterWhereInput | tblCounterWhereInput[]
    currentCount?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    ratz?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    acu?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    ucc?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    triageout?: DecimalNullableFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
  }, "tblCounterID" | "tblCounterID">

  export type tblCounterOrderByWithAggregationInput = {
    tblCounterID?: SortOrder
    currentCount?: SortOrderInput | SortOrder
    ratz?: SortOrderInput | SortOrder
    acu?: SortOrderInput | SortOrder
    ucc?: SortOrderInput | SortOrder
    triageout?: SortOrderInput | SortOrder
    _count?: tblCounterCountOrderByAggregateInput
    _avg?: tblCounterAvgOrderByAggregateInput
    _max?: tblCounterMaxOrderByAggregateInput
    _min?: tblCounterMinOrderByAggregateInput
    _sum?: tblCounterSumOrderByAggregateInput
  }

  export type tblCounterScalarWhereWithAggregatesInput = {
    AND?: tblCounterScalarWhereWithAggregatesInput | tblCounterScalarWhereWithAggregatesInput[]
    OR?: tblCounterScalarWhereWithAggregatesInput[]
    NOT?: tblCounterScalarWhereWithAggregatesInput | tblCounterScalarWhereWithAggregatesInput[]
    tblCounterID?: DecimalWithAggregatesFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string
    currentCount?: DecimalNullableWithAggregatesFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    ratz?: DecimalNullableWithAggregatesFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    acu?: DecimalNullableWithAggregatesFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    ucc?: DecimalNullableWithAggregatesFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
    triageout?: DecimalNullableWithAggregatesFilter<"tblCounter"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblDepartmentWhereInput = {
    AND?: tblDepartmentWhereInput | tblDepartmentWhereInput[]
    OR?: tblDepartmentWhereInput[]
    NOT?: tblDepartmentWhereInput | tblDepartmentWhereInput[]
    tblDepartmentID?: DecimalFilter<"tblDepartment"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableFilter<"tblDepartment"> | string | null
    deptname?: StringNullableFilter<"tblDepartment"> | string | null
    Patient?: PatientListRelationFilter
  }

  export type tblDepartmentOrderByWithRelationInput = {
    tblDepartmentID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    Patient?: PatientOrderByRelationAggregateInput
  }

  export type tblDepartmentWhereUniqueInput = Prisma.AtLeast<{
    tblDepartmentID?: Decimal | DecimalJsLike | number | string
    deptcode?: string
    AND?: tblDepartmentWhereInput | tblDepartmentWhereInput[]
    OR?: tblDepartmentWhereInput[]
    NOT?: tblDepartmentWhereInput | tblDepartmentWhereInput[]
    deptname?: StringNullableFilter<"tblDepartment"> | string | null
    Patient?: PatientListRelationFilter
  }, "tblDepartmentID" | "deptcode">

  export type tblDepartmentOrderByWithAggregationInput = {
    tblDepartmentID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    _count?: tblDepartmentCountOrderByAggregateInput
    _avg?: tblDepartmentAvgOrderByAggregateInput
    _max?: tblDepartmentMaxOrderByAggregateInput
    _min?: tblDepartmentMinOrderByAggregateInput
    _sum?: tblDepartmentSumOrderByAggregateInput
  }

  export type tblDepartmentScalarWhereWithAggregatesInput = {
    AND?: tblDepartmentScalarWhereWithAggregatesInput | tblDepartmentScalarWhereWithAggregatesInput[]
    OR?: tblDepartmentScalarWhereWithAggregatesInput[]
    NOT?: tblDepartmentScalarWhereWithAggregatesInput | tblDepartmentScalarWhereWithAggregatesInput[]
    tblDepartmentID?: DecimalWithAggregatesFilter<"tblDepartment"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableWithAggregatesFilter<"tblDepartment"> | string | null
    deptname?: StringNullableWithAggregatesFilter<"tblDepartment"> | string | null
  }

  export type tblLocationWhereInput = {
    AND?: tblLocationWhereInput | tblLocationWhereInput[]
    OR?: tblLocationWhereInput[]
    NOT?: tblLocationWhereInput | tblLocationWhereInput[]
    tblLocationID?: DecimalFilter<"tblLocation"> | Decimal | DecimalJsLike | number | string
    loccode?: StringNullableFilter<"tblLocation"> | string | null
    deptcode?: StringNullableFilter<"tblLocation"> | string | null
    locationname?: StringNullableFilter<"tblLocation"> | string | null
  }

  export type tblLocationOrderByWithRelationInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
  }

  export type tblLocationWhereUniqueInput = Prisma.AtLeast<{
    tblLocationID?: Decimal | DecimalJsLike | number | string
    loccode?: string
    AND?: tblLocationWhereInput | tblLocationWhereInput[]
    OR?: tblLocationWhereInput[]
    NOT?: tblLocationWhereInput | tblLocationWhereInput[]
    deptcode?: StringNullableFilter<"tblLocation"> | string | null
    locationname?: StringNullableFilter<"tblLocation"> | string | null
  }, "tblLocationID" | "tblLocationID" | "loccode">

  export type tblLocationOrderByWithAggregationInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    _count?: tblLocationCountOrderByAggregateInput
    _avg?: tblLocationAvgOrderByAggregateInput
    _max?: tblLocationMaxOrderByAggregateInput
    _min?: tblLocationMinOrderByAggregateInput
    _sum?: tblLocationSumOrderByAggregateInput
  }

  export type tblLocationScalarWhereWithAggregatesInput = {
    AND?: tblLocationScalarWhereWithAggregatesInput | tblLocationScalarWhereWithAggregatesInput[]
    OR?: tblLocationScalarWhereWithAggregatesInput[]
    NOT?: tblLocationScalarWhereWithAggregatesInput | tblLocationScalarWhereWithAggregatesInput[]
    tblLocationID?: DecimalWithAggregatesFilter<"tblLocation"> | Decimal | DecimalJsLike | number | string
    loccode?: StringNullableWithAggregatesFilter<"tblLocation"> | string | null
    deptcode?: StringNullableWithAggregatesFilter<"tblLocation"> | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblLocation"> | string | null
  }

  export type tblLocationSessionWhereInput = {
    AND?: tblLocationSessionWhereInput | tblLocationSessionWhereInput[]
    OR?: tblLocationSessionWhereInput[]
    NOT?: tblLocationSessionWhereInput | tblLocationSessionWhereInput[]
    tblLocationSessionID?: DecimalFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string
    loccode?: StringFilter<"tblLocationSession"> | string
    deptcode?: StringNullableFilter<"tblLocationSession"> | string | null
    qnumber?: DecimalFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string
    start_dt?: DateTimeNullableFilter<"tblLocationSession"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblLocationSession"> | Date | string | null
    tblQueueID?: DecimalNullableFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
    name?: StringNullableFilter<"tblLocationSession"> | string | null
    dept_counter?: DecimalNullableFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
    locationname?: StringNullableFilter<"tblLocationSession"> | string | null
    status?: DecimalNullableFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblLocationSessionOrderByWithRelationInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    tblQueueID?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
  }

  export type tblLocationSessionWhereUniqueInput = Prisma.AtLeast<{
    tblLocationSessionID?: Decimal | DecimalJsLike | number | string
    qnumber?: Decimal | DecimalJsLike | number | string
    AND?: tblLocationSessionWhereInput | tblLocationSessionWhereInput[]
    OR?: tblLocationSessionWhereInput[]
    NOT?: tblLocationSessionWhereInput | tblLocationSessionWhereInput[]
    loccode?: StringFilter<"tblLocationSession"> | string
    deptcode?: StringNullableFilter<"tblLocationSession"> | string | null
    start_dt?: DateTimeNullableFilter<"tblLocationSession"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblLocationSession"> | Date | string | null
    tblQueueID?: DecimalNullableFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
    name?: StringNullableFilter<"tblLocationSession"> | string | null
    dept_counter?: DecimalNullableFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
    locationname?: StringNullableFilter<"tblLocationSession"> | string | null
    status?: DecimalNullableFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
  }, "qnumber" | "tblLocationSessionID">

  export type tblLocationSessionOrderByWithAggregationInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    tblQueueID?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: tblLocationSessionCountOrderByAggregateInput
    _avg?: tblLocationSessionAvgOrderByAggregateInput
    _max?: tblLocationSessionMaxOrderByAggregateInput
    _min?: tblLocationSessionMinOrderByAggregateInput
    _sum?: tblLocationSessionSumOrderByAggregateInput
  }

  export type tblLocationSessionScalarWhereWithAggregatesInput = {
    AND?: tblLocationSessionScalarWhereWithAggregatesInput | tblLocationSessionScalarWhereWithAggregatesInput[]
    OR?: tblLocationSessionScalarWhereWithAggregatesInput[]
    NOT?: tblLocationSessionScalarWhereWithAggregatesInput | tblLocationSessionScalarWhereWithAggregatesInput[]
    tblLocationSessionID?: DecimalWithAggregatesFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string
    loccode?: StringWithAggregatesFilter<"tblLocationSession"> | string
    deptcode?: StringNullableWithAggregatesFilter<"tblLocationSession"> | string | null
    qnumber?: DecimalWithAggregatesFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string
    start_dt?: DateTimeNullableWithAggregatesFilter<"tblLocationSession"> | Date | string | null
    finish_dt?: DateTimeNullableWithAggregatesFilter<"tblLocationSession"> | Date | string | null
    tblQueueID?: DecimalNullableWithAggregatesFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
    name?: StringNullableWithAggregatesFilter<"tblLocationSession"> | string | null
    dept_counter?: DecimalNullableWithAggregatesFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblLocationSession"> | string | null
    status?: DecimalNullableWithAggregatesFilter<"tblLocationSession"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveWhereInput = {
    AND?: tbllocationsessionArchieveWhereInput | tbllocationsessionArchieveWhereInput[]
    OR?: tbllocationsessionArchieveWhereInput[]
    NOT?: tbllocationsessionArchieveWhereInput | tbllocationsessionArchieveWhereInput[]
    tblLocationSessionID?: DecimalFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string
    loccode?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    deptcode?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    qnumber?: DecimalFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string
    start_dt?: DateTimeNullableFilter<"tbllocationsessionArchieve"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tbllocationsessionArchieve"> | Date | string | null
    tblQueueID?: DecimalNullableFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
    name?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    dept_counter?: DecimalNullableFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
    locationname?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    status?: DecimalNullableFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveOrderByWithRelationInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    tblQueueID?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
  }

  export type tbllocationsessionArchieveWhereUniqueInput = Prisma.AtLeast<{
    qnumber?: Decimal | DecimalJsLike | number | string
    AND?: tbllocationsessionArchieveWhereInput | tbllocationsessionArchieveWhereInput[]
    OR?: tbllocationsessionArchieveWhereInput[]
    NOT?: tbllocationsessionArchieveWhereInput | tbllocationsessionArchieveWhereInput[]
    tblLocationSessionID?: DecimalFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string
    loccode?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    deptcode?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    start_dt?: DateTimeNullableFilter<"tbllocationsessionArchieve"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tbllocationsessionArchieve"> | Date | string | null
    tblQueueID?: DecimalNullableFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
    name?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    dept_counter?: DecimalNullableFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
    locationname?: StringNullableFilter<"tbllocationsessionArchieve"> | string | null
    status?: DecimalNullableFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
  }, "qnumber">

  export type tbllocationsessionArchieveOrderByWithAggregationInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    tblQueueID?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: tbllocationsessionArchieveCountOrderByAggregateInput
    _avg?: tbllocationsessionArchieveAvgOrderByAggregateInput
    _max?: tbllocationsessionArchieveMaxOrderByAggregateInput
    _min?: tbllocationsessionArchieveMinOrderByAggregateInput
    _sum?: tbllocationsessionArchieveSumOrderByAggregateInput
  }

  export type tbllocationsessionArchieveScalarWhereWithAggregatesInput = {
    AND?: tbllocationsessionArchieveScalarWhereWithAggregatesInput | tbllocationsessionArchieveScalarWhereWithAggregatesInput[]
    OR?: tbllocationsessionArchieveScalarWhereWithAggregatesInput[]
    NOT?: tbllocationsessionArchieveScalarWhereWithAggregatesInput | tbllocationsessionArchieveScalarWhereWithAggregatesInput[]
    tblLocationSessionID?: DecimalWithAggregatesFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string
    loccode?: StringNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | string | null
    deptcode?: StringNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | string | null
    qnumber?: DecimalWithAggregatesFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string
    start_dt?: DateTimeNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | Date | string | null
    finish_dt?: DateTimeNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | Date | string | null
    tblQueueID?: DecimalNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
    name?: StringNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | string | null
    dept_counter?: DecimalNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
    locationname?: StringNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | string | null
    status?: DecimalNullableWithAggregatesFilter<"tbllocationsessionArchieve"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWhereInput = {
    AND?: tblQueueWhereInput | tblQueueWhereInput[]
    OR?: tblQueueWhereInput[]
    NOT?: tblQueueWhereInput | tblQueueWhereInput[]
    tblQueueID?: DecimalFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableFilter<"tblQueue"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueue"> | string | null
    deptname?: StringNullableFilter<"tblQueue"> | string | null
    name?: StringNullableFilter<"tblQueue"> | string | null
    userid?: StringNullableFilter<"tblQueue"> | string | null
    locationname?: StringNullableFilter<"tblQueue"> | string | null
    nationality?: StringNullableFilter<"tblQueue"> | string | null
    id?: StringNullableFilter<"tblQueue"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueue"> | string | null
    complain?: StringNullableFilter<"tblQueue"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    bp?: StringNullableFilter<"tblQueue"> | string | null
    temp?: StringNullableFilter<"tblQueue"> | string | null
    hr?: StringNullableFilter<"tblQueue"> | string | null
    rr?: StringNullableFilter<"tblQueue"> | string | null
    spo2?: StringNullableFilter<"tblQueue"> | string | null
    rbs?: StringNullableFilter<"tblQueue"> | string | null
    height?: StringNullableFilter<"tblQueue"> | string | null
    weight?: StringNullableFilter<"tblQueue"> | string | null
    allergies?: StringNullableFilter<"tblQueue"> | string | null
    bedassignment?: StringNullableFilter<"tblQueue"> | string | null
    override?: IntNullableFilter<"tblQueue"> | number | null
    critical?: IntNullableFilter<"tblQueue"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueue"> | string | null
    category?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueue"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueue"> | string | null
    returnvisit72Hrs?: IntNullableFilter<"tblQueue"> | number | null
    admitted?: IntNullableFilter<"tblQueue"> | number | null
    admittedIn?: StringNullableFilter<"tblQueue"> | string | null
    consulted?: IntNullableFilter<"tblQueue"> | number | null
    consultspecialtyid?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    consultarrive?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    consultdesicion?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    transferred?: IntNullableFilter<"tblQueue"> | number | null
    transferid?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    Pmh?: StringNullableFilter<"tblQueue"> | string | null
    ticket?: IntNullableFilter<"tblQueue"> | number | null
  }

  export type tblQueueOrderByWithRelationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
    returnvisit72Hrs?: SortOrderInput | SortOrder
    admitted?: SortOrderInput | SortOrder
    admittedIn?: SortOrderInput | SortOrder
    consulted?: SortOrderInput | SortOrder
    consultspecialtyid?: SortOrderInput | SortOrder
    consultassign?: SortOrderInput | SortOrder
    consultarrive?: SortOrderInput | SortOrder
    consultdesicion?: SortOrderInput | SortOrder
    transferred?: SortOrderInput | SortOrder
    transferid?: SortOrderInput | SortOrder
    Pmh?: SortOrderInput | SortOrder
    ticket?: SortOrderInput | SortOrder
  }

  export type tblQueueWhereUniqueInput = Prisma.AtLeast<{
    tblQueueID?: Decimal | DecimalJsLike | number | string
    AND?: tblQueueWhereInput | tblQueueWhereInput[]
    OR?: tblQueueWhereInput[]
    NOT?: tblQueueWhereInput | tblQueueWhereInput[]
    deptcode?: StringNullableFilter<"tblQueue"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueue"> | string | null
    deptname?: StringNullableFilter<"tblQueue"> | string | null
    name?: StringNullableFilter<"tblQueue"> | string | null
    userid?: StringNullableFilter<"tblQueue"> | string | null
    locationname?: StringNullableFilter<"tblQueue"> | string | null
    nationality?: StringNullableFilter<"tblQueue"> | string | null
    id?: StringNullableFilter<"tblQueue"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueue"> | string | null
    complain?: StringNullableFilter<"tblQueue"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    bp?: StringNullableFilter<"tblQueue"> | string | null
    temp?: StringNullableFilter<"tblQueue"> | string | null
    hr?: StringNullableFilter<"tblQueue"> | string | null
    rr?: StringNullableFilter<"tblQueue"> | string | null
    spo2?: StringNullableFilter<"tblQueue"> | string | null
    rbs?: StringNullableFilter<"tblQueue"> | string | null
    height?: StringNullableFilter<"tblQueue"> | string | null
    weight?: StringNullableFilter<"tblQueue"> | string | null
    allergies?: StringNullableFilter<"tblQueue"> | string | null
    bedassignment?: StringNullableFilter<"tblQueue"> | string | null
    override?: IntNullableFilter<"tblQueue"> | number | null
    critical?: IntNullableFilter<"tblQueue"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueue"> | string | null
    category?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueue"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueue"> | string | null
    returnvisit72Hrs?: IntNullableFilter<"tblQueue"> | number | null
    admitted?: IntNullableFilter<"tblQueue"> | number | null
    admittedIn?: StringNullableFilter<"tblQueue"> | string | null
    consulted?: IntNullableFilter<"tblQueue"> | number | null
    consultspecialtyid?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    consultarrive?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    consultdesicion?: DateTimeNullableFilter<"tblQueue"> | Date | string | null
    transferred?: IntNullableFilter<"tblQueue"> | number | null
    transferid?: DecimalNullableFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    Pmh?: StringNullableFilter<"tblQueue"> | string | null
    ticket?: IntNullableFilter<"tblQueue"> | number | null
  }, "tblQueueID" | "tblQueueID">

  export type tblQueueOrderByWithAggregationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
    returnvisit72Hrs?: SortOrderInput | SortOrder
    admitted?: SortOrderInput | SortOrder
    admittedIn?: SortOrderInput | SortOrder
    consulted?: SortOrderInput | SortOrder
    consultspecialtyid?: SortOrderInput | SortOrder
    consultassign?: SortOrderInput | SortOrder
    consultarrive?: SortOrderInput | SortOrder
    consultdesicion?: SortOrderInput | SortOrder
    transferred?: SortOrderInput | SortOrder
    transferid?: SortOrderInput | SortOrder
    Pmh?: SortOrderInput | SortOrder
    ticket?: SortOrderInput | SortOrder
    _count?: tblQueueCountOrderByAggregateInput
    _avg?: tblQueueAvgOrderByAggregateInput
    _max?: tblQueueMaxOrderByAggregateInput
    _min?: tblQueueMinOrderByAggregateInput
    _sum?: tblQueueSumOrderByAggregateInput
  }

  export type tblQueueScalarWhereWithAggregatesInput = {
    AND?: tblQueueScalarWhereWithAggregatesInput | tblQueueScalarWhereWithAggregatesInput[]
    OR?: tblQueueScalarWhereWithAggregatesInput[]
    NOT?: tblQueueScalarWhereWithAggregatesInput | tblQueueScalarWhereWithAggregatesInput[]
    tblQueueID?: DecimalWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    qnumber?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    start_dt?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    finish_dt?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    status?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    deptname?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    name?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    userid?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    id?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    patient_age?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    complain?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    triage_dt?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    bp?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    temp?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    hr?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    rr?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    spo2?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    rbs?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    height?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    weight?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    allergies?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    bedassignment?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    override?: IntNullableWithAggregatesFilter<"tblQueue"> | number | null
    critical?: IntNullableWithAggregatesFilter<"tblQueue"> | number | null
    criticalmsg?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    category?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    mobileno?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    returnvisit72Hrs?: IntNullableWithAggregatesFilter<"tblQueue"> | number | null
    admitted?: IntNullableWithAggregatesFilter<"tblQueue"> | number | null
    admittedIn?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    consulted?: IntNullableWithAggregatesFilter<"tblQueue"> | number | null
    consultspecialtyid?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    consultarrive?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    consultdesicion?: DateTimeNullableWithAggregatesFilter<"tblQueue"> | Date | string | null
    transferred?: IntNullableWithAggregatesFilter<"tblQueue"> | number | null
    transferid?: DecimalNullableWithAggregatesFilter<"tblQueue"> | Decimal | DecimalJsLike | number | string | null
    Pmh?: StringNullableWithAggregatesFilter<"tblQueue"> | string | null
    ticket?: IntNullableWithAggregatesFilter<"tblQueue"> | number | null
  }

  export type tblQueueArchieveWhereInput = {
    AND?: tblQueueArchieveWhereInput | tblQueueArchieveWhereInput[]
    OR?: tblQueueArchieveWhereInput[]
    NOT?: tblQueueArchieveWhereInput | tblQueueArchieveWhereInput[]
    tblQueueID?: DecimalFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableFilter<"tblQueueArchieve"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueueArchieve"> | string | null
    deptname?: StringNullableFilter<"tblQueueArchieve"> | string | null
    name?: StringNullableFilter<"tblQueueArchieve"> | string | null
    userid?: StringNullableFilter<"tblQueueArchieve"> | string | null
    locationname?: StringNullableFilter<"tblQueueArchieve"> | string | null
    nationality?: StringNullableFilter<"tblQueueArchieve"> | string | null
    id?: StringNullableFilter<"tblQueueArchieve"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueueArchieve"> | string | null
    complain?: StringNullableFilter<"tblQueueArchieve"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    bp?: StringNullableFilter<"tblQueueArchieve"> | string | null
    temp?: StringNullableFilter<"tblQueueArchieve"> | string | null
    hr?: StringNullableFilter<"tblQueueArchieve"> | string | null
    rr?: StringNullableFilter<"tblQueueArchieve"> | string | null
    spo2?: StringNullableFilter<"tblQueueArchieve"> | string | null
    rbs?: StringNullableFilter<"tblQueueArchieve"> | string | null
    height?: StringNullableFilter<"tblQueueArchieve"> | string | null
    weight?: StringNullableFilter<"tblQueueArchieve"> | string | null
    allergies?: StringNullableFilter<"tblQueueArchieve"> | string | null
    bedassignment?: StringNullableFilter<"tblQueueArchieve"> | string | null
    override?: IntNullableFilter<"tblQueueArchieve"> | number | null
    critical?: IntNullableFilter<"tblQueueArchieve"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueueArchieve"> | string | null
    category?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueueArchieve"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueueArchieve"> | string | null
    returnvisit72Hrs?: IntNullableFilter<"tblQueueArchieve"> | number | null
    admitted?: IntNullableFilter<"tblQueueArchieve"> | number | null
    admittedIn?: StringNullableFilter<"tblQueueArchieve"> | string | null
    consulted?: IntNullableFilter<"tblQueueArchieve"> | number | null
    consultspecialtyid?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    consultarrive?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    consultdesicion?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    transferred?: IntNullableFilter<"tblQueueArchieve"> | number | null
    transferid?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    ticket?: IntNullableFilter<"tblQueueArchieve"> | number | null
    Pmh?: StringNullableFilter<"tblQueueArchieve"> | string | null
  }

  export type tblQueueArchieveOrderByWithRelationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
    returnvisit72Hrs?: SortOrderInput | SortOrder
    admitted?: SortOrderInput | SortOrder
    admittedIn?: SortOrderInput | SortOrder
    consulted?: SortOrderInput | SortOrder
    consultspecialtyid?: SortOrderInput | SortOrder
    consultassign?: SortOrderInput | SortOrder
    consultarrive?: SortOrderInput | SortOrder
    consultdesicion?: SortOrderInput | SortOrder
    transferred?: SortOrderInput | SortOrder
    transferid?: SortOrderInput | SortOrder
    ticket?: SortOrderInput | SortOrder
    Pmh?: SortOrderInput | SortOrder
  }

  export type tblQueueArchieveWhereUniqueInput = Prisma.AtLeast<{
    tblQueueID?: Decimal | DecimalJsLike | number | string
    AND?: tblQueueArchieveWhereInput | tblQueueArchieveWhereInput[]
    OR?: tblQueueArchieveWhereInput[]
    NOT?: tblQueueArchieveWhereInput | tblQueueArchieveWhereInput[]
    deptcode?: StringNullableFilter<"tblQueueArchieve"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueueArchieve"> | string | null
    deptname?: StringNullableFilter<"tblQueueArchieve"> | string | null
    name?: StringNullableFilter<"tblQueueArchieve"> | string | null
    userid?: StringNullableFilter<"tblQueueArchieve"> | string | null
    locationname?: StringNullableFilter<"tblQueueArchieve"> | string | null
    nationality?: StringNullableFilter<"tblQueueArchieve"> | string | null
    id?: StringNullableFilter<"tblQueueArchieve"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueueArchieve"> | string | null
    complain?: StringNullableFilter<"tblQueueArchieve"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    bp?: StringNullableFilter<"tblQueueArchieve"> | string | null
    temp?: StringNullableFilter<"tblQueueArchieve"> | string | null
    hr?: StringNullableFilter<"tblQueueArchieve"> | string | null
    rr?: StringNullableFilter<"tblQueueArchieve"> | string | null
    spo2?: StringNullableFilter<"tblQueueArchieve"> | string | null
    rbs?: StringNullableFilter<"tblQueueArchieve"> | string | null
    height?: StringNullableFilter<"tblQueueArchieve"> | string | null
    weight?: StringNullableFilter<"tblQueueArchieve"> | string | null
    allergies?: StringNullableFilter<"tblQueueArchieve"> | string | null
    bedassignment?: StringNullableFilter<"tblQueueArchieve"> | string | null
    override?: IntNullableFilter<"tblQueueArchieve"> | number | null
    critical?: IntNullableFilter<"tblQueueArchieve"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueueArchieve"> | string | null
    category?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueueArchieve"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueueArchieve"> | string | null
    returnvisit72Hrs?: IntNullableFilter<"tblQueueArchieve"> | number | null
    admitted?: IntNullableFilter<"tblQueueArchieve"> | number | null
    admittedIn?: StringNullableFilter<"tblQueueArchieve"> | string | null
    consulted?: IntNullableFilter<"tblQueueArchieve"> | number | null
    consultspecialtyid?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    consultarrive?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    consultdesicion?: DateTimeNullableFilter<"tblQueueArchieve"> | Date | string | null
    transferred?: IntNullableFilter<"tblQueueArchieve"> | number | null
    transferid?: DecimalNullableFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    ticket?: IntNullableFilter<"tblQueueArchieve"> | number | null
    Pmh?: StringNullableFilter<"tblQueueArchieve"> | string | null
  }, "tblQueueID" | "tblQueueID">

  export type tblQueueArchieveOrderByWithAggregationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
    returnvisit72Hrs?: SortOrderInput | SortOrder
    admitted?: SortOrderInput | SortOrder
    admittedIn?: SortOrderInput | SortOrder
    consulted?: SortOrderInput | SortOrder
    consultspecialtyid?: SortOrderInput | SortOrder
    consultassign?: SortOrderInput | SortOrder
    consultarrive?: SortOrderInput | SortOrder
    consultdesicion?: SortOrderInput | SortOrder
    transferred?: SortOrderInput | SortOrder
    transferid?: SortOrderInput | SortOrder
    ticket?: SortOrderInput | SortOrder
    Pmh?: SortOrderInput | SortOrder
    _count?: tblQueueArchieveCountOrderByAggregateInput
    _avg?: tblQueueArchieveAvgOrderByAggregateInput
    _max?: tblQueueArchieveMaxOrderByAggregateInput
    _min?: tblQueueArchieveMinOrderByAggregateInput
    _sum?: tblQueueArchieveSumOrderByAggregateInput
  }

  export type tblQueueArchieveScalarWhereWithAggregatesInput = {
    AND?: tblQueueArchieveScalarWhereWithAggregatesInput | tblQueueArchieveScalarWhereWithAggregatesInput[]
    OR?: tblQueueArchieveScalarWhereWithAggregatesInput[]
    NOT?: tblQueueArchieveScalarWhereWithAggregatesInput | tblQueueArchieveScalarWhereWithAggregatesInput[]
    tblQueueID?: DecimalWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    qnumber?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    start_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    finish_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    status?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    deptname?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    name?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    userid?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    id?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    patient_age?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    complain?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    triage_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    bp?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    temp?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    hr?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    rr?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    spo2?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    rbs?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    height?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    weight?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    allergies?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    bedassignment?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    override?: IntNullableWithAggregatesFilter<"tblQueueArchieve"> | number | null
    critical?: IntNullableWithAggregatesFilter<"tblQueueArchieve"> | number | null
    criticalmsg?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    category?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    mobileno?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    returnvisit72Hrs?: IntNullableWithAggregatesFilter<"tblQueueArchieve"> | number | null
    admitted?: IntNullableWithAggregatesFilter<"tblQueueArchieve"> | number | null
    admittedIn?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
    consulted?: IntNullableWithAggregatesFilter<"tblQueueArchieve"> | number | null
    consultspecialtyid?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    consultarrive?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    consultdesicion?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieve"> | Date | string | null
    transferred?: IntNullableWithAggregatesFilter<"tblQueueArchieve"> | number | null
    transferid?: DecimalNullableWithAggregatesFilter<"tblQueueArchieve"> | Decimal | DecimalJsLike | number | string | null
    ticket?: IntNullableWithAggregatesFilter<"tblQueueArchieve"> | number | null
    Pmh?: StringNullableWithAggregatesFilter<"tblQueueArchieve"> | string | null
  }

  export type tblQueueArchieveTempWhereInput = {
    AND?: tblQueueArchieveTempWhereInput | tblQueueArchieveTempWhereInput[]
    OR?: tblQueueArchieveTempWhereInput[]
    NOT?: tblQueueArchieveTempWhereInput | tblQueueArchieveTempWhereInput[]
    tblQueueID?: DecimalFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    deptname?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    name?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    userid?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    locationname?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    nationality?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    id?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    complain?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    bp?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    temp?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    hr?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    rr?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    spo2?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    rbs?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    height?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    weight?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    allergies?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    bedassignment?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    override?: IntNullableFilter<"tblQueueArchieveTemp"> | number | null
    critical?: IntNullableFilter<"tblQueueArchieveTemp"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    category?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
  }

  export type tblQueueArchieveTempOrderByWithRelationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
  }

  export type tblQueueArchieveTempWhereUniqueInput = Prisma.AtLeast<{
    tblQueueID?: Decimal | DecimalJsLike | number | string
    AND?: tblQueueArchieveTempWhereInput | tblQueueArchieveTempWhereInput[]
    OR?: tblQueueArchieveTempWhereInput[]
    NOT?: tblQueueArchieveTempWhereInput | tblQueueArchieveTempWhereInput[]
    deptcode?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    deptname?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    name?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    userid?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    locationname?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    nationality?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    id?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    complain?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    bp?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    temp?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    hr?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    rr?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    spo2?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    rbs?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    height?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    weight?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    allergies?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    bedassignment?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    override?: IntNullableFilter<"tblQueueArchieveTemp"> | number | null
    critical?: IntNullableFilter<"tblQueueArchieveTemp"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    category?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueueArchieveTemp"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueueArchieveTemp"> | string | null
  }, "tblQueueID" | "tblQueueID">

  export type tblQueueArchieveTempOrderByWithAggregationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
    _count?: tblQueueArchieveTempCountOrderByAggregateInput
    _avg?: tblQueueArchieveTempAvgOrderByAggregateInput
    _max?: tblQueueArchieveTempMaxOrderByAggregateInput
    _min?: tblQueueArchieveTempMinOrderByAggregateInput
    _sum?: tblQueueArchieveTempSumOrderByAggregateInput
  }

  export type tblQueueArchieveTempScalarWhereWithAggregatesInput = {
    AND?: tblQueueArchieveTempScalarWhereWithAggregatesInput | tblQueueArchieveTempScalarWhereWithAggregatesInput[]
    OR?: tblQueueArchieveTempScalarWhereWithAggregatesInput[]
    NOT?: tblQueueArchieveTempScalarWhereWithAggregatesInput | tblQueueArchieveTempScalarWhereWithAggregatesInput[]
    tblQueueID?: DecimalWithAggregatesFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    qnumber?: DecimalNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Date | string | null
    start_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Date | string | null
    finish_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Date | string | null
    status?: DecimalNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    deptname?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    name?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    userid?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    id?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    patient_age?: DecimalNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    complain?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    triage_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Date | string | null
    bp?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    temp?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    hr?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    rr?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    spo2?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    rbs?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    height?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    weight?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    allergies?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    bedassignment?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    override?: IntNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | number | null
    critical?: IntNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | number | null
    criticalmsg?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    category?: DecimalNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | Date | string | null
    mobileno?: StringNullableWithAggregatesFilter<"tblQueueArchieveTemp"> | string | null
  }

  export type tblQueuePulmoWhereInput = {
    AND?: tblQueuePulmoWhereInput | tblQueuePulmoWhereInput[]
    OR?: tblQueuePulmoWhereInput[]
    NOT?: tblQueuePulmoWhereInput | tblQueuePulmoWhereInput[]
    tblQueueID?: DecimalFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableFilter<"tblQueuePulmo"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueuePulmo"> | string | null
    deptname?: StringNullableFilter<"tblQueuePulmo"> | string | null
    name?: StringNullableFilter<"tblQueuePulmo"> | string | null
    userid?: StringNullableFilter<"tblQueuePulmo"> | string | null
    locationname?: StringNullableFilter<"tblQueuePulmo"> | string | null
    nationality?: StringNullableFilter<"tblQueuePulmo"> | string | null
    id?: StringNullableFilter<"tblQueuePulmo"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueuePulmo"> | string | null
    complain?: StringNullableFilter<"tblQueuePulmo"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    bp?: StringNullableFilter<"tblQueuePulmo"> | string | null
    temp?: StringNullableFilter<"tblQueuePulmo"> | string | null
    hr?: StringNullableFilter<"tblQueuePulmo"> | string | null
    rr?: StringNullableFilter<"tblQueuePulmo"> | string | null
    spo2?: StringNullableFilter<"tblQueuePulmo"> | string | null
    rbs?: StringNullableFilter<"tblQueuePulmo"> | string | null
    height?: StringNullableFilter<"tblQueuePulmo"> | string | null
    weight?: StringNullableFilter<"tblQueuePulmo"> | string | null
    allergies?: StringNullableFilter<"tblQueuePulmo"> | string | null
    bedassignment?: StringNullableFilter<"tblQueuePulmo"> | string | null
    override?: IntNullableFilter<"tblQueuePulmo"> | number | null
    critical?: IntNullableFilter<"tblQueuePulmo"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueuePulmo"> | string | null
    category?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueuePulmo"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueuePulmo"> | string | null
    returnvisit72Hrs?: IntNullableFilter<"tblQueuePulmo"> | number | null
    admitted?: IntNullableFilter<"tblQueuePulmo"> | number | null
    admittedIn?: StringNullableFilter<"tblQueuePulmo"> | string | null
    consulted?: IntNullableFilter<"tblQueuePulmo"> | number | null
    consultspecialtyid?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    consultarrive?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    consultdesicion?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    transferred?: IntNullableFilter<"tblQueuePulmo"> | number | null
    transferid?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueuePulmoOrderByWithRelationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
    returnvisit72Hrs?: SortOrderInput | SortOrder
    admitted?: SortOrderInput | SortOrder
    admittedIn?: SortOrderInput | SortOrder
    consulted?: SortOrderInput | SortOrder
    consultspecialtyid?: SortOrderInput | SortOrder
    consultassign?: SortOrderInput | SortOrder
    consultarrive?: SortOrderInput | SortOrder
    consultdesicion?: SortOrderInput | SortOrder
    transferred?: SortOrderInput | SortOrder
    transferid?: SortOrderInput | SortOrder
  }

  export type tblQueuePulmoWhereUniqueInput = Prisma.AtLeast<{
    tblQueueID?: Decimal | DecimalJsLike | number | string
    AND?: tblQueuePulmoWhereInput | tblQueuePulmoWhereInput[]
    OR?: tblQueuePulmoWhereInput[]
    NOT?: tblQueuePulmoWhereInput | tblQueuePulmoWhereInput[]
    deptcode?: StringNullableFilter<"tblQueuePulmo"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueuePulmo"> | string | null
    deptname?: StringNullableFilter<"tblQueuePulmo"> | string | null
    name?: StringNullableFilter<"tblQueuePulmo"> | string | null
    userid?: StringNullableFilter<"tblQueuePulmo"> | string | null
    locationname?: StringNullableFilter<"tblQueuePulmo"> | string | null
    nationality?: StringNullableFilter<"tblQueuePulmo"> | string | null
    id?: StringNullableFilter<"tblQueuePulmo"> | string | null
    patient_age?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableFilter<"tblQueuePulmo"> | string | null
    complain?: StringNullableFilter<"tblQueuePulmo"> | string | null
    triage_dt?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    bp?: StringNullableFilter<"tblQueuePulmo"> | string | null
    temp?: StringNullableFilter<"tblQueuePulmo"> | string | null
    hr?: StringNullableFilter<"tblQueuePulmo"> | string | null
    rr?: StringNullableFilter<"tblQueuePulmo"> | string | null
    spo2?: StringNullableFilter<"tblQueuePulmo"> | string | null
    rbs?: StringNullableFilter<"tblQueuePulmo"> | string | null
    height?: StringNullableFilter<"tblQueuePulmo"> | string | null
    weight?: StringNullableFilter<"tblQueuePulmo"> | string | null
    allergies?: StringNullableFilter<"tblQueuePulmo"> | string | null
    bedassignment?: StringNullableFilter<"tblQueuePulmo"> | string | null
    override?: IntNullableFilter<"tblQueuePulmo"> | number | null
    critical?: IntNullableFilter<"tblQueuePulmo"> | number | null
    criticalmsg?: StringNullableFilter<"tblQueuePulmo"> | string | null
    category?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableFilter<"tblQueuePulmo"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    mobileno?: StringNullableFilter<"tblQueuePulmo"> | string | null
    returnvisit72Hrs?: IntNullableFilter<"tblQueuePulmo"> | number | null
    admitted?: IntNullableFilter<"tblQueuePulmo"> | number | null
    admittedIn?: StringNullableFilter<"tblQueuePulmo"> | string | null
    consulted?: IntNullableFilter<"tblQueuePulmo"> | number | null
    consultspecialtyid?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    consultarrive?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    consultdesicion?: DateTimeNullableFilter<"tblQueuePulmo"> | Date | string | null
    transferred?: IntNullableFilter<"tblQueuePulmo"> | number | null
    transferid?: DecimalNullableFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
  }, "tblQueueID" | "tblQueueID">

  export type tblQueuePulmoOrderByWithAggregationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    id?: SortOrderInput | SortOrder
    patient_age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    complain?: SortOrderInput | SortOrder
    triage_dt?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    bedassignment?: SortOrderInput | SortOrder
    override?: SortOrderInput | SortOrder
    critical?: SortOrderInput | SortOrder
    criticalmsg?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    toremarks?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    mobileno?: SortOrderInput | SortOrder
    returnvisit72Hrs?: SortOrderInput | SortOrder
    admitted?: SortOrderInput | SortOrder
    admittedIn?: SortOrderInput | SortOrder
    consulted?: SortOrderInput | SortOrder
    consultspecialtyid?: SortOrderInput | SortOrder
    consultassign?: SortOrderInput | SortOrder
    consultarrive?: SortOrderInput | SortOrder
    consultdesicion?: SortOrderInput | SortOrder
    transferred?: SortOrderInput | SortOrder
    transferid?: SortOrderInput | SortOrder
    _count?: tblQueuePulmoCountOrderByAggregateInput
    _avg?: tblQueuePulmoAvgOrderByAggregateInput
    _max?: tblQueuePulmoMaxOrderByAggregateInput
    _min?: tblQueuePulmoMinOrderByAggregateInput
    _sum?: tblQueuePulmoSumOrderByAggregateInput
  }

  export type tblQueuePulmoScalarWhereWithAggregatesInput = {
    AND?: tblQueuePulmoScalarWhereWithAggregatesInput | tblQueuePulmoScalarWhereWithAggregatesInput[]
    OR?: tblQueuePulmoScalarWhereWithAggregatesInput[]
    NOT?: tblQueuePulmoScalarWhereWithAggregatesInput | tblQueuePulmoScalarWhereWithAggregatesInput[]
    tblQueueID?: DecimalWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    qnumber?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    start_dt?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    finish_dt?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    status?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    deptname?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    name?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    userid?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    id?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    patient_age?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    gender?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    complain?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    triage_dt?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    bp?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    temp?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    hr?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    rr?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    spo2?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    rbs?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    height?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    weight?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    allergies?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    bedassignment?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    override?: IntNullableWithAggregatesFilter<"tblQueuePulmo"> | number | null
    critical?: IntNullableWithAggregatesFilter<"tblQueuePulmo"> | number | null
    criticalmsg?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    category?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    toremarks?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    mobileno?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    returnvisit72Hrs?: IntNullableWithAggregatesFilter<"tblQueuePulmo"> | number | null
    admitted?: IntNullableWithAggregatesFilter<"tblQueuePulmo"> | number | null
    admittedIn?: StringNullableWithAggregatesFilter<"tblQueuePulmo"> | string | null
    consulted?: IntNullableWithAggregatesFilter<"tblQueuePulmo"> | number | null
    consultspecialtyid?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
    consultassign?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    consultarrive?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    consultdesicion?: DateTimeNullableWithAggregatesFilter<"tblQueuePulmo"> | Date | string | null
    transferred?: IntNullableWithAggregatesFilter<"tblQueuePulmo"> | number | null
    transferid?: DecimalNullableWithAggregatesFilter<"tblQueuePulmo"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionWhereInput = {
    AND?: tblQueueSessionWhereInput | tblQueueSessionWhereInput[]
    OR?: tblQueueSessionWhereInput[]
    NOT?: tblQueueSessionWhereInput | tblQueueSessionWhereInput[]
    tblLocationSessionID?: DecimalFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableFilter<"tblQueueSession"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string | null
    tblQueueID?: DecimalNullableFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionOrderByWithRelationInput = {
    tblLocationSessionID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    tblQueueID?: SortOrderInput | SortOrder
  }

  export type tblQueueSessionWhereUniqueInput = Prisma.AtLeast<{
    tblLocationSessionID?: Decimal | DecimalJsLike | number | string
    AND?: tblQueueSessionWhereInput | tblQueueSessionWhereInput[]
    OR?: tblQueueSessionWhereInput[]
    NOT?: tblQueueSessionWhereInput | tblQueueSessionWhereInput[]
    deptcode?: StringNullableFilter<"tblQueueSession"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string | null
    tblQueueID?: DecimalNullableFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string | null
  }, "tblLocationSessionID" | "tblLocationSessionID">

  export type tblQueueSessionOrderByWithAggregationInput = {
    tblLocationSessionID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    tblQueueID?: SortOrderInput | SortOrder
    _count?: tblQueueSessionCountOrderByAggregateInput
    _avg?: tblQueueSessionAvgOrderByAggregateInput
    _max?: tblQueueSessionMaxOrderByAggregateInput
    _min?: tblQueueSessionMinOrderByAggregateInput
    _sum?: tblQueueSessionSumOrderByAggregateInput
  }

  export type tblQueueSessionScalarWhereWithAggregatesInput = {
    AND?: tblQueueSessionScalarWhereWithAggregatesInput | tblQueueSessionScalarWhereWithAggregatesInput[]
    OR?: tblQueueSessionScalarWhereWithAggregatesInput[]
    NOT?: tblQueueSessionScalarWhereWithAggregatesInput | tblQueueSessionScalarWhereWithAggregatesInput[]
    tblLocationSessionID?: DecimalWithAggregatesFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableWithAggregatesFilter<"tblQueueSession"> | string | null
    qnumber?: DecimalNullableWithAggregatesFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string | null
    tblQueueID?: DecimalNullableWithAggregatesFilter<"tblQueueSession"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueTransferDeptWhereInput = {
    AND?: tblQueueTransferDeptWhereInput | tblQueueTransferDeptWhereInput[]
    OR?: tblQueueTransferDeptWhereInput[]
    NOT?: tblQueueTransferDeptWhereInput | tblQueueTransferDeptWhereInput[]
    tblQueueTransferDeptID?: DecimalFilter<"tblQueueTransferDept"> | Decimal | DecimalJsLike | number | string
    barcode?: StringNullableFilter<"tblQueueTransferDept"> | string | null
    fromdeptcode?: StringNullableFilter<"tblQueueTransferDept"> | string | null
    todeptcode?: StringNullableFilter<"tblQueueTransferDept"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueueTransferDept"> | Date | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueTransferDept"> | Date | string | null
  }

  export type tblQueueTransferDeptOrderByWithRelationInput = {
    tblQueueTransferDeptID?: SortOrder
    barcode?: SortOrderInput | SortOrder
    fromdeptcode?: SortOrderInput | SortOrder
    todeptcode?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
  }

  export type tblQueueTransferDeptWhereUniqueInput = Prisma.AtLeast<{
    tblQueueTransferDeptID?: Decimal | DecimalJsLike | number | string
    AND?: tblQueueTransferDeptWhereInput | tblQueueTransferDeptWhereInput[]
    OR?: tblQueueTransferDeptWhereInput[]
    NOT?: tblQueueTransferDeptWhereInput | tblQueueTransferDeptWhereInput[]
    barcode?: StringNullableFilter<"tblQueueTransferDept"> | string | null
    fromdeptcode?: StringNullableFilter<"tblQueueTransferDept"> | string | null
    todeptcode?: StringNullableFilter<"tblQueueTransferDept"> | string | null
    last_update?: DateTimeNullableFilter<"tblQueueTransferDept"> | Date | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueTransferDept"> | Date | string | null
  }, "tblQueueTransferDeptID" | "tblQueueTransferDeptID">

  export type tblQueueTransferDeptOrderByWithAggregationInput = {
    tblQueueTransferDeptID?: SortOrder
    barcode?: SortOrderInput | SortOrder
    fromdeptcode?: SortOrderInput | SortOrder
    todeptcode?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    _count?: tblQueueTransferDeptCountOrderByAggregateInput
    _avg?: tblQueueTransferDeptAvgOrderByAggregateInput
    _max?: tblQueueTransferDeptMaxOrderByAggregateInput
    _min?: tblQueueTransferDeptMinOrderByAggregateInput
    _sum?: tblQueueTransferDeptSumOrderByAggregateInput
  }

  export type tblQueueTransferDeptScalarWhereWithAggregatesInput = {
    AND?: tblQueueTransferDeptScalarWhereWithAggregatesInput | tblQueueTransferDeptScalarWhereWithAggregatesInput[]
    OR?: tblQueueTransferDeptScalarWhereWithAggregatesInput[]
    NOT?: tblQueueTransferDeptScalarWhereWithAggregatesInput | tblQueueTransferDeptScalarWhereWithAggregatesInput[]
    tblQueueTransferDeptID?: DecimalWithAggregatesFilter<"tblQueueTransferDept"> | Decimal | DecimalJsLike | number | string
    barcode?: StringNullableWithAggregatesFilter<"tblQueueTransferDept"> | string | null
    fromdeptcode?: StringNullableWithAggregatesFilter<"tblQueueTransferDept"> | string | null
    todeptcode?: StringNullableWithAggregatesFilter<"tblQueueTransferDept"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblQueueTransferDept"> | Date | string | null
    issued_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueTransferDept"> | Date | string | null
  }

  export type tblQueueWaitWhereInput = {
    AND?: tblQueueWaitWhereInput | tblQueueWaitWhereInput[]
    OR?: tblQueueWaitWhereInput[]
    NOT?: tblQueueWaitWhereInput | tblQueueWaitWhereInput[]
    tblQueueID?: DecimalFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableFilter<"tblQueueWait"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueWait"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueueWait"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueueWait"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueueWait"> | string | null
    deptname?: StringNullableFilter<"tblQueueWait"> | string | null
    name?: StringNullableFilter<"tblQueueWait"> | string | null
    userid?: StringNullableFilter<"tblQueueWait"> | string | null
    locationname?: StringNullableFilter<"tblQueueWait"> | string | null
    queueID?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWaitOrderByWithRelationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    queueID?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
  }

  export type tblQueueWaitWhereUniqueInput = Prisma.AtLeast<{
    tblQueueID?: Decimal | DecimalJsLike | number | string
    queueID?: Decimal | DecimalJsLike | number | string
    AND?: tblQueueWaitWhereInput | tblQueueWaitWhereInput[]
    OR?: tblQueueWaitWhereInput[]
    NOT?: tblQueueWaitWhereInput | tblQueueWaitWhereInput[]
    deptcode?: StringNullableFilter<"tblQueueWait"> | string | null
    qnumber?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableFilter<"tblQueueWait"> | Date | string | null
    start_dt?: DateTimeNullableFilter<"tblQueueWait"> | Date | string | null
    finish_dt?: DateTimeNullableFilter<"tblQueueWait"> | Date | string | null
    status?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableFilter<"tblQueueWait"> | string | null
    deptname?: StringNullableFilter<"tblQueueWait"> | string | null
    name?: StringNullableFilter<"tblQueueWait"> | string | null
    userid?: StringNullableFilter<"tblQueueWait"> | string | null
    locationname?: StringNullableFilter<"tblQueueWait"> | string | null
    dept_counter?: DecimalNullableFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
  }, "tblQueueID" | "tblQueueID" | "queueID">

  export type tblQueueWaitOrderByWithAggregationInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrderInput | SortOrder
    qnumber?: SortOrderInput | SortOrder
    issued_dt?: SortOrderInput | SortOrder
    start_dt?: SortOrderInput | SortOrder
    finish_dt?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    waiting?: SortOrderInput | SortOrder
    barcode?: SortOrderInput | SortOrder
    deptname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    queueID?: SortOrderInput | SortOrder
    dept_counter?: SortOrderInput | SortOrder
    _count?: tblQueueWaitCountOrderByAggregateInput
    _avg?: tblQueueWaitAvgOrderByAggregateInput
    _max?: tblQueueWaitMaxOrderByAggregateInput
    _min?: tblQueueWaitMinOrderByAggregateInput
    _sum?: tblQueueWaitSumOrderByAggregateInput
  }

  export type tblQueueWaitScalarWhereWithAggregatesInput = {
    AND?: tblQueueWaitScalarWhereWithAggregatesInput | tblQueueWaitScalarWhereWithAggregatesInput[]
    OR?: tblQueueWaitScalarWhereWithAggregatesInput[]
    NOT?: tblQueueWaitScalarWhereWithAggregatesInput | tblQueueWaitScalarWhereWithAggregatesInput[]
    tblQueueID?: DecimalWithAggregatesFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string
    deptcode?: StringNullableWithAggregatesFilter<"tblQueueWait"> | string | null
    qnumber?: DecimalNullableWithAggregatesFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    issued_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueWait"> | Date | string | null
    start_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueWait"> | Date | string | null
    finish_dt?: DateTimeNullableWithAggregatesFilter<"tblQueueWait"> | Date | string | null
    status?: DecimalNullableWithAggregatesFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    waiting?: DecimalNullableWithAggregatesFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    barcode?: StringNullableWithAggregatesFilter<"tblQueueWait"> | string | null
    deptname?: StringNullableWithAggregatesFilter<"tblQueueWait"> | string | null
    name?: StringNullableWithAggregatesFilter<"tblQueueWait"> | string | null
    userid?: StringNullableWithAggregatesFilter<"tblQueueWait"> | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblQueueWait"> | string | null
    queueID?: DecimalNullableWithAggregatesFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
    dept_counter?: DecimalNullableWithAggregatesFilter<"tblQueueWait"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationWhereInput = {
    AND?: tblSubLocationWhereInput | tblSubLocationWhereInput[]
    OR?: tblSubLocationWhereInput[]
    NOT?: tblSubLocationWhereInput | tblSubLocationWhereInput[]
    tblLocationID?: DecimalFilter<"tblSubLocation"> | Decimal | DecimalJsLike | number | string
    loccode?: StringNullableFilter<"tblSubLocation"> | string | null
    deptcode?: StringNullableFilter<"tblSubLocation"> | string | null
    locationname?: StringNullableFilter<"tblSubLocation"> | string | null
    status?: DecimalNullableFilter<"tblSubLocation"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationOrderByWithRelationInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
  }

  export type tblSubLocationWhereUniqueInput = Prisma.AtLeast<{
    tblLocationID?: Decimal | DecimalJsLike | number | string
    loccode?: string
    AND?: tblSubLocationWhereInput | tblSubLocationWhereInput[]
    OR?: tblSubLocationWhereInput[]
    NOT?: tblSubLocationWhereInput | tblSubLocationWhereInput[]
    deptcode?: StringNullableFilter<"tblSubLocation"> | string | null
    locationname?: StringNullableFilter<"tblSubLocation"> | string | null
    status?: DecimalNullableFilter<"tblSubLocation"> | Decimal | DecimalJsLike | number | string | null
  }, "tblLocationID" | "tblLocationID" | "loccode">

  export type tblSubLocationOrderByWithAggregationInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    locationname?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: tblSubLocationCountOrderByAggregateInput
    _avg?: tblSubLocationAvgOrderByAggregateInput
    _max?: tblSubLocationMaxOrderByAggregateInput
    _min?: tblSubLocationMinOrderByAggregateInput
    _sum?: tblSubLocationSumOrderByAggregateInput
  }

  export type tblSubLocationScalarWhereWithAggregatesInput = {
    AND?: tblSubLocationScalarWhereWithAggregatesInput | tblSubLocationScalarWhereWithAggregatesInput[]
    OR?: tblSubLocationScalarWhereWithAggregatesInput[]
    NOT?: tblSubLocationScalarWhereWithAggregatesInput | tblSubLocationScalarWhereWithAggregatesInput[]
    tblLocationID?: DecimalWithAggregatesFilter<"tblSubLocation"> | Decimal | DecimalJsLike | number | string
    loccode?: StringNullableWithAggregatesFilter<"tblSubLocation"> | string | null
    deptcode?: StringNullableWithAggregatesFilter<"tblSubLocation"> | string | null
    locationname?: StringNullableWithAggregatesFilter<"tblSubLocation"> | string | null
    status?: DecimalNullableWithAggregatesFilter<"tblSubLocation"> | Decimal | DecimalJsLike | number | string | null
  }

  export type tblTransferWhereInput = {
    AND?: tblTransferWhereInput | tblTransferWhereInput[]
    OR?: tblTransferWhereInput[]
    NOT?: tblTransferWhereInput | tblTransferWhereInput[]
    tblTransferID?: DecimalFilter<"tblTransfer"> | Decimal | DecimalJsLike | number | string
    transferid?: DecimalNullableFilter<"tblTransfer"> | Decimal | DecimalJsLike | number | string | null
    transfername?: StringNullableFilter<"tblTransfer"> | string | null
  }

  export type tblTransferOrderByWithRelationInput = {
    tblTransferID?: SortOrder
    transferid?: SortOrderInput | SortOrder
    transfername?: SortOrderInput | SortOrder
  }

  export type tblTransferWhereUniqueInput = Prisma.AtLeast<{
    tblTransferID?: Decimal | DecimalJsLike | number | string
    transferid?: Decimal | DecimalJsLike | number | string
    AND?: tblTransferWhereInput | tblTransferWhereInput[]
    OR?: tblTransferWhereInput[]
    NOT?: tblTransferWhereInput | tblTransferWhereInput[]
    transfername?: StringNullableFilter<"tblTransfer"> | string | null
  }, "tblTransferID" | "tblTransferID" | "transferid">

  export type tblTransferOrderByWithAggregationInput = {
    tblTransferID?: SortOrder
    transferid?: SortOrderInput | SortOrder
    transfername?: SortOrderInput | SortOrder
    _count?: tblTransferCountOrderByAggregateInput
    _avg?: tblTransferAvgOrderByAggregateInput
    _max?: tblTransferMaxOrderByAggregateInput
    _min?: tblTransferMinOrderByAggregateInput
    _sum?: tblTransferSumOrderByAggregateInput
  }

  export type tblTransferScalarWhereWithAggregatesInput = {
    AND?: tblTransferScalarWhereWithAggregatesInput | tblTransferScalarWhereWithAggregatesInput[]
    OR?: tblTransferScalarWhereWithAggregatesInput[]
    NOT?: tblTransferScalarWhereWithAggregatesInput | tblTransferScalarWhereWithAggregatesInput[]
    tblTransferID?: DecimalWithAggregatesFilter<"tblTransfer"> | Decimal | DecimalJsLike | number | string
    transferid?: DecimalNullableWithAggregatesFilter<"tblTransfer"> | Decimal | DecimalJsLike | number | string | null
    transfername?: StringNullableWithAggregatesFilter<"tblTransfer"> | string | null
  }

  export type tblUserDepartmentAuthWhereInput = {
    AND?: tblUserDepartmentAuthWhereInput | tblUserDepartmentAuthWhereInput[]
    OR?: tblUserDepartmentAuthWhereInput[]
    NOT?: tblUserDepartmentAuthWhereInput | tblUserDepartmentAuthWhereInput[]
    tblUserDepartmentAuthID?: DecimalFilter<"tblUserDepartmentAuth"> | Decimal | DecimalJsLike | number | string
    authiD?: DecimalNullableFilter<"tblUserDepartmentAuth"> | Decimal | DecimalJsLike | number | string | null
    deptcode?: StringNullableFilter<"tblUserDepartmentAuth"> | string | null
    userid?: StringNullableFilter<"tblUserDepartmentAuth"> | string | null
    last_update?: DateTimeNullableFilter<"tblUserDepartmentAuth"> | Date | string | null
  }

  export type tblUserDepartmentAuthOrderByWithRelationInput = {
    tblUserDepartmentAuthID?: SortOrder
    authiD?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
  }

  export type tblUserDepartmentAuthWhereUniqueInput = Prisma.AtLeast<{
    tblUserDepartmentAuthID?: Decimal | DecimalJsLike | number | string
    authiD?: Decimal | DecimalJsLike | number | string
    AND?: tblUserDepartmentAuthWhereInput | tblUserDepartmentAuthWhereInput[]
    OR?: tblUserDepartmentAuthWhereInput[]
    NOT?: tblUserDepartmentAuthWhereInput | tblUserDepartmentAuthWhereInput[]
    deptcode?: StringNullableFilter<"tblUserDepartmentAuth"> | string | null
    userid?: StringNullableFilter<"tblUserDepartmentAuth"> | string | null
    last_update?: DateTimeNullableFilter<"tblUserDepartmentAuth"> | Date | string | null
  }, "tblUserDepartmentAuthID" | "tblUserDepartmentAuthID" | "authiD">

  export type tblUserDepartmentAuthOrderByWithAggregationInput = {
    tblUserDepartmentAuthID?: SortOrder
    authiD?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    _count?: tblUserDepartmentAuthCountOrderByAggregateInput
    _avg?: tblUserDepartmentAuthAvgOrderByAggregateInput
    _max?: tblUserDepartmentAuthMaxOrderByAggregateInput
    _min?: tblUserDepartmentAuthMinOrderByAggregateInput
    _sum?: tblUserDepartmentAuthSumOrderByAggregateInput
  }

  export type tblUserDepartmentAuthScalarWhereWithAggregatesInput = {
    AND?: tblUserDepartmentAuthScalarWhereWithAggregatesInput | tblUserDepartmentAuthScalarWhereWithAggregatesInput[]
    OR?: tblUserDepartmentAuthScalarWhereWithAggregatesInput[]
    NOT?: tblUserDepartmentAuthScalarWhereWithAggregatesInput | tblUserDepartmentAuthScalarWhereWithAggregatesInput[]
    tblUserDepartmentAuthID?: DecimalWithAggregatesFilter<"tblUserDepartmentAuth"> | Decimal | DecimalJsLike | number | string
    authiD?: DecimalNullableWithAggregatesFilter<"tblUserDepartmentAuth"> | Decimal | DecimalJsLike | number | string | null
    deptcode?: StringNullableWithAggregatesFilter<"tblUserDepartmentAuth"> | string | null
    userid?: StringNullableWithAggregatesFilter<"tblUserDepartmentAuth"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblUserDepartmentAuth"> | Date | string | null
  }

  export type tblUserOverrideAuthWhereInput = {
    AND?: tblUserOverrideAuthWhereInput | tblUserOverrideAuthWhereInput[]
    OR?: tblUserOverrideAuthWhereInput[]
    NOT?: tblUserOverrideAuthWhereInput | tblUserOverrideAuthWhereInput[]
    tblUserOverrideAuthID?: DecimalFilter<"tblUserOverrideAuth"> | Decimal | DecimalJsLike | number | string
    appAuthID?: DecimalNullableFilter<"tblUserOverrideAuth"> | Decimal | DecimalJsLike | number | string | null
    userid?: StringNullableFilter<"tblUserOverrideAuth"> | string | null
    last_update?: DateTimeNullableFilter<"tblUserOverrideAuth"> | Date | string | null
  }

  export type tblUserOverrideAuthOrderByWithRelationInput = {
    tblUserOverrideAuthID?: SortOrder
    appAuthID?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
  }

  export type tblUserOverrideAuthWhereUniqueInput = Prisma.AtLeast<{
    tblUserOverrideAuthID?: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string
    userid?: string
    AND?: tblUserOverrideAuthWhereInput | tblUserOverrideAuthWhereInput[]
    OR?: tblUserOverrideAuthWhereInput[]
    NOT?: tblUserOverrideAuthWhereInput | tblUserOverrideAuthWhereInput[]
    last_update?: DateTimeNullableFilter<"tblUserOverrideAuth"> | Date | string | null
  }, "tblUserOverrideAuthID" | "tblUserOverrideAuthID" | "appAuthID" | "userid">

  export type tblUserOverrideAuthOrderByWithAggregationInput = {
    tblUserOverrideAuthID?: SortOrder
    appAuthID?: SortOrderInput | SortOrder
    userid?: SortOrderInput | SortOrder
    last_update?: SortOrderInput | SortOrder
    _count?: tblUserOverrideAuthCountOrderByAggregateInput
    _avg?: tblUserOverrideAuthAvgOrderByAggregateInput
    _max?: tblUserOverrideAuthMaxOrderByAggregateInput
    _min?: tblUserOverrideAuthMinOrderByAggregateInput
    _sum?: tblUserOverrideAuthSumOrderByAggregateInput
  }

  export type tblUserOverrideAuthScalarWhereWithAggregatesInput = {
    AND?: tblUserOverrideAuthScalarWhereWithAggregatesInput | tblUserOverrideAuthScalarWhereWithAggregatesInput[]
    OR?: tblUserOverrideAuthScalarWhereWithAggregatesInput[]
    NOT?: tblUserOverrideAuthScalarWhereWithAggregatesInput | tblUserOverrideAuthScalarWhereWithAggregatesInput[]
    tblUserOverrideAuthID?: DecimalWithAggregatesFilter<"tblUserOverrideAuth"> | Decimal | DecimalJsLike | number | string
    appAuthID?: DecimalNullableWithAggregatesFilter<"tblUserOverrideAuth"> | Decimal | DecimalJsLike | number | string | null
    userid?: StringNullableWithAggregatesFilter<"tblUserOverrideAuth"> | string | null
    last_update?: DateTimeNullableWithAggregatesFilter<"tblUserOverrideAuth"> | Date | string | null
  }

  export type PromptWhereInput = {
    AND?: PromptWhereInput | PromptWhereInput[]
    OR?: PromptWhereInput[]
    NOT?: PromptWhereInput | PromptWhereInput[]
    id?: StringFilter<"Prompt"> | string
    text?: StringFilter<"Prompt"> | string
    intent?: StringNullableFilter<"Prompt"> | string | null
    parameters?: StringNullableFilter<"Prompt"> | string | null
    hasAction?: BoolFilter<"Prompt"> | boolean
    createdAt?: DateTimeFilter<"Prompt"> | Date | string
    updatedAt?: DateTimeFilter<"Prompt"> | Date | string
    userId?: StringNullableFilter<"Prompt"> | string | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type PromptOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    intent?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    hasAction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type PromptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PromptWhereInput | PromptWhereInput[]
    OR?: PromptWhereInput[]
    NOT?: PromptWhereInput | PromptWhereInput[]
    text?: StringFilter<"Prompt"> | string
    intent?: StringNullableFilter<"Prompt"> | string | null
    parameters?: StringNullableFilter<"Prompt"> | string | null
    hasAction?: BoolFilter<"Prompt"> | boolean
    createdAt?: DateTimeFilter<"Prompt"> | Date | string
    updatedAt?: DateTimeFilter<"Prompt"> | Date | string
    userId?: StringNullableFilter<"Prompt"> | string | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type PromptOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    intent?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    hasAction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: PromptCountOrderByAggregateInput
    _max?: PromptMaxOrderByAggregateInput
    _min?: PromptMinOrderByAggregateInput
  }

  export type PromptScalarWhereWithAggregatesInput = {
    AND?: PromptScalarWhereWithAggregatesInput | PromptScalarWhereWithAggregatesInput[]
    OR?: PromptScalarWhereWithAggregatesInput[]
    NOT?: PromptScalarWhereWithAggregatesInput | PromptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Prompt"> | string
    text?: StringWithAggregatesFilter<"Prompt"> | string
    intent?: StringNullableWithAggregatesFilter<"Prompt"> | string | null
    parameters?: StringNullableWithAggregatesFilter<"Prompt"> | string | null
    hasAction?: BoolWithAggregatesFilter<"Prompt"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Prompt"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Prompt"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"Prompt"> | string | null
  }

  export type tblUsersWhereInput = {
    AND?: tblUsersWhereInput | tblUsersWhereInput[]
    OR?: tblUsersWhereInput[]
    NOT?: tblUsersWhereInput | tblUsersWhereInput[]
    tblUsersID?: DecimalFilter<"tblUsers"> | Decimal | DecimalJsLike | number | string
    userid?: StringNullableFilter<"tblUsers"> | string | null
    password?: StringNullableFilter<"tblUsers"> | string | null
    name?: StringNullableFilter<"tblUsers"> | string | null
    deptcode?: StringNullableFilter<"tblUsers"> | string | null
    date?: DateTimeNullableFilter<"tblUsers"> | Date | string | null
  }

  export type tblUsersOrderByWithRelationInput = {
    tblUsersID?: SortOrder
    userid?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
  }

  export type tblUsersWhereUniqueInput = Prisma.AtLeast<{
    tblUsersID?: Decimal | DecimalJsLike | number | string
    userid?: string
    AND?: tblUsersWhereInput | tblUsersWhereInput[]
    OR?: tblUsersWhereInput[]
    NOT?: tblUsersWhereInput | tblUsersWhereInput[]
    password?: StringNullableFilter<"tblUsers"> | string | null
    name?: StringNullableFilter<"tblUsers"> | string | null
    deptcode?: StringNullableFilter<"tblUsers"> | string | null
    date?: DateTimeNullableFilter<"tblUsers"> | Date | string | null
  }, "tblUsersID" | "tblUsersID" | "userid">

  export type tblUsersOrderByWithAggregationInput = {
    tblUsersID?: SortOrder
    userid?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    deptcode?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    _count?: tblUsersCountOrderByAggregateInput
    _avg?: tblUsersAvgOrderByAggregateInput
    _max?: tblUsersMaxOrderByAggregateInput
    _min?: tblUsersMinOrderByAggregateInput
    _sum?: tblUsersSumOrderByAggregateInput
  }

  export type tblUsersScalarWhereWithAggregatesInput = {
    AND?: tblUsersScalarWhereWithAggregatesInput | tblUsersScalarWhereWithAggregatesInput[]
    OR?: tblUsersScalarWhereWithAggregatesInput[]
    NOT?: tblUsersScalarWhereWithAggregatesInput | tblUsersScalarWhereWithAggregatesInput[]
    tblUsersID?: DecimalWithAggregatesFilter<"tblUsers"> | Decimal | DecimalJsLike | number | string
    userid?: StringNullableWithAggregatesFilter<"tblUsers"> | string | null
    password?: StringNullableWithAggregatesFilter<"tblUsers"> | string | null
    name?: StringNullableWithAggregatesFilter<"tblUsers"> | string | null
    deptcode?: StringNullableWithAggregatesFilter<"tblUsers"> | string | null
    date?: DateTimeNullableWithAggregatesFilter<"tblUsers"> | Date | string | null
  }

  export type VitalSignWhereInput = {
    AND?: VitalSignWhereInput | VitalSignWhereInput[]
    OR?: VitalSignWhereInput[]
    NOT?: VitalSignWhereInput | VitalSignWhereInput[]
    id?: StringFilter<"VitalSign"> | string
    patientId?: StringNullableFilter<"VitalSign"> | string | null
    bp?: StringNullableFilter<"VitalSign"> | string | null
    height?: StringNullableFilter<"VitalSign"> | string | null
    temp?: StringNullableFilter<"VitalSign"> | string | null
    spo2?: StringNullableFilter<"VitalSign"> | string | null
    weight?: StringNullableFilter<"VitalSign"> | string | null
    hr?: StringNullableFilter<"VitalSign"> | string | null
    rbs?: StringNullableFilter<"VitalSign"> | string | null
    rr?: StringNullableFilter<"VitalSign"> | string | null
    timeVs?: DateTimeNullableFilter<"VitalSign"> | Date | string | null
    allergies?: BoolNullableFilter<"VitalSign"> | boolean | null
    createdAt?: DateTimeFilter<"VitalSign"> | Date | string
    updatedAt?: DateTimeFilter<"VitalSign"> | Date | string
    Patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
  }

  export type VitalSignOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    timeVs?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Patient?: PatientOrderByWithRelationInput
  }

  export type VitalSignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VitalSignWhereInput | VitalSignWhereInput[]
    OR?: VitalSignWhereInput[]
    NOT?: VitalSignWhereInput | VitalSignWhereInput[]
    patientId?: StringNullableFilter<"VitalSign"> | string | null
    bp?: StringNullableFilter<"VitalSign"> | string | null
    height?: StringNullableFilter<"VitalSign"> | string | null
    temp?: StringNullableFilter<"VitalSign"> | string | null
    spo2?: StringNullableFilter<"VitalSign"> | string | null
    weight?: StringNullableFilter<"VitalSign"> | string | null
    hr?: StringNullableFilter<"VitalSign"> | string | null
    rbs?: StringNullableFilter<"VitalSign"> | string | null
    rr?: StringNullableFilter<"VitalSign"> | string | null
    timeVs?: DateTimeNullableFilter<"VitalSign"> | Date | string | null
    allergies?: BoolNullableFilter<"VitalSign"> | boolean | null
    createdAt?: DateTimeFilter<"VitalSign"> | Date | string
    updatedAt?: DateTimeFilter<"VitalSign"> | Date | string
    Patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
  }, "id">

  export type VitalSignOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrderInput | SortOrder
    bp?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    temp?: SortOrderInput | SortOrder
    spo2?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    hr?: SortOrderInput | SortOrder
    rbs?: SortOrderInput | SortOrder
    rr?: SortOrderInput | SortOrder
    timeVs?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VitalSignCountOrderByAggregateInput
    _max?: VitalSignMaxOrderByAggregateInput
    _min?: VitalSignMinOrderByAggregateInput
  }

  export type VitalSignScalarWhereWithAggregatesInput = {
    AND?: VitalSignScalarWhereWithAggregatesInput | VitalSignScalarWhereWithAggregatesInput[]
    OR?: VitalSignScalarWhereWithAggregatesInput[]
    NOT?: VitalSignScalarWhereWithAggregatesInput | VitalSignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VitalSign"> | string
    patientId?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    bp?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    height?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    temp?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    spo2?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    weight?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    hr?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    rbs?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    rr?: StringNullableWithAggregatesFilter<"VitalSign"> | string | null
    timeVs?: DateTimeNullableWithAggregatesFilter<"VitalSign"> | Date | string | null
    allergies?: BoolNullableWithAggregatesFilter<"VitalSign"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"VitalSign"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VitalSign"> | Date | string
  }

  export type UserCreateInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
    Role?: RoleCreateNestedManyWithoutUserInput
    Prompt?: PromptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountUncheckedCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    Prompt?: PromptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateManyWithoutUserNestedInput
    Prompt?: PromptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUncheckedUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    Prompt?: PromptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BedCreateInput = {
    id: string
    bedNumber?: string | null
    bedStatus?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Patient?: PatientCreateNestedManyWithoutBedInput
  }

  export type BedUncheckedCreateInput = {
    id: string
    bedNumber?: string | null
    bedStatus?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Patient?: PatientUncheckedCreateNestedManyWithoutBedInput
  }

  export type BedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bedStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateManyWithoutBedNestedInput
  }

  export type BedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bedStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUncheckedUpdateManyWithoutBedNestedInput
  }

  export type BedCreateManyInput = {
    id: string
    bedNumber?: string | null
    bedStatus?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type BedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bedStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bedStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyCreateInput = {
    id: string
    isActive?: boolean | null
    firstCallTime?: Date | string | null
    vitalTime?: Date | string | null
    assignDeptTime?: Date | string | null
    secondCallTime?: Date | string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Patient?: PatientCreateNestedOneWithoutJourneyInput
  }

  export type JourneyUncheckedCreateInput = {
    id: string
    isActive?: boolean | null
    firstCallTime?: Date | string | null
    vitalTime?: Date | string | null
    assignDeptTime?: Date | string | null
    secondCallTime?: Date | string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    patientId?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type JourneyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneWithoutJourneyNestedInput
  }

  export type JourneyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyCreateManyInput = {
    id: string
    isActive?: boolean | null
    firstCallTime?: Date | string | null
    vitalTime?: Date | string | null
    assignDeptTime?: Date | string | null
    secondCallTime?: Date | string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    patientId?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type JourneyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyCreateNestedManyWithoutPatientInput
    Bed?: BedCreateNestedOneWithoutPatientInput
    tblDepartment?: tblDepartmentCreateNestedOneWithoutPatientInput
    User?: UserCreateNestedOneWithoutPatientInput
    VitalSign?: VitalSignCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyUncheckedCreateNestedManyWithoutPatientInput
    VitalSign?: VitalSignUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUpdateManyWithoutPatientNestedInput
    Bed?: BedUpdateOneWithoutPatientNestedInput
    tblDepartment?: tblDepartmentUpdateOneWithoutPatientNestedInput
    User?: UserUpdateOneWithoutPatientNestedInput
    VitalSign?: VitalSignUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUncheckedUpdateManyWithoutPatientNestedInput
    VitalSign?: VitalSignUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCountCreateInput = {
    id: string
    counter?: number | null
    createdAt?: Date | string
    updatedAt: Date | string
    User?: UserCreateNestedOneWithoutPatientCountInput
  }

  export type PatientCountUncheckedCreateInput = {
    id: string
    userId?: string | null
    counter?: number | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type PatientCountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    counter?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutPatientCountNestedInput
  }

  export type PatientCountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    counter?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCountCreateManyInput = {
    id: string
    userId?: string | null
    counter?: number | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type PatientCountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    counter?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    counter?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateInput = {
    id: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    User?: UserCreateNestedOneWithoutRefreshTokenInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id: string
    token: string
    userId?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutRefreshTokenNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id: string
    token: string
    userId?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    description?: string | null
    route?: string | null
    User?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    description?: string | null
    route?: string | null
    User?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    route?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    route?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    description?: string | null
    route?: string | null
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    route?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    route?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAdmissionCreateInput = {
    tblAdmissionID: Decimal | DecimalJsLike | number | string
    admissioncode?: string | null
    admissionname?: string | null
  }

  export type tblAdmissionUncheckedCreateInput = {
    tblAdmissionID: Decimal | DecimalJsLike | number | string
    admissioncode?: string | null
    admissionname?: string | null
  }

  export type tblAdmissionUpdateInput = {
    tblAdmissionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    admissioncode?: NullableStringFieldUpdateOperationsInput | string | null
    admissionname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAdmissionUncheckedUpdateInput = {
    tblAdmissionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    admissioncode?: NullableStringFieldUpdateOperationsInput | string | null
    admissionname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAdmissionCreateManyInput = {
    tblAdmissionID: Decimal | DecimalJsLike | number | string
    admissioncode?: string | null
    admissionname?: string | null
  }

  export type tblAdmissionUpdateManyMutationInput = {
    tblAdmissionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    admissioncode?: NullableStringFieldUpdateOperationsInput | string | null
    admissionname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAdmissionUncheckedUpdateManyInput = {
    tblAdmissionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    admissioncode?: NullableStringFieldUpdateOperationsInput | string | null
    admissionname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppCreateInput = {
    tblAppID: Decimal | DecimalJsLike | number | string
    AppID?: Decimal | DecimalJsLike | number | string | null
    ApplicationName?: string | null
  }

  export type tblAppUncheckedCreateInput = {
    tblAppID: Decimal | DecimalJsLike | number | string
    AppID?: Decimal | DecimalJsLike | number | string | null
    ApplicationName?: string | null
  }

  export type tblAppUpdateInput = {
    tblAppID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ApplicationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppUncheckedUpdateInput = {
    tblAppID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ApplicationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppCreateManyInput = {
    tblAppID: Decimal | DecimalJsLike | number | string
    AppID?: Decimal | DecimalJsLike | number | string | null
    ApplicationName?: string | null
  }

  export type tblAppUpdateManyMutationInput = {
    tblAppID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ApplicationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppUncheckedUpdateManyInput = {
    tblAppID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ApplicationName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppAuthCreateInput = {
    tblAppAuthID: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string | null
    AppID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblAppAuthUncheckedCreateInput = {
    tblAppAuthID: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string | null
    AppID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblAppAuthUpdateInput = {
    tblAppAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppAuthUncheckedUpdateInput = {
    tblAppAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppAuthCreateManyInput = {
    tblAppAuthID: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string | null
    AppID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblAppAuthUpdateManyMutationInput = {
    tblAppAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppAuthUncheckedUpdateManyInput = {
    tblAppAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppModeAuthCreateInput = {
    tblUserAppModAuthID: Decimal | DecimalJsLike | number | string
    moduleID?: Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblAppModeAuthUncheckedCreateInput = {
    tblUserAppModAuthID: Decimal | DecimalJsLike | number | string
    moduleID?: Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblAppModeAuthUpdateInput = {
    tblUserAppModAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppModeAuthUncheckedUpdateInput = {
    tblUserAppModAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppModeAuthCreateManyInput = {
    tblUserAppModAuthID: Decimal | DecimalJsLike | number | string
    moduleID?: Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblAppModeAuthUpdateManyMutationInput = {
    tblUserAppModAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppModeAuthUncheckedUpdateManyInput = {
    tblUserAppModAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    UserappModAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblAppModulesCreateInput = {
    tblAppModulesID: Decimal | DecimalJsLike | number | string
    moduleID?: Decimal | DecimalJsLike | number | string | null
    AppID?: Decimal | DecimalJsLike | number | string | null
    ModuleName?: string | null
  }

  export type tblAppModulesUncheckedCreateInput = {
    tblAppModulesID: Decimal | DecimalJsLike | number | string
    moduleID?: Decimal | DecimalJsLike | number | string | null
    AppID?: Decimal | DecimalJsLike | number | string | null
    ModuleName?: string | null
  }

  export type tblAppModulesUpdateInput = {
    tblAppModulesID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ModuleName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppModulesUncheckedUpdateInput = {
    tblAppModulesID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ModuleName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppModulesCreateManyInput = {
    tblAppModulesID: Decimal | DecimalJsLike | number | string
    moduleID?: Decimal | DecimalJsLike | number | string | null
    AppID?: Decimal | DecimalJsLike | number | string | null
    ModuleName?: string | null
  }

  export type tblAppModulesUpdateManyMutationInput = {
    tblAppModulesID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ModuleName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblAppModulesUncheckedUpdateManyInput = {
    tblAppModulesID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    moduleID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    AppID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ModuleName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblConsultCreateInput = {
    tblConsultID: Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    specialtyname?: string | null
  }

  export type tblConsultUncheckedCreateInput = {
    tblConsultID: Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    specialtyname?: string | null
  }

  export type tblConsultUpdateInput = {
    tblConsultID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    specialtyname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblConsultUncheckedUpdateInput = {
    tblConsultID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    specialtyname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblConsultCreateManyInput = {
    tblConsultID: Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    specialtyname?: string | null
  }

  export type tblConsultUpdateManyMutationInput = {
    tblConsultID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    specialtyname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblConsultUncheckedUpdateManyInput = {
    tblConsultID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tblconsultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    specialtyname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblCounterCreateInput = {
    tblCounterID: Decimal | DecimalJsLike | number | string
    currentCount?: Decimal | DecimalJsLike | number | string | null
    ratz?: Decimal | DecimalJsLike | number | string | null
    acu?: Decimal | DecimalJsLike | number | string | null
    ucc?: Decimal | DecimalJsLike | number | string | null
    triageout?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblCounterUncheckedCreateInput = {
    tblCounterID: Decimal | DecimalJsLike | number | string
    currentCount?: Decimal | DecimalJsLike | number | string | null
    ratz?: Decimal | DecimalJsLike | number | string | null
    acu?: Decimal | DecimalJsLike | number | string | null
    ucc?: Decimal | DecimalJsLike | number | string | null
    triageout?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblCounterUpdateInput = {
    tblCounterID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentCount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ratz?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    acu?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ucc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    triageout?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblCounterUncheckedUpdateInput = {
    tblCounterID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentCount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ratz?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    acu?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ucc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    triageout?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblCounterCreateManyInput = {
    tblCounterID: Decimal | DecimalJsLike | number | string
    currentCount?: Decimal | DecimalJsLike | number | string | null
    ratz?: Decimal | DecimalJsLike | number | string | null
    acu?: Decimal | DecimalJsLike | number | string | null
    ucc?: Decimal | DecimalJsLike | number | string | null
    triageout?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblCounterUpdateManyMutationInput = {
    tblCounterID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentCount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ratz?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    acu?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ucc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    triageout?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblCounterUncheckedUpdateManyInput = {
    tblCounterID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currentCount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ratz?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    acu?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ucc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    triageout?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblDepartmentCreateInput = {
    tblDepartmentID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    deptname?: string | null
    Patient?: PatientCreateNestedManyWithoutTblDepartmentInput
  }

  export type tblDepartmentUncheckedCreateInput = {
    tblDepartmentID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    deptname?: string | null
    Patient?: PatientUncheckedCreateNestedManyWithoutTblDepartmentInput
  }

  export type tblDepartmentUpdateInput = {
    tblDepartmentID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUpdateManyWithoutTblDepartmentNestedInput
  }

  export type tblDepartmentUncheckedUpdateInput = {
    tblDepartmentID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUncheckedUpdateManyWithoutTblDepartmentNestedInput
  }

  export type tblDepartmentCreateManyInput = {
    tblDepartmentID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    deptname?: string | null
  }

  export type tblDepartmentUpdateManyMutationInput = {
    tblDepartmentID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblDepartmentUncheckedUpdateManyInput = {
    tblDepartmentID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblLocationCreateInput = {
    tblLocationID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    locationname?: string | null
  }

  export type tblLocationUncheckedCreateInput = {
    tblLocationID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    locationname?: string | null
  }

  export type tblLocationUpdateInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblLocationUncheckedUpdateInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblLocationCreateManyInput = {
    tblLocationID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    locationname?: string | null
  }

  export type tblLocationUpdateManyMutationInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblLocationUncheckedUpdateManyInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblLocationSessionCreateInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    loccode?: string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
    name?: string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblLocationSessionUncheckedCreateInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    loccode?: string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
    name?: string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblLocationSessionUpdateInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: StringFieldUpdateOperationsInput | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblLocationSessionUncheckedUpdateInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: StringFieldUpdateOperationsInput | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblLocationSessionCreateManyInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    loccode?: string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
    name?: string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblLocationSessionUpdateManyMutationInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: StringFieldUpdateOperationsInput | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblLocationSessionUncheckedUpdateManyInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: StringFieldUpdateOperationsInput | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveCreateInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    qnumber: Decimal | DecimalJsLike | number | string
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
    name?: string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveUncheckedCreateInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    qnumber: Decimal | DecimalJsLike | number | string
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
    name?: string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveUpdateInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveUncheckedUpdateInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveCreateManyInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    qnumber: Decimal | DecimalJsLike | number | string
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
    name?: string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveUpdateManyMutationInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tbllocationsessionArchieveUncheckedUpdateManyInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
    Pmh?: string | null
    ticket?: number | null
  }

  export type tblQueueUncheckedCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
    Pmh?: string | null
    ticket?: number | null
  }

  export type tblQueueUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tblQueueUncheckedUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tblQueueCreateManyInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
    Pmh?: string | null
    ticket?: number | null
  }

  export type tblQueueUpdateManyMutationInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tblQueueUncheckedUpdateManyInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tblQueueArchieveCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
    ticket?: number | null
    Pmh?: string | null
  }

  export type tblQueueArchieveUncheckedCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
    ticket?: number | null
    Pmh?: string | null
  }

  export type tblQueueArchieveUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueueArchieveUncheckedUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueueArchieveCreateManyInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
    ticket?: number | null
    Pmh?: string | null
  }

  export type tblQueueArchieveUpdateManyMutationInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueueArchieveUncheckedUpdateManyInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket?: NullableIntFieldUpdateOperationsInput | number | null
    Pmh?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueueArchieveTempCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
  }

  export type tblQueueArchieveTempUncheckedCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
  }

  export type tblQueueArchieveTempUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueueArchieveTempUncheckedUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueueArchieveTempCreateManyInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
  }

  export type tblQueueArchieveTempUpdateManyMutationInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueueArchieveTempUncheckedUpdateManyInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblQueuePulmoCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueuePulmoUncheckedCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueuePulmoUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueuePulmoUncheckedUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueuePulmoCreateManyInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    nationality?: string | null
    id?: string | null
    patient_age?: Decimal | DecimalJsLike | number | string | null
    gender?: string | null
    complain?: string | null
    triage_dt?: Date | string | null
    bp?: string | null
    temp?: string | null
    hr?: string | null
    rr?: string | null
    spo2?: string | null
    rbs?: string | null
    height?: string | null
    weight?: string | null
    allergies?: string | null
    bedassignment?: string | null
    override?: number | null
    critical?: number | null
    criticalmsg?: string | null
    category?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
    toremarks?: string | null
    last_update?: Date | string | null
    mobileno?: string | null
    returnvisit72Hrs?: number | null
    admitted?: number | null
    admittedIn?: string | null
    consulted?: number | null
    consultspecialtyid?: Decimal | DecimalJsLike | number | string | null
    consultassign?: Date | string | null
    consultarrive?: Date | string | null
    consultdesicion?: Date | string | null
    transferred?: number | null
    transferid?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueuePulmoUpdateManyMutationInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueuePulmoUncheckedUpdateManyInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_age?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    complain?: NullableStringFieldUpdateOperationsInput | string | null
    triage_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    bedassignment?: NullableStringFieldUpdateOperationsInput | string | null
    override?: NullableIntFieldUpdateOperationsInput | number | null
    critical?: NullableIntFieldUpdateOperationsInput | number | null
    criticalmsg?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toremarks?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mobileno?: NullableStringFieldUpdateOperationsInput | string | null
    returnvisit72Hrs?: NullableIntFieldUpdateOperationsInput | number | null
    admitted?: NullableIntFieldUpdateOperationsInput | number | null
    admittedIn?: NullableStringFieldUpdateOperationsInput | string | null
    consulted?: NullableIntFieldUpdateOperationsInput | number | null
    consultspecialtyid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    consultassign?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultarrive?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultdesicion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transferred?: NullableIntFieldUpdateOperationsInput | number | null
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionCreateInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionUncheckedCreateInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionUpdateInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionUncheckedUpdateInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionCreateManyInput = {
    tblLocationSessionID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    tblQueueID?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionUpdateManyMutationInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueSessionUncheckedUpdateManyInput = {
    tblLocationSessionID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tblQueueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueTransferDeptCreateInput = {
    tblQueueTransferDeptID: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    fromdeptcode?: string | null
    todeptcode?: string | null
    last_update?: Date | string | null
    issued_dt?: Date | string | null
  }

  export type tblQueueTransferDeptUncheckedCreateInput = {
    tblQueueTransferDeptID: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    fromdeptcode?: string | null
    todeptcode?: string | null
    last_update?: Date | string | null
    issued_dt?: Date | string | null
  }

  export type tblQueueTransferDeptUpdateInput = {
    tblQueueTransferDeptID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    fromdeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    todeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblQueueTransferDeptUncheckedUpdateInput = {
    tblQueueTransferDeptID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    fromdeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    todeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblQueueTransferDeptCreateManyInput = {
    tblQueueTransferDeptID: Decimal | DecimalJsLike | number | string
    barcode?: string | null
    fromdeptcode?: string | null
    todeptcode?: string | null
    last_update?: Date | string | null
    issued_dt?: Date | string | null
  }

  export type tblQueueTransferDeptUpdateManyMutationInput = {
    tblQueueTransferDeptID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    fromdeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    todeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblQueueTransferDeptUncheckedUpdateManyInput = {
    tblQueueTransferDeptID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    fromdeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    todeptcode?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblQueueWaitCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    queueID?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWaitUncheckedCreateInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    queueID?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWaitUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    queueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWaitUncheckedUpdateInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    queueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWaitCreateManyInput = {
    tblQueueID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    qnumber?: Decimal | DecimalJsLike | number | string | null
    issued_dt?: Date | string | null
    start_dt?: Date | string | null
    finish_dt?: Date | string | null
    status?: Decimal | DecimalJsLike | number | string | null
    waiting?: Decimal | DecimalJsLike | number | string | null
    barcode?: string | null
    deptname?: string | null
    name?: string | null
    userid?: string | null
    locationname?: string | null
    queueID?: Decimal | DecimalJsLike | number | string | null
    dept_counter?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWaitUpdateManyMutationInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    queueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblQueueWaitUncheckedUpdateManyInput = {
    tblQueueID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    qnumber?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    issued_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    start_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finish_dt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    waiting?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    queueID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dept_counter?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationCreateInput = {
    tblLocationID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationUncheckedCreateInput = {
    tblLocationID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationUpdateInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationUncheckedUpdateInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationCreateManyInput = {
    tblLocationID: Decimal | DecimalJsLike | number | string
    loccode?: string | null
    deptcode?: string | null
    locationname?: string | null
    status?: Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationUpdateManyMutationInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblSubLocationUncheckedUpdateManyInput = {
    tblLocationID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    loccode?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    locationname?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type tblTransferCreateInput = {
    tblTransferID: Decimal | DecimalJsLike | number | string
    transferid?: Decimal | DecimalJsLike | number | string | null
    transfername?: string | null
  }

  export type tblTransferUncheckedCreateInput = {
    tblTransferID: Decimal | DecimalJsLike | number | string
    transferid?: Decimal | DecimalJsLike | number | string | null
    transfername?: string | null
  }

  export type tblTransferUpdateInput = {
    tblTransferID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transfername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblTransferUncheckedUpdateInput = {
    tblTransferID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transfername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblTransferCreateManyInput = {
    tblTransferID: Decimal | DecimalJsLike | number | string
    transferid?: Decimal | DecimalJsLike | number | string | null
    transfername?: string | null
  }

  export type tblTransferUpdateManyMutationInput = {
    tblTransferID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transfername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblTransferUncheckedUpdateManyInput = {
    tblTransferID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    transferid?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transfername?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblUserDepartmentAuthCreateInput = {
    tblUserDepartmentAuthID: Decimal | DecimalJsLike | number | string
    authiD?: Decimal | DecimalJsLike | number | string | null
    deptcode?: string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblUserDepartmentAuthUncheckedCreateInput = {
    tblUserDepartmentAuthID: Decimal | DecimalJsLike | number | string
    authiD?: Decimal | DecimalJsLike | number | string | null
    deptcode?: string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblUserDepartmentAuthUpdateInput = {
    tblUserDepartmentAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    authiD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUserDepartmentAuthUncheckedUpdateInput = {
    tblUserDepartmentAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    authiD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUserDepartmentAuthCreateManyInput = {
    tblUserDepartmentAuthID: Decimal | DecimalJsLike | number | string
    authiD?: Decimal | DecimalJsLike | number | string | null
    deptcode?: string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblUserDepartmentAuthUpdateManyMutationInput = {
    tblUserDepartmentAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    authiD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUserDepartmentAuthUncheckedUpdateManyInput = {
    tblUserDepartmentAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    authiD?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUserOverrideAuthCreateInput = {
    tblUserOverrideAuthID: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblUserOverrideAuthUncheckedCreateInput = {
    tblUserOverrideAuthID: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblUserOverrideAuthUpdateInput = {
    tblUserOverrideAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUserOverrideAuthUncheckedUpdateInput = {
    tblUserOverrideAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUserOverrideAuthCreateManyInput = {
    tblUserOverrideAuthID: Decimal | DecimalJsLike | number | string
    appAuthID?: Decimal | DecimalJsLike | number | string | null
    userid?: string | null
    last_update?: Date | string | null
  }

  export type tblUserOverrideAuthUpdateManyMutationInput = {
    tblUserOverrideAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUserOverrideAuthUncheckedUpdateManyInput = {
    tblUserOverrideAuthID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    appAuthID?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PromptCreateInput = {
    id?: string
    text: string
    intent?: string | null
    parameters?: string | null
    hasAction?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: UserCreateNestedOneWithoutPromptInput
  }

  export type PromptUncheckedCreateInput = {
    id?: string
    text: string
    intent?: string | null
    parameters?: string | null
    hasAction?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type PromptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    intent?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    hasAction?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutPromptNestedInput
  }

  export type PromptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    intent?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    hasAction?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptCreateManyInput = {
    id?: string
    text: string
    intent?: string | null
    parameters?: string | null
    hasAction?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type PromptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    intent?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    hasAction?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    intent?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    hasAction?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblUsersCreateInput = {
    tblUsersID: Decimal | DecimalJsLike | number | string
    userid?: string | null
    password?: string | null
    name?: string | null
    deptcode?: string | null
    date?: Date | string | null
  }

  export type tblUsersUncheckedCreateInput = {
    tblUsersID: Decimal | DecimalJsLike | number | string
    userid?: string | null
    password?: string | null
    name?: string | null
    deptcode?: string | null
    date?: Date | string | null
  }

  export type tblUsersUpdateInput = {
    tblUsersID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUsersUncheckedUpdateInput = {
    tblUsersID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUsersCreateManyInput = {
    tblUsersID: Decimal | DecimalJsLike | number | string
    userid?: string | null
    password?: string | null
    name?: string | null
    deptcode?: string | null
    date?: Date | string | null
  }

  export type tblUsersUpdateManyMutationInput = {
    tblUsersID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tblUsersUncheckedUpdateManyInput = {
    tblUsersID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userid?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VitalSignCreateInput = {
    id: string
    bp?: string | null
    height?: string | null
    temp?: string | null
    spo2?: string | null
    weight?: string | null
    hr?: string | null
    rbs?: string | null
    rr?: string | null
    timeVs?: Date | string | null
    allergies?: boolean | null
    createdAt?: Date | string
    updatedAt: Date | string
    Patient?: PatientCreateNestedOneWithoutVitalSignInput
  }

  export type VitalSignUncheckedCreateInput = {
    id: string
    patientId?: string | null
    bp?: string | null
    height?: string | null
    temp?: string | null
    spo2?: string | null
    weight?: string | null
    hr?: string | null
    rbs?: string | null
    rr?: string | null
    timeVs?: Date | string | null
    allergies?: boolean | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type VitalSignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    timeVs?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneWithoutVitalSignNestedInput
  }

  export type VitalSignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    timeVs?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VitalSignCreateManyInput = {
    id: string
    patientId?: string | null
    bp?: string | null
    height?: string | null
    temp?: string | null
    spo2?: string | null
    weight?: string | null
    hr?: string | null
    rbs?: string | null
    rr?: string | null
    timeVs?: Date | string | null
    allergies?: boolean | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type VitalSignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    timeVs?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VitalSignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    timeVs?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type PatientCountListRelationFilter = {
    every?: PatientCountWhereInput
    some?: PatientCountWhereInput
    none?: PatientCountWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type PromptListRelationFilter = {
    every?: PromptWhereInput
    some?: PromptWhereInput
    none?: PromptWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    deptcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    deptcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    deptcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BedCountOrderByAggregateInput = {
    id?: SortOrder
    bedNumber?: SortOrder
    bedStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BedMaxOrderByAggregateInput = {
    id?: SortOrder
    bedNumber?: SortOrder
    bedStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BedMinOrderByAggregateInput = {
    id?: SortOrder
    bedNumber?: SortOrder
    bedStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PatientNullableScalarRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type JourneyCountOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    firstCallTime?: SortOrder
    vitalTime?: SortOrder
    assignDeptTime?: SortOrder
    secondCallTime?: SortOrder
    beginTime?: SortOrder
    endTime?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JourneyMaxOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    firstCallTime?: SortOrder
    vitalTime?: SortOrder
    assignDeptTime?: SortOrder
    secondCallTime?: SortOrder
    beginTime?: SortOrder
    endTime?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JourneyMinOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    firstCallTime?: SortOrder
    vitalTime?: SortOrder
    assignDeptTime?: SortOrder
    secondCallTime?: SortOrder
    beginTime?: SortOrder
    endTime?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type JourneyListRelationFilter = {
    every?: JourneyWhereInput
    some?: JourneyWhereInput
    none?: JourneyWhereInput
  }

  export type BedNullableScalarRelationFilter = {
    is?: BedWhereInput | null
    isNot?: BedWhereInput | null
  }

  export type TblDepartmentNullableScalarRelationFilter = {
    is?: tblDepartmentWhereInput | null
    isNot?: tblDepartmentWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type VitalSignListRelationFilter = {
    every?: VitalSignWhereInput
    some?: VitalSignWhereInput
    none?: VitalSignWhereInput
  }

  export type JourneyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VitalSignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    sex?: SortOrder
    idNumber?: SortOrder
    age?: SortOrder
    mobileNumber?: SortOrder
    status?: SortOrder
    cheifComplaint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket?: SortOrder
    userId?: SortOrder
    callPatient?: SortOrder
    state?: SortOrder
    barcode?: SortOrder
    departmentId?: SortOrder
    ticketNumber?: SortOrder
    bedId?: SortOrder
    beginTime?: SortOrder
    endTime?: SortOrder
    birthDate?: SortOrder
    bloodGroup?: SortOrder
    mrnNumber?: SortOrder
    remarks?: SortOrder
    assignDeptTime?: SortOrder
    firstCallTime?: SortOrder
    secondCallTime?: SortOrder
    vitalTime?: SortOrder
    registrationDate?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    age?: SortOrder
    state?: SortOrder
    departmentId?: SortOrder
    ticketNumber?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    sex?: SortOrder
    idNumber?: SortOrder
    age?: SortOrder
    mobileNumber?: SortOrder
    status?: SortOrder
    cheifComplaint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket?: SortOrder
    userId?: SortOrder
    callPatient?: SortOrder
    state?: SortOrder
    barcode?: SortOrder
    departmentId?: SortOrder
    ticketNumber?: SortOrder
    bedId?: SortOrder
    beginTime?: SortOrder
    endTime?: SortOrder
    birthDate?: SortOrder
    bloodGroup?: SortOrder
    mrnNumber?: SortOrder
    remarks?: SortOrder
    assignDeptTime?: SortOrder
    firstCallTime?: SortOrder
    secondCallTime?: SortOrder
    vitalTime?: SortOrder
    registrationDate?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nationality?: SortOrder
    sex?: SortOrder
    idNumber?: SortOrder
    age?: SortOrder
    mobileNumber?: SortOrder
    status?: SortOrder
    cheifComplaint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket?: SortOrder
    userId?: SortOrder
    callPatient?: SortOrder
    state?: SortOrder
    barcode?: SortOrder
    departmentId?: SortOrder
    ticketNumber?: SortOrder
    bedId?: SortOrder
    beginTime?: SortOrder
    endTime?: SortOrder
    birthDate?: SortOrder
    bloodGroup?: SortOrder
    mrnNumber?: SortOrder
    remarks?: SortOrder
    assignDeptTime?: SortOrder
    firstCallTime?: SortOrder
    secondCallTime?: SortOrder
    vitalTime?: SortOrder
    registrationDate?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    age?: SortOrder
    state?: SortOrder
    departmentId?: SortOrder
    ticketNumber?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type PatientCountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    counter?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientCountAvgOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type PatientCountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    counter?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientCountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    counter?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientCountSumOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    route?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    route?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    route?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type tblAdmissionCountOrderByAggregateInput = {
    tblAdmissionID?: SortOrder
    admissioncode?: SortOrder
    admissionname?: SortOrder
  }

  export type tblAdmissionAvgOrderByAggregateInput = {
    tblAdmissionID?: SortOrder
  }

  export type tblAdmissionMaxOrderByAggregateInput = {
    tblAdmissionID?: SortOrder
    admissioncode?: SortOrder
    admissionname?: SortOrder
  }

  export type tblAdmissionMinOrderByAggregateInput = {
    tblAdmissionID?: SortOrder
    admissioncode?: SortOrder
    admissionname?: SortOrder
  }

  export type tblAdmissionSumOrderByAggregateInput = {
    tblAdmissionID?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type tblAppCountOrderByAggregateInput = {
    tblAppID?: SortOrder
    AppID?: SortOrder
    ApplicationName?: SortOrder
  }

  export type tblAppAvgOrderByAggregateInput = {
    tblAppID?: SortOrder
    AppID?: SortOrder
  }

  export type tblAppMaxOrderByAggregateInput = {
    tblAppID?: SortOrder
    AppID?: SortOrder
    ApplicationName?: SortOrder
  }

  export type tblAppMinOrderByAggregateInput = {
    tblAppID?: SortOrder
    AppID?: SortOrder
    ApplicationName?: SortOrder
  }

  export type tblAppSumOrderByAggregateInput = {
    tblAppID?: SortOrder
    AppID?: SortOrder
  }

  export type tblAppAuthCountOrderByAggregateInput = {
    tblAppAuthID?: SortOrder
    appAuthID?: SortOrder
    AppID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblAppAuthAvgOrderByAggregateInput = {
    tblAppAuthID?: SortOrder
    appAuthID?: SortOrder
    AppID?: SortOrder
  }

  export type tblAppAuthMaxOrderByAggregateInput = {
    tblAppAuthID?: SortOrder
    appAuthID?: SortOrder
    AppID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblAppAuthMinOrderByAggregateInput = {
    tblAppAuthID?: SortOrder
    appAuthID?: SortOrder
    AppID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblAppAuthSumOrderByAggregateInput = {
    tblAppAuthID?: SortOrder
    appAuthID?: SortOrder
    AppID?: SortOrder
  }

  export type tblAppModeAuthCountOrderByAggregateInput = {
    tblUserAppModAuthID?: SortOrder
    moduleID?: SortOrder
    UserappModAuthID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblAppModeAuthAvgOrderByAggregateInput = {
    tblUserAppModAuthID?: SortOrder
    moduleID?: SortOrder
    UserappModAuthID?: SortOrder
  }

  export type tblAppModeAuthMaxOrderByAggregateInput = {
    tblUserAppModAuthID?: SortOrder
    moduleID?: SortOrder
    UserappModAuthID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblAppModeAuthMinOrderByAggregateInput = {
    tblUserAppModAuthID?: SortOrder
    moduleID?: SortOrder
    UserappModAuthID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblAppModeAuthSumOrderByAggregateInput = {
    tblUserAppModAuthID?: SortOrder
    moduleID?: SortOrder
    UserappModAuthID?: SortOrder
  }

  export type tblAppModulesCountOrderByAggregateInput = {
    tblAppModulesID?: SortOrder
    moduleID?: SortOrder
    AppID?: SortOrder
    ModuleName?: SortOrder
  }

  export type tblAppModulesAvgOrderByAggregateInput = {
    tblAppModulesID?: SortOrder
    moduleID?: SortOrder
    AppID?: SortOrder
  }

  export type tblAppModulesMaxOrderByAggregateInput = {
    tblAppModulesID?: SortOrder
    moduleID?: SortOrder
    AppID?: SortOrder
    ModuleName?: SortOrder
  }

  export type tblAppModulesMinOrderByAggregateInput = {
    tblAppModulesID?: SortOrder
    moduleID?: SortOrder
    AppID?: SortOrder
    ModuleName?: SortOrder
  }

  export type tblAppModulesSumOrderByAggregateInput = {
    tblAppModulesID?: SortOrder
    moduleID?: SortOrder
    AppID?: SortOrder
  }

  export type tblConsultCountOrderByAggregateInput = {
    tblConsultID?: SortOrder
    tblconsultspecialtyid?: SortOrder
    specialtyname?: SortOrder
  }

  export type tblConsultAvgOrderByAggregateInput = {
    tblConsultID?: SortOrder
    tblconsultspecialtyid?: SortOrder
  }

  export type tblConsultMaxOrderByAggregateInput = {
    tblConsultID?: SortOrder
    tblconsultspecialtyid?: SortOrder
    specialtyname?: SortOrder
  }

  export type tblConsultMinOrderByAggregateInput = {
    tblConsultID?: SortOrder
    tblconsultspecialtyid?: SortOrder
    specialtyname?: SortOrder
  }

  export type tblConsultSumOrderByAggregateInput = {
    tblConsultID?: SortOrder
    tblconsultspecialtyid?: SortOrder
  }

  export type tblCounterCountOrderByAggregateInput = {
    tblCounterID?: SortOrder
    currentCount?: SortOrder
    ratz?: SortOrder
    acu?: SortOrder
    ucc?: SortOrder
    triageout?: SortOrder
  }

  export type tblCounterAvgOrderByAggregateInput = {
    tblCounterID?: SortOrder
    currentCount?: SortOrder
    ratz?: SortOrder
    acu?: SortOrder
    ucc?: SortOrder
    triageout?: SortOrder
  }

  export type tblCounterMaxOrderByAggregateInput = {
    tblCounterID?: SortOrder
    currentCount?: SortOrder
    ratz?: SortOrder
    acu?: SortOrder
    ucc?: SortOrder
    triageout?: SortOrder
  }

  export type tblCounterMinOrderByAggregateInput = {
    tblCounterID?: SortOrder
    currentCount?: SortOrder
    ratz?: SortOrder
    acu?: SortOrder
    ucc?: SortOrder
    triageout?: SortOrder
  }

  export type tblCounterSumOrderByAggregateInput = {
    tblCounterID?: SortOrder
    currentCount?: SortOrder
    ratz?: SortOrder
    acu?: SortOrder
    ucc?: SortOrder
    triageout?: SortOrder
  }

  export type tblDepartmentCountOrderByAggregateInput = {
    tblDepartmentID?: SortOrder
    deptcode?: SortOrder
    deptname?: SortOrder
  }

  export type tblDepartmentAvgOrderByAggregateInput = {
    tblDepartmentID?: SortOrder
  }

  export type tblDepartmentMaxOrderByAggregateInput = {
    tblDepartmentID?: SortOrder
    deptcode?: SortOrder
    deptname?: SortOrder
  }

  export type tblDepartmentMinOrderByAggregateInput = {
    tblDepartmentID?: SortOrder
    deptcode?: SortOrder
    deptname?: SortOrder
  }

  export type tblDepartmentSumOrderByAggregateInput = {
    tblDepartmentID?: SortOrder
  }

  export type tblLocationCountOrderByAggregateInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    locationname?: SortOrder
  }

  export type tblLocationAvgOrderByAggregateInput = {
    tblLocationID?: SortOrder
  }

  export type tblLocationMaxOrderByAggregateInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    locationname?: SortOrder
  }

  export type tblLocationMinOrderByAggregateInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    locationname?: SortOrder
  }

  export type tblLocationSumOrderByAggregateInput = {
    tblLocationID?: SortOrder
  }

  export type tblLocationSessionCountOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    tblQueueID?: SortOrder
    name?: SortOrder
    dept_counter?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tblLocationSessionAvgOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
    dept_counter?: SortOrder
    status?: SortOrder
  }

  export type tblLocationSessionMaxOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    tblQueueID?: SortOrder
    name?: SortOrder
    dept_counter?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tblLocationSessionMinOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    tblQueueID?: SortOrder
    name?: SortOrder
    dept_counter?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tblLocationSessionSumOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
    dept_counter?: SortOrder
    status?: SortOrder
  }

  export type tbllocationsessionArchieveCountOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    tblQueueID?: SortOrder
    name?: SortOrder
    dept_counter?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tbllocationsessionArchieveAvgOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
    dept_counter?: SortOrder
    status?: SortOrder
  }

  export type tbllocationsessionArchieveMaxOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    tblQueueID?: SortOrder
    name?: SortOrder
    dept_counter?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tbllocationsessionArchieveMinOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    tblQueueID?: SortOrder
    name?: SortOrder
    dept_counter?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tbllocationsessionArchieveSumOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
    dept_counter?: SortOrder
    status?: SortOrder
  }

  export type tblQueueCountOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    Pmh?: SortOrder
    ticket?: SortOrder
  }

  export type tblQueueAvgOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    ticket?: SortOrder
  }

  export type tblQueueMaxOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    Pmh?: SortOrder
    ticket?: SortOrder
  }

  export type tblQueueMinOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    Pmh?: SortOrder
    ticket?: SortOrder
  }

  export type tblQueueSumOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    ticket?: SortOrder
  }

  export type tblQueueArchieveCountOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    ticket?: SortOrder
    Pmh?: SortOrder
  }

  export type tblQueueArchieveAvgOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    ticket?: SortOrder
  }

  export type tblQueueArchieveMaxOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    ticket?: SortOrder
    Pmh?: SortOrder
  }

  export type tblQueueArchieveMinOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    ticket?: SortOrder
    Pmh?: SortOrder
  }

  export type tblQueueArchieveSumOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
    ticket?: SortOrder
  }

  export type tblQueueArchieveTempCountOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
  }

  export type tblQueueArchieveTempAvgOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
  }

  export type tblQueueArchieveTempMaxOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
  }

  export type tblQueueArchieveTempMinOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
  }

  export type tblQueueArchieveTempSumOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
  }

  export type tblQueuePulmoCountOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
  }

  export type tblQueuePulmoAvgOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
  }

  export type tblQueuePulmoMaxOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
  }

  export type tblQueuePulmoMinOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    nationality?: SortOrder
    id?: SortOrder
    patient_age?: SortOrder
    gender?: SortOrder
    complain?: SortOrder
    triage_dt?: SortOrder
    bp?: SortOrder
    temp?: SortOrder
    hr?: SortOrder
    rr?: SortOrder
    spo2?: SortOrder
    rbs?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    allergies?: SortOrder
    bedassignment?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    criticalmsg?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    toremarks?: SortOrder
    last_update?: SortOrder
    mobileno?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    admittedIn?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    consultassign?: SortOrder
    consultarrive?: SortOrder
    consultdesicion?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
  }

  export type tblQueuePulmoSumOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    patient_age?: SortOrder
    override?: SortOrder
    critical?: SortOrder
    category?: SortOrder
    dept_counter?: SortOrder
    returnvisit72Hrs?: SortOrder
    admitted?: SortOrder
    consulted?: SortOrder
    consultspecialtyid?: SortOrder
    transferred?: SortOrder
    transferid?: SortOrder
  }

  export type tblQueueSessionCountOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
  }

  export type tblQueueSessionAvgOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
  }

  export type tblQueueSessionMaxOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
  }

  export type tblQueueSessionMinOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
  }

  export type tblQueueSessionSumOrderByAggregateInput = {
    tblLocationSessionID?: SortOrder
    qnumber?: SortOrder
    tblQueueID?: SortOrder
  }

  export type tblQueueTransferDeptCountOrderByAggregateInput = {
    tblQueueTransferDeptID?: SortOrder
    barcode?: SortOrder
    fromdeptcode?: SortOrder
    todeptcode?: SortOrder
    last_update?: SortOrder
    issued_dt?: SortOrder
  }

  export type tblQueueTransferDeptAvgOrderByAggregateInput = {
    tblQueueTransferDeptID?: SortOrder
  }

  export type tblQueueTransferDeptMaxOrderByAggregateInput = {
    tblQueueTransferDeptID?: SortOrder
    barcode?: SortOrder
    fromdeptcode?: SortOrder
    todeptcode?: SortOrder
    last_update?: SortOrder
    issued_dt?: SortOrder
  }

  export type tblQueueTransferDeptMinOrderByAggregateInput = {
    tblQueueTransferDeptID?: SortOrder
    barcode?: SortOrder
    fromdeptcode?: SortOrder
    todeptcode?: SortOrder
    last_update?: SortOrder
    issued_dt?: SortOrder
  }

  export type tblQueueTransferDeptSumOrderByAggregateInput = {
    tblQueueTransferDeptID?: SortOrder
  }

  export type tblQueueWaitCountOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    queueID?: SortOrder
    dept_counter?: SortOrder
  }

  export type tblQueueWaitAvgOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    queueID?: SortOrder
    dept_counter?: SortOrder
  }

  export type tblQueueWaitMaxOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    queueID?: SortOrder
    dept_counter?: SortOrder
  }

  export type tblQueueWaitMinOrderByAggregateInput = {
    tblQueueID?: SortOrder
    deptcode?: SortOrder
    qnumber?: SortOrder
    issued_dt?: SortOrder
    start_dt?: SortOrder
    finish_dt?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    barcode?: SortOrder
    deptname?: SortOrder
    name?: SortOrder
    userid?: SortOrder
    locationname?: SortOrder
    queueID?: SortOrder
    dept_counter?: SortOrder
  }

  export type tblQueueWaitSumOrderByAggregateInput = {
    tblQueueID?: SortOrder
    qnumber?: SortOrder
    status?: SortOrder
    waiting?: SortOrder
    queueID?: SortOrder
    dept_counter?: SortOrder
  }

  export type tblSubLocationCountOrderByAggregateInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tblSubLocationAvgOrderByAggregateInput = {
    tblLocationID?: SortOrder
    status?: SortOrder
  }

  export type tblSubLocationMaxOrderByAggregateInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tblSubLocationMinOrderByAggregateInput = {
    tblLocationID?: SortOrder
    loccode?: SortOrder
    deptcode?: SortOrder
    locationname?: SortOrder
    status?: SortOrder
  }

  export type tblSubLocationSumOrderByAggregateInput = {
    tblLocationID?: SortOrder
    status?: SortOrder
  }

  export type tblTransferCountOrderByAggregateInput = {
    tblTransferID?: SortOrder
    transferid?: SortOrder
    transfername?: SortOrder
  }

  export type tblTransferAvgOrderByAggregateInput = {
    tblTransferID?: SortOrder
    transferid?: SortOrder
  }

  export type tblTransferMaxOrderByAggregateInput = {
    tblTransferID?: SortOrder
    transferid?: SortOrder
    transfername?: SortOrder
  }

  export type tblTransferMinOrderByAggregateInput = {
    tblTransferID?: SortOrder
    transferid?: SortOrder
    transfername?: SortOrder
  }

  export type tblTransferSumOrderByAggregateInput = {
    tblTransferID?: SortOrder
    transferid?: SortOrder
  }

  export type tblUserDepartmentAuthCountOrderByAggregateInput = {
    tblUserDepartmentAuthID?: SortOrder
    authiD?: SortOrder
    deptcode?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblUserDepartmentAuthAvgOrderByAggregateInput = {
    tblUserDepartmentAuthID?: SortOrder
    authiD?: SortOrder
  }

  export type tblUserDepartmentAuthMaxOrderByAggregateInput = {
    tblUserDepartmentAuthID?: SortOrder
    authiD?: SortOrder
    deptcode?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblUserDepartmentAuthMinOrderByAggregateInput = {
    tblUserDepartmentAuthID?: SortOrder
    authiD?: SortOrder
    deptcode?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblUserDepartmentAuthSumOrderByAggregateInput = {
    tblUserDepartmentAuthID?: SortOrder
    authiD?: SortOrder
  }

  export type tblUserOverrideAuthCountOrderByAggregateInput = {
    tblUserOverrideAuthID?: SortOrder
    appAuthID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblUserOverrideAuthAvgOrderByAggregateInput = {
    tblUserOverrideAuthID?: SortOrder
    appAuthID?: SortOrder
  }

  export type tblUserOverrideAuthMaxOrderByAggregateInput = {
    tblUserOverrideAuthID?: SortOrder
    appAuthID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblUserOverrideAuthMinOrderByAggregateInput = {
    tblUserOverrideAuthID?: SortOrder
    appAuthID?: SortOrder
    userid?: SortOrder
    last_update?: SortOrder
  }

  export type tblUserOverrideAuthSumOrderByAggregateInput = {
    tblUserOverrideAuthID?: SortOrder
    appAuthID?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PromptCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    intent?: SortOrder
    parameters?: SortOrder
    hasAction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type PromptMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    intent?: SortOrder
    parameters?: SortOrder
    hasAction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type PromptMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    intent?: SortOrder
    parameters?: SortOrder
    hasAction?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type tblUsersCountOrderByAggregateInput = {
    tblUsersID?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    name?: SortOrder
    deptcode?: SortOrder
    date?: SortOrder
  }

  export type tblUsersAvgOrderByAggregateInput = {
    tblUsersID?: SortOrder
  }

  export type tblUsersMaxOrderByAggregateInput = {
    tblUsersID?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    name?: SortOrder
    deptcode?: SortOrder
    date?: SortOrder
  }

  export type tblUsersMinOrderByAggregateInput = {
    tblUsersID?: SortOrder
    userid?: SortOrder
    password?: SortOrder
    name?: SortOrder
    deptcode?: SortOrder
    date?: SortOrder
  }

  export type tblUsersSumOrderByAggregateInput = {
    tblUsersID?: SortOrder
  }

  export type VitalSignCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    bp?: SortOrder
    height?: SortOrder
    temp?: SortOrder
    spo2?: SortOrder
    weight?: SortOrder
    hr?: SortOrder
    rbs?: SortOrder
    rr?: SortOrder
    timeVs?: SortOrder
    allergies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VitalSignMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    bp?: SortOrder
    height?: SortOrder
    temp?: SortOrder
    spo2?: SortOrder
    weight?: SortOrder
    hr?: SortOrder
    rbs?: SortOrder
    rr?: SortOrder
    timeVs?: SortOrder
    allergies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VitalSignMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    bp?: SortOrder
    height?: SortOrder
    temp?: SortOrder
    spo2?: SortOrder
    weight?: SortOrder
    hr?: SortOrder
    rbs?: SortOrder
    rr?: SortOrder
    timeVs?: SortOrder
    allergies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientCountCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCountCreateWithoutUserInput, PatientCountUncheckedCreateWithoutUserInput> | PatientCountCreateWithoutUserInput[] | PatientCountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCountCreateOrConnectWithoutUserInput | PatientCountCreateOrConnectWithoutUserInput[]
    createMany?: PatientCountCreateManyUserInputEnvelope
    connect?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type RoleCreateNestedManyWithoutUserInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type PromptCreateNestedManyWithoutUserInput = {
    create?: XOR<PromptCreateWithoutUserInput, PromptUncheckedCreateWithoutUserInput> | PromptCreateWithoutUserInput[] | PromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutUserInput | PromptCreateOrConnectWithoutUserInput[]
    createMany?: PromptCreateManyUserInputEnvelope
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientCountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCountCreateWithoutUserInput, PatientCountUncheckedCreateWithoutUserInput> | PatientCountCreateWithoutUserInput[] | PatientCountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCountCreateOrConnectWithoutUserInput | PatientCountCreateOrConnectWithoutUserInput[]
    createMany?: PatientCountCreateManyUserInputEnvelope
    connect?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type PromptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PromptCreateWithoutUserInput, PromptUncheckedCreateWithoutUserInput> | PromptCreateWithoutUserInput[] | PromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutUserInput | PromptCreateOrConnectWithoutUserInput[]
    createMany?: PromptCreateManyUserInputEnvelope
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PatientUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientCountUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCountCreateWithoutUserInput, PatientCountUncheckedCreateWithoutUserInput> | PatientCountCreateWithoutUserInput[] | PatientCountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCountCreateOrConnectWithoutUserInput | PatientCountCreateOrConnectWithoutUserInput[]
    upsert?: PatientCountUpsertWithWhereUniqueWithoutUserInput | PatientCountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCountCreateManyUserInputEnvelope
    set?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    disconnect?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    delete?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    connect?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    update?: PatientCountUpdateWithWhereUniqueWithoutUserInput | PatientCountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientCountUpdateManyWithWhereWithoutUserInput | PatientCountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientCountScalarWhereInput | PatientCountScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type RoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUserInput | RoleUpsertWithWhereUniqueWithoutUserInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUserInput | RoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUserInput | RoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type PromptUpdateManyWithoutUserNestedInput = {
    create?: XOR<PromptCreateWithoutUserInput, PromptUncheckedCreateWithoutUserInput> | PromptCreateWithoutUserInput[] | PromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutUserInput | PromptCreateOrConnectWithoutUserInput[]
    upsert?: PromptUpsertWithWhereUniqueWithoutUserInput | PromptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PromptCreateManyUserInputEnvelope
    set?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    disconnect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    delete?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    update?: PromptUpdateWithWhereUniqueWithoutUserInput | PromptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PromptUpdateManyWithWhereWithoutUserInput | PromptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PromptScalarWhereInput | PromptScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientCountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCountCreateWithoutUserInput, PatientCountUncheckedCreateWithoutUserInput> | PatientCountCreateWithoutUserInput[] | PatientCountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCountCreateOrConnectWithoutUserInput | PatientCountCreateOrConnectWithoutUserInput[]
    upsert?: PatientCountUpsertWithWhereUniqueWithoutUserInput | PatientCountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCountCreateManyUserInputEnvelope
    set?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    disconnect?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    delete?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    connect?: PatientCountWhereUniqueInput | PatientCountWhereUniqueInput[]
    update?: PatientCountUpdateWithWhereUniqueWithoutUserInput | PatientCountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientCountUpdateManyWithWhereWithoutUserInput | PatientCountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientCountScalarWhereInput | PatientCountScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput> | RoleCreateWithoutUserInput[] | RoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInput | RoleCreateOrConnectWithoutUserInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUserInput | RoleUpsertWithWhereUniqueWithoutUserInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUserInput | RoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUserInput | RoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type PromptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PromptCreateWithoutUserInput, PromptUncheckedCreateWithoutUserInput> | PromptCreateWithoutUserInput[] | PromptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromptCreateOrConnectWithoutUserInput | PromptCreateOrConnectWithoutUserInput[]
    upsert?: PromptUpsertWithWhereUniqueWithoutUserInput | PromptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PromptCreateManyUserInputEnvelope
    set?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    disconnect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    delete?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    connect?: PromptWhereUniqueInput | PromptWhereUniqueInput[]
    update?: PromptUpdateWithWhereUniqueWithoutUserInput | PromptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PromptUpdateManyWithWhereWithoutUserInput | PromptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PromptScalarWhereInput | PromptScalarWhereInput[]
  }

  export type PatientCreateNestedManyWithoutBedInput = {
    create?: XOR<PatientCreateWithoutBedInput, PatientUncheckedCreateWithoutBedInput> | PatientCreateWithoutBedInput[] | PatientUncheckedCreateWithoutBedInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBedInput | PatientCreateOrConnectWithoutBedInput[]
    createMany?: PatientCreateManyBedInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutBedInput = {
    create?: XOR<PatientCreateWithoutBedInput, PatientUncheckedCreateWithoutBedInput> | PatientCreateWithoutBedInput[] | PatientUncheckedCreateWithoutBedInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBedInput | PatientCreateOrConnectWithoutBedInput[]
    createMany?: PatientCreateManyBedInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUpdateManyWithoutBedNestedInput = {
    create?: XOR<PatientCreateWithoutBedInput, PatientUncheckedCreateWithoutBedInput> | PatientCreateWithoutBedInput[] | PatientUncheckedCreateWithoutBedInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBedInput | PatientCreateOrConnectWithoutBedInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutBedInput | PatientUpsertWithWhereUniqueWithoutBedInput[]
    createMany?: PatientCreateManyBedInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutBedInput | PatientUpdateWithWhereUniqueWithoutBedInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutBedInput | PatientUpdateManyWithWhereWithoutBedInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutBedNestedInput = {
    create?: XOR<PatientCreateWithoutBedInput, PatientUncheckedCreateWithoutBedInput> | PatientCreateWithoutBedInput[] | PatientUncheckedCreateWithoutBedInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutBedInput | PatientCreateOrConnectWithoutBedInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutBedInput | PatientUpsertWithWhereUniqueWithoutBedInput[]
    createMany?: PatientCreateManyBedInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutBedInput | PatientUpdateWithWhereUniqueWithoutBedInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutBedInput | PatientUpdateManyWithWhereWithoutBedInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutJourneyInput = {
    create?: XOR<PatientCreateWithoutJourneyInput, PatientUncheckedCreateWithoutJourneyInput>
    connectOrCreate?: PatientCreateOrConnectWithoutJourneyInput
    connect?: PatientWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PatientUpdateOneWithoutJourneyNestedInput = {
    create?: XOR<PatientCreateWithoutJourneyInput, PatientUncheckedCreateWithoutJourneyInput>
    connectOrCreate?: PatientCreateOrConnectWithoutJourneyInput
    upsert?: PatientUpsertWithoutJourneyInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutJourneyInput, PatientUpdateWithoutJourneyInput>, PatientUncheckedUpdateWithoutJourneyInput>
  }

  export type JourneyCreateNestedManyWithoutPatientInput = {
    create?: XOR<JourneyCreateWithoutPatientInput, JourneyUncheckedCreateWithoutPatientInput> | JourneyCreateWithoutPatientInput[] | JourneyUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: JourneyCreateOrConnectWithoutPatientInput | JourneyCreateOrConnectWithoutPatientInput[]
    createMany?: JourneyCreateManyPatientInputEnvelope
    connect?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
  }

  export type BedCreateNestedOneWithoutPatientInput = {
    create?: XOR<BedCreateWithoutPatientInput, BedUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BedCreateOrConnectWithoutPatientInput
    connect?: BedWhereUniqueInput
  }

  export type tblDepartmentCreateNestedOneWithoutPatientInput = {
    create?: XOR<tblDepartmentCreateWithoutPatientInput, tblDepartmentUncheckedCreateWithoutPatientInput>
    connectOrCreate?: tblDepartmentCreateOrConnectWithoutPatientInput
    connect?: tblDepartmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPatientInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    connect?: UserWhereUniqueInput
  }

  export type VitalSignCreateNestedManyWithoutPatientInput = {
    create?: XOR<VitalSignCreateWithoutPatientInput, VitalSignUncheckedCreateWithoutPatientInput> | VitalSignCreateWithoutPatientInput[] | VitalSignUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: VitalSignCreateOrConnectWithoutPatientInput | VitalSignCreateOrConnectWithoutPatientInput[]
    createMany?: VitalSignCreateManyPatientInputEnvelope
    connect?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
  }

  export type JourneyUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<JourneyCreateWithoutPatientInput, JourneyUncheckedCreateWithoutPatientInput> | JourneyCreateWithoutPatientInput[] | JourneyUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: JourneyCreateOrConnectWithoutPatientInput | JourneyCreateOrConnectWithoutPatientInput[]
    createMany?: JourneyCreateManyPatientInputEnvelope
    connect?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
  }

  export type VitalSignUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<VitalSignCreateWithoutPatientInput, VitalSignUncheckedCreateWithoutPatientInput> | VitalSignCreateWithoutPatientInput[] | VitalSignUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: VitalSignCreateOrConnectWithoutPatientInput | VitalSignCreateOrConnectWithoutPatientInput[]
    createMany?: VitalSignCreateManyPatientInputEnvelope
    connect?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JourneyUpdateManyWithoutPatientNestedInput = {
    create?: XOR<JourneyCreateWithoutPatientInput, JourneyUncheckedCreateWithoutPatientInput> | JourneyCreateWithoutPatientInput[] | JourneyUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: JourneyCreateOrConnectWithoutPatientInput | JourneyCreateOrConnectWithoutPatientInput[]
    upsert?: JourneyUpsertWithWhereUniqueWithoutPatientInput | JourneyUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: JourneyCreateManyPatientInputEnvelope
    set?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    disconnect?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    delete?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    connect?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    update?: JourneyUpdateWithWhereUniqueWithoutPatientInput | JourneyUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: JourneyUpdateManyWithWhereWithoutPatientInput | JourneyUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: JourneyScalarWhereInput | JourneyScalarWhereInput[]
  }

  export type BedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<BedCreateWithoutPatientInput, BedUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BedCreateOrConnectWithoutPatientInput
    upsert?: BedUpsertWithoutPatientInput
    disconnect?: BedWhereInput | boolean
    delete?: BedWhereInput | boolean
    connect?: BedWhereUniqueInput
    update?: XOR<XOR<BedUpdateToOneWithWhereWithoutPatientInput, BedUpdateWithoutPatientInput>, BedUncheckedUpdateWithoutPatientInput>
  }

  export type tblDepartmentUpdateOneWithoutPatientNestedInput = {
    create?: XOR<tblDepartmentCreateWithoutPatientInput, tblDepartmentUncheckedCreateWithoutPatientInput>
    connectOrCreate?: tblDepartmentCreateOrConnectWithoutPatientInput
    upsert?: tblDepartmentUpsertWithoutPatientInput
    disconnect?: tblDepartmentWhereInput | boolean
    delete?: tblDepartmentWhereInput | boolean
    connect?: tblDepartmentWhereUniqueInput
    update?: XOR<XOR<tblDepartmentUpdateToOneWithWhereWithoutPatientInput, tblDepartmentUpdateWithoutPatientInput>, tblDepartmentUncheckedUpdateWithoutPatientInput>
  }

  export type UserUpdateOneWithoutPatientNestedInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    upsert?: UserUpsertWithoutPatientInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientInput, UserUpdateWithoutPatientInput>, UserUncheckedUpdateWithoutPatientInput>
  }

  export type VitalSignUpdateManyWithoutPatientNestedInput = {
    create?: XOR<VitalSignCreateWithoutPatientInput, VitalSignUncheckedCreateWithoutPatientInput> | VitalSignCreateWithoutPatientInput[] | VitalSignUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: VitalSignCreateOrConnectWithoutPatientInput | VitalSignCreateOrConnectWithoutPatientInput[]
    upsert?: VitalSignUpsertWithWhereUniqueWithoutPatientInput | VitalSignUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: VitalSignCreateManyPatientInputEnvelope
    set?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    disconnect?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    delete?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    connect?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    update?: VitalSignUpdateWithWhereUniqueWithoutPatientInput | VitalSignUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: VitalSignUpdateManyWithWhereWithoutPatientInput | VitalSignUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: VitalSignScalarWhereInput | VitalSignScalarWhereInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type JourneyUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<JourneyCreateWithoutPatientInput, JourneyUncheckedCreateWithoutPatientInput> | JourneyCreateWithoutPatientInput[] | JourneyUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: JourneyCreateOrConnectWithoutPatientInput | JourneyCreateOrConnectWithoutPatientInput[]
    upsert?: JourneyUpsertWithWhereUniqueWithoutPatientInput | JourneyUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: JourneyCreateManyPatientInputEnvelope
    set?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    disconnect?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    delete?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    connect?: JourneyWhereUniqueInput | JourneyWhereUniqueInput[]
    update?: JourneyUpdateWithWhereUniqueWithoutPatientInput | JourneyUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: JourneyUpdateManyWithWhereWithoutPatientInput | JourneyUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: JourneyScalarWhereInput | JourneyScalarWhereInput[]
  }

  export type VitalSignUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<VitalSignCreateWithoutPatientInput, VitalSignUncheckedCreateWithoutPatientInput> | VitalSignCreateWithoutPatientInput[] | VitalSignUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: VitalSignCreateOrConnectWithoutPatientInput | VitalSignCreateOrConnectWithoutPatientInput[]
    upsert?: VitalSignUpsertWithWhereUniqueWithoutPatientInput | VitalSignUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: VitalSignCreateManyPatientInputEnvelope
    set?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    disconnect?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    delete?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    connect?: VitalSignWhereUniqueInput | VitalSignWhereUniqueInput[]
    update?: VitalSignUpdateWithWhereUniqueWithoutPatientInput | VitalSignUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: VitalSignUpdateManyWithWhereWithoutPatientInput | VitalSignUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: VitalSignScalarWhereInput | VitalSignScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPatientCountInput = {
    create?: XOR<UserCreateWithoutPatientCountInput, UserUncheckedCreateWithoutPatientCountInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientCountInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutPatientCountNestedInput = {
    create?: XOR<UserCreateWithoutPatientCountInput, UserUncheckedCreateWithoutPatientCountInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientCountInput
    upsert?: UserUpsertWithoutPatientCountInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientCountInput, UserUpdateWithoutPatientCountInput>, UserUncheckedUpdateWithoutPatientCountInput>
  }

  export type UserCreateNestedOneWithoutRefreshTokenInput = {
    create?: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokenInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutRefreshTokenNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokenInput
    upsert?: UserUpsertWithoutRefreshTokenInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokenInput, UserUpdateWithoutRefreshTokenInput>, UserUncheckedUpdateWithoutRefreshTokenInput>
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type PatientCreateNestedManyWithoutTblDepartmentInput = {
    create?: XOR<PatientCreateWithoutTblDepartmentInput, PatientUncheckedCreateWithoutTblDepartmentInput> | PatientCreateWithoutTblDepartmentInput[] | PatientUncheckedCreateWithoutTblDepartmentInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutTblDepartmentInput | PatientCreateOrConnectWithoutTblDepartmentInput[]
    createMany?: PatientCreateManyTblDepartmentInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutTblDepartmentInput = {
    create?: XOR<PatientCreateWithoutTblDepartmentInput, PatientUncheckedCreateWithoutTblDepartmentInput> | PatientCreateWithoutTblDepartmentInput[] | PatientUncheckedCreateWithoutTblDepartmentInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutTblDepartmentInput | PatientCreateOrConnectWithoutTblDepartmentInput[]
    createMany?: PatientCreateManyTblDepartmentInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUpdateManyWithoutTblDepartmentNestedInput = {
    create?: XOR<PatientCreateWithoutTblDepartmentInput, PatientUncheckedCreateWithoutTblDepartmentInput> | PatientCreateWithoutTblDepartmentInput[] | PatientUncheckedCreateWithoutTblDepartmentInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutTblDepartmentInput | PatientCreateOrConnectWithoutTblDepartmentInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutTblDepartmentInput | PatientUpsertWithWhereUniqueWithoutTblDepartmentInput[]
    createMany?: PatientCreateManyTblDepartmentInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutTblDepartmentInput | PatientUpdateWithWhereUniqueWithoutTblDepartmentInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutTblDepartmentInput | PatientUpdateManyWithWhereWithoutTblDepartmentInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutTblDepartmentNestedInput = {
    create?: XOR<PatientCreateWithoutTblDepartmentInput, PatientUncheckedCreateWithoutTblDepartmentInput> | PatientCreateWithoutTblDepartmentInput[] | PatientUncheckedCreateWithoutTblDepartmentInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutTblDepartmentInput | PatientCreateOrConnectWithoutTblDepartmentInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutTblDepartmentInput | PatientUpsertWithWhereUniqueWithoutTblDepartmentInput[]
    createMany?: PatientCreateManyTblDepartmentInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutTblDepartmentInput | PatientUpdateWithWhereUniqueWithoutTblDepartmentInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutTblDepartmentInput | PatientUpdateManyWithWhereWithoutTblDepartmentInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPromptInput = {
    create?: XOR<UserCreateWithoutPromptInput, UserUncheckedCreateWithoutPromptInput>
    connectOrCreate?: UserCreateOrConnectWithoutPromptInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutPromptNestedInput = {
    create?: XOR<UserCreateWithoutPromptInput, UserUncheckedCreateWithoutPromptInput>
    connectOrCreate?: UserCreateOrConnectWithoutPromptInput
    upsert?: UserUpsertWithoutPromptInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPromptInput, UserUpdateWithoutPromptInput>, UserUncheckedUpdateWithoutPromptInput>
  }

  export type PatientCreateNestedOneWithoutVitalSignInput = {
    create?: XOR<PatientCreateWithoutVitalSignInput, PatientUncheckedCreateWithoutVitalSignInput>
    connectOrCreate?: PatientCreateOrConnectWithoutVitalSignInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientUpdateOneWithoutVitalSignNestedInput = {
    create?: XOR<PatientCreateWithoutVitalSignInput, PatientUncheckedCreateWithoutVitalSignInput>
    connectOrCreate?: PatientCreateOrConnectWithoutVitalSignInput
    upsert?: PatientUpsertWithoutVitalSignInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutVitalSignInput, PatientUpdateWithoutVitalSignInput>, PatientUncheckedUpdateWithoutVitalSignInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PatientCreateWithoutUserInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyCreateNestedManyWithoutPatientInput
    Bed?: BedCreateNestedOneWithoutPatientInput
    tblDepartment?: tblDepartmentCreateNestedOneWithoutPatientInput
    VitalSign?: VitalSignCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyUncheckedCreateNestedManyWithoutPatientInput
    VitalSign?: VitalSignUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientCreateManyUserInputEnvelope = {
    data: PatientCreateManyUserInput | PatientCreateManyUserInput[]
  }

  export type PatientCountCreateWithoutUserInput = {
    id: string
    counter?: number | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type PatientCountUncheckedCreateWithoutUserInput = {
    id: string
    counter?: number | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type PatientCountCreateOrConnectWithoutUserInput = {
    where: PatientCountWhereUniqueInput
    create: XOR<PatientCountCreateWithoutUserInput, PatientCountUncheckedCreateWithoutUserInput>
  }

  export type PatientCountCreateManyUserInputEnvelope = {
    data: PatientCountCreateManyUserInput | PatientCountCreateManyUserInput[]
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
  }

  export type RoleCreateWithoutUserInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    description?: string | null
    route?: string | null
  }

  export type RoleUncheckedCreateWithoutUserInput = {
    id: string
    name: string
    createdAt?: Date | string
    updatedAt: Date | string
    description?: string | null
    route?: string | null
  }

  export type RoleCreateOrConnectWithoutUserInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
  }

  export type PromptCreateWithoutUserInput = {
    id?: string
    text: string
    intent?: string | null
    parameters?: string | null
    hasAction?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PromptUncheckedCreateWithoutUserInput = {
    id?: string
    text: string
    intent?: string | null
    parameters?: string | null
    hasAction?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PromptCreateOrConnectWithoutUserInput = {
    where: PromptWhereUniqueInput
    create: XOR<PromptCreateWithoutUserInput, PromptUncheckedCreateWithoutUserInput>
  }

  export type PromptCreateManyUserInputEnvelope = {
    data: PromptCreateManyUserInput | PromptCreateManyUserInput[]
  }

  export type PatientUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateManyWithWhereWithoutUserInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutUserInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: StringFilter<"Patient"> | string
    name?: StringNullableFilter<"Patient"> | string | null
    nationality?: StringNullableFilter<"Patient"> | string | null
    sex?: StringNullableFilter<"Patient"> | string | null
    idNumber?: StringNullableFilter<"Patient"> | string | null
    age?: IntNullableFilter<"Patient"> | number | null
    mobileNumber?: StringNullableFilter<"Patient"> | string | null
    status?: StringNullableFilter<"Patient"> | string | null
    cheifComplaint?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    ticket?: StringNullableFilter<"Patient"> | string | null
    userId?: StringNullableFilter<"Patient"> | string | null
    callPatient?: BoolNullableFilter<"Patient"> | boolean | null
    state?: IntNullableFilter<"Patient"> | number | null
    barcode?: StringNullableFilter<"Patient"> | string | null
    departmentId?: DecimalNullableFilter<"Patient"> | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: IntNullableFilter<"Patient"> | number | null
    bedId?: StringNullableFilter<"Patient"> | string | null
    beginTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    birthDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
    bloodGroup?: StringNullableFilter<"Patient"> | string | null
    mrnNumber?: StringNullableFilter<"Patient"> | string | null
    remarks?: StringNullableFilter<"Patient"> | string | null
    assignDeptTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    firstCallTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    secondCallTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    vitalTime?: DateTimeNullableFilter<"Patient"> | Date | string | null
    registrationDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
  }

  export type PatientCountUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientCountWhereUniqueInput
    update: XOR<PatientCountUpdateWithoutUserInput, PatientCountUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCountCreateWithoutUserInput, PatientCountUncheckedCreateWithoutUserInput>
  }

  export type PatientCountUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientCountWhereUniqueInput
    data: XOR<PatientCountUpdateWithoutUserInput, PatientCountUncheckedUpdateWithoutUserInput>
  }

  export type PatientCountUpdateManyWithWhereWithoutUserInput = {
    where: PatientCountScalarWhereInput
    data: XOR<PatientCountUpdateManyMutationInput, PatientCountUncheckedUpdateManyWithoutUserInput>
  }

  export type PatientCountScalarWhereInput = {
    AND?: PatientCountScalarWhereInput | PatientCountScalarWhereInput[]
    OR?: PatientCountScalarWhereInput[]
    NOT?: PatientCountScalarWhereInput | PatientCountScalarWhereInput[]
    id?: StringFilter<"PatientCount"> | string
    userId?: StringNullableFilter<"PatientCount"> | string | null
    counter?: IntNullableFilter<"PatientCount"> | number | null
    createdAt?: DateTimeFilter<"PatientCount"> | Date | string
    updatedAt?: DateTimeFilter<"PatientCount"> | Date | string
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringNullableFilter<"RefreshToken"> | string | null
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }

  export type RoleUpsertWithWhereUniqueWithoutUserInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
    create: XOR<RoleCreateWithoutUserInput, RoleUncheckedCreateWithoutUserInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUserInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUserInput, RoleUncheckedUpdateWithoutUserInput>
  }

  export type RoleUpdateManyWithWhereWithoutUserInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutUserInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    description?: StringNullableFilter<"Role"> | string | null
    route?: StringNullableFilter<"Role"> | string | null
  }

  export type PromptUpsertWithWhereUniqueWithoutUserInput = {
    where: PromptWhereUniqueInput
    update: XOR<PromptUpdateWithoutUserInput, PromptUncheckedUpdateWithoutUserInput>
    create: XOR<PromptCreateWithoutUserInput, PromptUncheckedCreateWithoutUserInput>
  }

  export type PromptUpdateWithWhereUniqueWithoutUserInput = {
    where: PromptWhereUniqueInput
    data: XOR<PromptUpdateWithoutUserInput, PromptUncheckedUpdateWithoutUserInput>
  }

  export type PromptUpdateManyWithWhereWithoutUserInput = {
    where: PromptScalarWhereInput
    data: XOR<PromptUpdateManyMutationInput, PromptUncheckedUpdateManyWithoutUserInput>
  }

  export type PromptScalarWhereInput = {
    AND?: PromptScalarWhereInput | PromptScalarWhereInput[]
    OR?: PromptScalarWhereInput[]
    NOT?: PromptScalarWhereInput | PromptScalarWhereInput[]
    id?: StringFilter<"Prompt"> | string
    text?: StringFilter<"Prompt"> | string
    intent?: StringNullableFilter<"Prompt"> | string | null
    parameters?: StringNullableFilter<"Prompt"> | string | null
    hasAction?: BoolFilter<"Prompt"> | boolean
    createdAt?: DateTimeFilter<"Prompt"> | Date | string
    updatedAt?: DateTimeFilter<"Prompt"> | Date | string
    userId?: StringNullableFilter<"Prompt"> | string | null
  }

  export type PatientCreateWithoutBedInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyCreateNestedManyWithoutPatientInput
    tblDepartment?: tblDepartmentCreateNestedOneWithoutPatientInput
    User?: UserCreateNestedOneWithoutPatientInput
    VitalSign?: VitalSignCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutBedInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyUncheckedCreateNestedManyWithoutPatientInput
    VitalSign?: VitalSignUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutBedInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutBedInput, PatientUncheckedCreateWithoutBedInput>
  }

  export type PatientCreateManyBedInputEnvelope = {
    data: PatientCreateManyBedInput | PatientCreateManyBedInput[]
  }

  export type PatientUpsertWithWhereUniqueWithoutBedInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutBedInput, PatientUncheckedUpdateWithoutBedInput>
    create: XOR<PatientCreateWithoutBedInput, PatientUncheckedCreateWithoutBedInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutBedInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutBedInput, PatientUncheckedUpdateWithoutBedInput>
  }

  export type PatientUpdateManyWithWhereWithoutBedInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutBedInput>
  }

  export type PatientCreateWithoutJourneyInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Bed?: BedCreateNestedOneWithoutPatientInput
    tblDepartment?: tblDepartmentCreateNestedOneWithoutPatientInput
    User?: UserCreateNestedOneWithoutPatientInput
    VitalSign?: VitalSignCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutJourneyInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    VitalSign?: VitalSignUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutJourneyInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutJourneyInput, PatientUncheckedCreateWithoutJourneyInput>
  }

  export type PatientUpsertWithoutJourneyInput = {
    update: XOR<PatientUpdateWithoutJourneyInput, PatientUncheckedUpdateWithoutJourneyInput>
    create: XOR<PatientCreateWithoutJourneyInput, PatientUncheckedCreateWithoutJourneyInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutJourneyInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutJourneyInput, PatientUncheckedUpdateWithoutJourneyInput>
  }

  export type PatientUpdateWithoutJourneyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Bed?: BedUpdateOneWithoutPatientNestedInput
    tblDepartment?: tblDepartmentUpdateOneWithoutPatientNestedInput
    User?: UserUpdateOneWithoutPatientNestedInput
    VitalSign?: VitalSignUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutJourneyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    VitalSign?: VitalSignUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type JourneyCreateWithoutPatientInput = {
    id: string
    isActive?: boolean | null
    firstCallTime?: Date | string | null
    vitalTime?: Date | string | null
    assignDeptTime?: Date | string | null
    secondCallTime?: Date | string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type JourneyUncheckedCreateWithoutPatientInput = {
    id: string
    isActive?: boolean | null
    firstCallTime?: Date | string | null
    vitalTime?: Date | string | null
    assignDeptTime?: Date | string | null
    secondCallTime?: Date | string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type JourneyCreateOrConnectWithoutPatientInput = {
    where: JourneyWhereUniqueInput
    create: XOR<JourneyCreateWithoutPatientInput, JourneyUncheckedCreateWithoutPatientInput>
  }

  export type JourneyCreateManyPatientInputEnvelope = {
    data: JourneyCreateManyPatientInput | JourneyCreateManyPatientInput[]
  }

  export type BedCreateWithoutPatientInput = {
    id: string
    bedNumber?: string | null
    bedStatus?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type BedUncheckedCreateWithoutPatientInput = {
    id: string
    bedNumber?: string | null
    bedStatus?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type BedCreateOrConnectWithoutPatientInput = {
    where: BedWhereUniqueInput
    create: XOR<BedCreateWithoutPatientInput, BedUncheckedCreateWithoutPatientInput>
  }

  export type tblDepartmentCreateWithoutPatientInput = {
    tblDepartmentID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    deptname?: string | null
  }

  export type tblDepartmentUncheckedCreateWithoutPatientInput = {
    tblDepartmentID: Decimal | DecimalJsLike | number | string
    deptcode?: string | null
    deptname?: string | null
  }

  export type tblDepartmentCreateOrConnectWithoutPatientInput = {
    where: tblDepartmentWhereUniqueInput
    create: XOR<tblDepartmentCreateWithoutPatientInput, tblDepartmentUncheckedCreateWithoutPatientInput>
  }

  export type UserCreateWithoutPatientInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    PatientCount?: PatientCountCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
    Role?: RoleCreateNestedManyWithoutUserInput
    Prompt?: PromptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    PatientCount?: PatientCountUncheckedCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    Prompt?: PromptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
  }

  export type VitalSignCreateWithoutPatientInput = {
    id: string
    bp?: string | null
    height?: string | null
    temp?: string | null
    spo2?: string | null
    weight?: string | null
    hr?: string | null
    rbs?: string | null
    rr?: string | null
    timeVs?: Date | string | null
    allergies?: boolean | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type VitalSignUncheckedCreateWithoutPatientInput = {
    id: string
    bp?: string | null
    height?: string | null
    temp?: string | null
    spo2?: string | null
    weight?: string | null
    hr?: string | null
    rbs?: string | null
    rr?: string | null
    timeVs?: Date | string | null
    allergies?: boolean | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type VitalSignCreateOrConnectWithoutPatientInput = {
    where: VitalSignWhereUniqueInput
    create: XOR<VitalSignCreateWithoutPatientInput, VitalSignUncheckedCreateWithoutPatientInput>
  }

  export type VitalSignCreateManyPatientInputEnvelope = {
    data: VitalSignCreateManyPatientInput | VitalSignCreateManyPatientInput[]
  }

  export type JourneyUpsertWithWhereUniqueWithoutPatientInput = {
    where: JourneyWhereUniqueInput
    update: XOR<JourneyUpdateWithoutPatientInput, JourneyUncheckedUpdateWithoutPatientInput>
    create: XOR<JourneyCreateWithoutPatientInput, JourneyUncheckedCreateWithoutPatientInput>
  }

  export type JourneyUpdateWithWhereUniqueWithoutPatientInput = {
    where: JourneyWhereUniqueInput
    data: XOR<JourneyUpdateWithoutPatientInput, JourneyUncheckedUpdateWithoutPatientInput>
  }

  export type JourneyUpdateManyWithWhereWithoutPatientInput = {
    where: JourneyScalarWhereInput
    data: XOR<JourneyUpdateManyMutationInput, JourneyUncheckedUpdateManyWithoutPatientInput>
  }

  export type JourneyScalarWhereInput = {
    AND?: JourneyScalarWhereInput | JourneyScalarWhereInput[]
    OR?: JourneyScalarWhereInput[]
    NOT?: JourneyScalarWhereInput | JourneyScalarWhereInput[]
    id?: StringFilter<"Journey"> | string
    isActive?: BoolNullableFilter<"Journey"> | boolean | null
    firstCallTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    vitalTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    assignDeptTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    secondCallTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    beginTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Journey"> | Date | string | null
    patientId?: StringNullableFilter<"Journey"> | string | null
    createdAt?: DateTimeFilter<"Journey"> | Date | string
    updatedAt?: DateTimeFilter<"Journey"> | Date | string
  }

  export type BedUpsertWithoutPatientInput = {
    update: XOR<BedUpdateWithoutPatientInput, BedUncheckedUpdateWithoutPatientInput>
    create: XOR<BedCreateWithoutPatientInput, BedUncheckedCreateWithoutPatientInput>
    where?: BedWhereInput
  }

  export type BedUpdateToOneWithWhereWithoutPatientInput = {
    where?: BedWhereInput
    data: XOR<BedUpdateWithoutPatientInput, BedUncheckedUpdateWithoutPatientInput>
  }

  export type BedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bedStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BedUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bedStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tblDepartmentUpsertWithoutPatientInput = {
    update: XOR<tblDepartmentUpdateWithoutPatientInput, tblDepartmentUncheckedUpdateWithoutPatientInput>
    create: XOR<tblDepartmentCreateWithoutPatientInput, tblDepartmentUncheckedCreateWithoutPatientInput>
    where?: tblDepartmentWhereInput
  }

  export type tblDepartmentUpdateToOneWithWhereWithoutPatientInput = {
    where?: tblDepartmentWhereInput
    data: XOR<tblDepartmentUpdateWithoutPatientInput, tblDepartmentUncheckedUpdateWithoutPatientInput>
  }

  export type tblDepartmentUpdateWithoutPatientInput = {
    tblDepartmentID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tblDepartmentUncheckedUpdateWithoutPatientInput = {
    tblDepartmentID?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    deptname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutPatientInput = {
    update: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
  }

  export type UserUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    PatientCount?: PatientCountUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateManyWithoutUserNestedInput
    Prompt?: PromptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    PatientCount?: PatientCountUncheckedUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    Prompt?: PromptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VitalSignUpsertWithWhereUniqueWithoutPatientInput = {
    where: VitalSignWhereUniqueInput
    update: XOR<VitalSignUpdateWithoutPatientInput, VitalSignUncheckedUpdateWithoutPatientInput>
    create: XOR<VitalSignCreateWithoutPatientInput, VitalSignUncheckedCreateWithoutPatientInput>
  }

  export type VitalSignUpdateWithWhereUniqueWithoutPatientInput = {
    where: VitalSignWhereUniqueInput
    data: XOR<VitalSignUpdateWithoutPatientInput, VitalSignUncheckedUpdateWithoutPatientInput>
  }

  export type VitalSignUpdateManyWithWhereWithoutPatientInput = {
    where: VitalSignScalarWhereInput
    data: XOR<VitalSignUpdateManyMutationInput, VitalSignUncheckedUpdateManyWithoutPatientInput>
  }

  export type VitalSignScalarWhereInput = {
    AND?: VitalSignScalarWhereInput | VitalSignScalarWhereInput[]
    OR?: VitalSignScalarWhereInput[]
    NOT?: VitalSignScalarWhereInput | VitalSignScalarWhereInput[]
    id?: StringFilter<"VitalSign"> | string
    patientId?: StringNullableFilter<"VitalSign"> | string | null
    bp?: StringNullableFilter<"VitalSign"> | string | null
    height?: StringNullableFilter<"VitalSign"> | string | null
    temp?: StringNullableFilter<"VitalSign"> | string | null
    spo2?: StringNullableFilter<"VitalSign"> | string | null
    weight?: StringNullableFilter<"VitalSign"> | string | null
    hr?: StringNullableFilter<"VitalSign"> | string | null
    rbs?: StringNullableFilter<"VitalSign"> | string | null
    rr?: StringNullableFilter<"VitalSign"> | string | null
    timeVs?: DateTimeNullableFilter<"VitalSign"> | Date | string | null
    allergies?: BoolNullableFilter<"VitalSign"> | boolean | null
    createdAt?: DateTimeFilter<"VitalSign"> | Date | string
    updatedAt?: DateTimeFilter<"VitalSign"> | Date | string
  }

  export type UserCreateWithoutPatientCountInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
    Role?: RoleCreateNestedManyWithoutUserInput
    Prompt?: PromptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientCountInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    Prompt?: PromptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientCountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientCountInput, UserUncheckedCreateWithoutPatientCountInput>
  }

  export type UserUpsertWithoutPatientCountInput = {
    update: XOR<UserUpdateWithoutPatientCountInput, UserUncheckedUpdateWithoutPatientCountInput>
    create: XOR<UserCreateWithoutPatientCountInput, UserUncheckedCreateWithoutPatientCountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientCountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientCountInput, UserUncheckedUpdateWithoutPatientCountInput>
  }

  export type UserUpdateWithoutPatientCountInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateManyWithoutUserNestedInput
    Prompt?: PromptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientCountInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    Prompt?: PromptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRefreshTokenInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountCreateNestedManyWithoutUserInput
    Role?: RoleCreateNestedManyWithoutUserInput
    Prompt?: PromptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokenInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountUncheckedCreateNestedManyWithoutUserInput
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
    Prompt?: PromptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
  }

  export type UserUpsertWithoutRefreshTokenInput = {
    update: XOR<UserUpdateWithoutRefreshTokenInput, UserUncheckedUpdateWithoutRefreshTokenInput>
    create: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokenInput, UserUncheckedUpdateWithoutRefreshTokenInput>
  }

  export type UserUpdateWithoutRefreshTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateManyWithoutUserNestedInput
    Prompt?: PromptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUncheckedUpdateManyWithoutUserNestedInput
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
    Prompt?: PromptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRoleInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
    Prompt?: PromptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountUncheckedCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    Prompt?: PromptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    deptcode?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringNullableFilter<"User"> | string | null
  }

  export type PatientCreateWithoutTblDepartmentInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyCreateNestedManyWithoutPatientInput
    Bed?: BedCreateNestedOneWithoutPatientInput
    User?: UserCreateNestedOneWithoutPatientInput
    VitalSign?: VitalSignCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutTblDepartmentInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyUncheckedCreateNestedManyWithoutPatientInput
    VitalSign?: VitalSignUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutTblDepartmentInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutTblDepartmentInput, PatientUncheckedCreateWithoutTblDepartmentInput>
  }

  export type PatientCreateManyTblDepartmentInputEnvelope = {
    data: PatientCreateManyTblDepartmentInput | PatientCreateManyTblDepartmentInput[]
  }

  export type PatientUpsertWithWhereUniqueWithoutTblDepartmentInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutTblDepartmentInput, PatientUncheckedUpdateWithoutTblDepartmentInput>
    create: XOR<PatientCreateWithoutTblDepartmentInput, PatientUncheckedCreateWithoutTblDepartmentInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutTblDepartmentInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutTblDepartmentInput, PatientUncheckedUpdateWithoutTblDepartmentInput>
  }

  export type PatientUpdateManyWithWhereWithoutTblDepartmentInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutTblDepartmentInput>
  }

  export type UserCreateWithoutPromptInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenCreateNestedManyWithoutUserInput
    Role?: RoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPromptInput = {
    id: string
    password?: string | null
    name?: string | null
    deptcode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    PatientCount?: PatientCountUncheckedCreateNestedManyWithoutUserInput
    RefreshToken?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    Role?: RoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPromptInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPromptInput, UserUncheckedCreateWithoutPromptInput>
  }

  export type UserUpsertWithoutPromptInput = {
    update: XOR<UserUpdateWithoutPromptInput, UserUncheckedUpdateWithoutPromptInput>
    create: XOR<UserCreateWithoutPromptInput, UserUncheckedCreateWithoutPromptInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPromptInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPromptInput, UserUncheckedUpdateWithoutPromptInput>
  }

  export type UserUpdateWithoutPromptInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
    Role?: RoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPromptInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUncheckedUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    Role?: RoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientCreateWithoutVitalSignInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyCreateNestedManyWithoutPatientInput
    Bed?: BedCreateNestedOneWithoutPatientInput
    tblDepartment?: tblDepartmentCreateNestedOneWithoutPatientInput
    User?: UserCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutVitalSignInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
    Journey?: JourneyUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutVitalSignInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutVitalSignInput, PatientUncheckedCreateWithoutVitalSignInput>
  }

  export type PatientUpsertWithoutVitalSignInput = {
    update: XOR<PatientUpdateWithoutVitalSignInput, PatientUncheckedUpdateWithoutVitalSignInput>
    create: XOR<PatientCreateWithoutVitalSignInput, PatientUncheckedCreateWithoutVitalSignInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutVitalSignInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutVitalSignInput, PatientUncheckedUpdateWithoutVitalSignInput>
  }

  export type PatientUpdateWithoutVitalSignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUpdateManyWithoutPatientNestedInput
    Bed?: BedUpdateOneWithoutPatientNestedInput
    tblDepartment?: tblDepartmentUpdateOneWithoutPatientNestedInput
    User?: UserUpdateOneWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutVitalSignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyUserInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
  }

  export type PatientCountCreateManyUserInput = {
    id: string
    counter?: number | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type RefreshTokenCreateManyUserInput = {
    id: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type PromptCreateManyUserInput = {
    id?: string
    text: string
    intent?: string | null
    parameters?: string | null
    hasAction?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUpdateManyWithoutPatientNestedInput
    Bed?: BedUpdateOneWithoutPatientNestedInput
    tblDepartment?: tblDepartmentUpdateOneWithoutPatientNestedInput
    VitalSign?: VitalSignUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUncheckedUpdateManyWithoutPatientNestedInput
    VitalSign?: VitalSignUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    counter?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    counter?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    counter?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    route?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    route?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    route?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PromptUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    intent?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    hasAction?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    intent?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    hasAction?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    intent?: NullableStringFieldUpdateOperationsInput | string | null
    parameters?: NullableStringFieldUpdateOperationsInput | string | null
    hasAction?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateManyBedInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    departmentId?: Decimal | DecimalJsLike | number | string | null
    ticketNumber?: number | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
  }

  export type PatientUpdateWithoutBedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUpdateManyWithoutPatientNestedInput
    tblDepartment?: tblDepartmentUpdateOneWithoutPatientNestedInput
    User?: UserUpdateOneWithoutPatientNestedInput
    VitalSign?: VitalSignUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutBedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUncheckedUpdateManyWithoutPatientNestedInput
    VitalSign?: VitalSignUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutBedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JourneyCreateManyPatientInput = {
    id: string
    isActive?: boolean | null
    firstCallTime?: Date | string | null
    vitalTime?: Date | string | null
    assignDeptTime?: Date | string | null
    secondCallTime?: Date | string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type VitalSignCreateManyPatientInput = {
    id: string
    bp?: string | null
    height?: string | null
    temp?: string | null
    spo2?: string | null
    weight?: string | null
    hr?: string | null
    rbs?: string | null
    rr?: string | null
    timeVs?: Date | string | null
    allergies?: boolean | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type JourneyUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VitalSignUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    timeVs?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VitalSignUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    timeVs?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VitalSignUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    bp?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    temp?: NullableStringFieldUpdateOperationsInput | string | null
    spo2?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    hr?: NullableStringFieldUpdateOperationsInput | string | null
    rbs?: NullableStringFieldUpdateOperationsInput | string | null
    rr?: NullableStringFieldUpdateOperationsInput | string | null
    timeVs?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUpdateManyWithoutUserNestedInput
    Prompt?: PromptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    PatientCount?: PatientCountUncheckedUpdateManyWithoutUserNestedInput
    RefreshToken?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    Prompt?: PromptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    deptcode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientCreateManyTblDepartmentInput = {
    id: string
    name?: string | null
    nationality?: string | null
    sex?: string | null
    idNumber?: string | null
    age?: number | null
    mobileNumber?: string | null
    status?: string | null
    cheifComplaint?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    ticket?: string | null
    userId?: string | null
    callPatient?: boolean | null
    state?: number | null
    barcode?: string | null
    ticketNumber?: number | null
    bedId?: string | null
    beginTime?: Date | string | null
    endTime?: Date | string | null
    birthDate?: Date | string | null
    bloodGroup?: string | null
    mrnNumber?: string | null
    remarks?: string | null
    assignDeptTime?: Date | string | null
    firstCallTime?: Date | string | null
    secondCallTime?: Date | string | null
    vitalTime?: Date | string | null
    registrationDate?: Date | string | null
  }

  export type PatientUpdateWithoutTblDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUpdateManyWithoutPatientNestedInput
    Bed?: BedUpdateOneWithoutPatientNestedInput
    User?: UserUpdateOneWithoutPatientNestedInput
    VitalSign?: VitalSignUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutTblDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Journey?: JourneyUncheckedUpdateManyWithoutPatientNestedInput
    VitalSign?: VitalSignUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutTblDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    mobileNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    cheifComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    callPatient?: NullableBoolFieldUpdateOperationsInput | boolean | null
    state?: NullableIntFieldUpdateOperationsInput | number | null
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    ticketNumber?: NullableIntFieldUpdateOperationsInput | number | null
    bedId?: NullableStringFieldUpdateOperationsInput | string | null
    beginTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    mrnNumber?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    assignDeptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    secondCallTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    vitalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}